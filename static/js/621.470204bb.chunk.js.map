{"version":3,"file":"static/js/621.470204bb.chunk.js","mappings":"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","sources":["api/idolDataApi.js","utils/storage/storageUtils.js","utils/grid/gridUtils.js","utils/idol/idolGenerator.js","context/AppContext.js","hooks/useGrid.js","components/grid/GridCell.jsx","components/grid/Grid.jsx","components/common/Button.jsx","components/grid/OptimizeButton.jsx","utils/trade/tradeUtils.js","components/inventory/IdolInventory.jsx","components/common/Card.jsx","utils/modifiers/modifierUtils.js","components/modifiers/ExportModal.jsx","components/modifiers/ModifierGroup.jsx","components/modifiers/ActiveModifiers.jsx","components/modifiers/ModifierCard.jsx","components/modifiers/ModifierSearch.jsx","hooks/useModifiers.js","components/builder/IdolBuilder.jsx","components/common/Modal.jsx","utils/modifiers/extractModifiersFromInventory.js","components/modifiers/DesiredModifiers.jsx","components/inventory/IdolPasteHandler.jsx","components/common/ShareButton.jsx","components/common/ClearButton.jsx","components/strategies/StrategiesModal.jsx","components/strategies/StrategiesButton.jsx","components/builder/UniqueIdols.jsx","components/trade/TradeGenerator.jsx","App.js"],"sourcesContent":["// api/idolDataApi.js\r\nconst IDOL_TYPES = [\r\n  { name: \"Minor\", width: 1, height: 1 },\r\n  { name: \"Kamasan\", width: 1, height: 2 },\r\n  { name: \"Totemic\", width: 1, height: 3 },\r\n  { name: \"Noble\", width: 2, height: 1 },\r\n  { name: \"Conqueror\", width: 2, height: 2 },\r\n  { name: \"Burial\", width: 3, height: 1 },\r\n];\r\n\r\nconst IDOL_DATA_FILES = [\r\n  \"minor_idol_mods.json\",\r\n  \"kamasan_noble_idol_mods.json\",\r\n  \"burial_totemic_idol_mods.json\",\r\n  \"conqueror_idol_mods.json\",\r\n];\r\n\r\n/**\r\n * Maps idol data from JSON responses to the required structure\r\n * @param {Object[]} dataResponses - Array of JSON data from API calls\r\n * @returns {Object} Formatted idol mod data\r\n */\r\nconst formatIdolData = (dataResponses) => {\r\n  const [minorData, kamasanNobleData, burialTotemicData, conquerorData] = dataResponses;\r\n\r\n  return {\r\n    prefixes: {\r\n      Minor: minorData.prefixes,\r\n      Kamasan: kamasanNobleData.prefixes,\r\n      Totemic: burialTotemicData.prefixes,\r\n      Noble: kamasanNobleData.prefixes,\r\n      Conqueror: conquerorData.prefixes,\r\n      Burial: burialTotemicData.prefixes,\r\n    },\r\n    suffixes: {\r\n      Minor: minorData.suffixes,\r\n      Kamasan: kamasanNobleData.suffixes,\r\n      Totemic: burialTotemicData.suffixes,\r\n      Noble: kamasanNobleData.suffixes,\r\n      Conqueror: conquerorData.suffixes,\r\n      Burial: burialTotemicData.suffixes,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Loads all idol data from JSON files\r\n * @returns {Promise<Object>} Promise resolving to idol data and types\r\n */\r\nexport const loadIdolData = async () => {\r\n  try {\r\n    const baseUrl = process.env.PUBLIC_URL || \"\";\r\n\r\n    // Create all fetch promises\r\n    const fetchPromises = IDOL_DATA_FILES.map(filename =>\r\n      fetch(`${baseUrl}/data/${filename}`)\r\n    );\r\n\r\n    // Execute all fetches in parallel\r\n    const responses = await Promise.all(fetchPromises);\r\n\r\n    // Check for any failed responses\r\n    const failedResponses = responses.filter(r => !r.ok);\r\n    if (failedResponses.length > 0) {\r\n      const failedUrls = failedResponses.map(r => r.url).join(\", \");\r\n      throw new Error(`Failed to load: ${failedUrls}`);\r\n    }\r\n\r\n    // Parse all JSON responses in parallel\r\n    const dataResponses = await Promise.all(responses.map(r => r.json()));\r\n\r\n    // Format the data\r\n    const modData = formatIdolData(dataResponses);\r\n\r\n    return {\r\n      mods: modData,\r\n      types: IDOL_TYPES,\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error loading idol data:\", error);\r\n    alert(\r\n      \"Failed to load idol data. If you're seeing this error, please ensure data files are in the correct location and refresh the page.\"\r\n    );\r\n    throw error;\r\n  }\r\n};","// utils/storage/storageUtils.js\r\nimport pako from \"pako\";\r\n\r\nconst STORAGE_KEYS = {\r\n  GRID_STATE: \"poe-idol-grid\",\r\n  INVENTORY: \"poe-idol-inventory\",\r\n};\r\n\r\n// Base64 conversion utilities\r\nconst uint8ToBase64 = (uint8Array) => {\r\n  const binary = uint8Array.reduce((acc, byte) => acc + String.fromCharCode(byte), \"\");\r\n  return btoa(binary)\r\n    .replace(/\\+/g, \"-\")\r\n    .replace(/\\//g, \"_\")\r\n    .replace(/=+$/, \"\");\r\n};\r\n\r\nconst base64ToUint8Array = (base64) => {\r\n  // Restore standard base64 format\r\n  const standardBase64 = base64\r\n    .replace(/-/g, \"+\")\r\n    .replace(/_/g, \"/\");\r\n\r\n  // Add padding if needed\r\n  const pad = standardBase64.length % 4;\r\n  const paddedBase64 = pad\r\n    ? standardBase64 + \"=\".repeat(4 - pad)\r\n    : standardBase64;\r\n\r\n  const binaryString = atob(paddedBase64);\r\n  const bytes = new Uint8Array(binaryString.length);\r\n\r\n  for (let i = 0; i < binaryString.length; i++) {\r\n    bytes[i] = binaryString.charCodeAt(i);\r\n  }\r\n\r\n  return bytes;\r\n};\r\n\r\n// Local storage operations with error handling\r\nexport const saveGridState = (gridState) => {\r\n  try {\r\n    localStorage.setItem(STORAGE_KEYS.GRID_STATE, JSON.stringify(gridState));\r\n    return true;\r\n  } catch (err) {\r\n    console.error(\"Failed to save grid:\", err);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const saveInventory = (inventory) => {\r\n  try {\r\n    localStorage.setItem(STORAGE_KEYS.INVENTORY, JSON.stringify(inventory));\r\n    return true;\r\n  } catch (err) {\r\n    console.error(\"Failed to save inventory:\", err);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const loadGridState = () => {\r\n  try {\r\n    const data = localStorage.getItem(STORAGE_KEYS.GRID_STATE);\r\n    return data ? JSON.parse(data) : null;\r\n  } catch (err) {\r\n    console.error(\"Failed to load grid:\", err);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const loadInventory = () => {\r\n  try {\r\n    const data = localStorage.getItem(STORAGE_KEYS.INVENTORY);\r\n    return data ? JSON.parse(data) : null;\r\n  } catch (err) {\r\n    console.error(\"Failed to load inventory:\", err);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const clearSavedData = () => {\r\n  try {\r\n    localStorage.removeItem(STORAGE_KEYS.GRID_STATE);\r\n    localStorage.removeItem(STORAGE_KEYS.INVENTORY);\r\n    return true;\r\n  } catch (err) {\r\n    console.error(\"Failed to clear data:\", err);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Type code utilities\r\nconst typeCodeMap = {\r\n  Minor: \"m\",\r\n  Kamasan: \"k\",\r\n  Totemic: \"t\",\r\n  Noble: \"n\",\r\n  Conqueror: \"c\",\r\n  Burial: \"b\"\r\n};\r\n\r\nconst typeFromCodeMap = Object.entries(typeCodeMap).reduce(\r\n  (acc, [type, code]) => ({ ...acc, [code]: type }),\r\n  {}\r\n);\r\n\r\nconst getTypeCode = (idolType) => typeCodeMap[idolType] || \"x\";\r\n\r\nconst getIdolTypeFromCode = (code) => typeFromCodeMap[code] || \"Unknown\";\r\n\r\n// Data optimization and restoration\r\nconst optimizeDataForSharing = (gridState, inventory) => {\r\n  // Create a map for quick idol lookup by id\r\n  const idolMap = new Map(inventory.map((idol, index) => [idol.id, index]));\r\n  const sparseGrid = [];\r\n  const placedIdols = new Set();\r\n\r\n  // Process grid cells\r\n  for (let r = 0; r < gridState.length; r++) {\r\n    for (let c = 0; c < gridState[r].length; c++) {\r\n      const cell = gridState[r][c];\r\n      if (cell) {\r\n        const pos = cell.position || { row: r, col: c };\r\n        if (pos.row === r && pos.col === c) {\r\n          const idolIndex = idolMap.get(cell.id);\r\n          sparseGrid.push([idolIndex, r, c]);\r\n          placedIdols.add(idolIndex);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Optimize inventory representation\r\n  const optimizedInventory = inventory.map((idol, index) => {\r\n    const typeCode = getTypeCode(idol.type);\r\n    const result = [index, typeCode, placedIdols.has(index) ? 1 : 0];\r\n\r\n    if (idol.isUnique) {\r\n      result.push(1);  // isUnique flag\r\n      result.push(idol.uniqueName || idol.name);\r\n      result.push(idol.uniqueModifiers?.map((m) => m.Mod) || []);\r\n    } else {\r\n      result.push(0);  // not unique\r\n      const prefixIds = idol.prefixes?.filter((p) => p.id).map((p) => p.id) || [];\r\n      const suffixIds = idol.suffixes?.filter((s) => s.id).map((s) => s.id) || [];\r\n      result.push(prefixIds);\r\n      result.push(suffixIds);\r\n    }\r\n\r\n    return result;\r\n  });\r\n\r\n  return {\r\n    g: sparseGrid,\r\n    v: optimizedInventory,\r\n  };\r\n};\r\n\r\nconst findModifierById = (id, modData, idolType) => {\r\n  if (!modData || !id) return null;\r\n\r\n  // Try to find in the specified idol type first\r\n  if (idolType) {\r\n    const normalizedType = idolType.charAt(0).toUpperCase() + idolType.slice(1).toLowerCase();\r\n\r\n    if (modData.prefixes[normalizedType]) {\r\n      const foundPrefix = modData.prefixes[normalizedType].find(\r\n        (prefix) => prefix.id === id\r\n      );\r\n      if (foundPrefix) return { ...foundPrefix };\r\n    }\r\n\r\n    if (modData.suffixes[normalizedType]) {\r\n      const foundSuffix = modData.suffixes[normalizedType].find(\r\n        (suffix) => suffix.id === id\r\n      );\r\n      if (foundSuffix) return { ...foundSuffix };\r\n    }\r\n  }\r\n\r\n  // If not found, search all types\r\n  for (const type in modData.prefixes) {\r\n    const foundPrefix = modData.prefixes[type].find(\r\n      (prefix) => prefix.id === id\r\n    );\r\n    if (foundPrefix) return { ...foundPrefix };\r\n  }\r\n\r\n  for (const type in modData.suffixes) {\r\n    const foundSuffix = modData.suffixes[type].find(\r\n      (suffix) => suffix.id === id\r\n    );\r\n    if (foundSuffix) return { ...foundSuffix };\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst generateIdolName = (type, prefixes, suffixes, isUnique) => {\r\n  if (isUnique) return `Unique ${type} Idol`;\r\n\r\n  let name = type;\r\n\r\n  if (prefixes?.length > 0) {\r\n    name = `${prefixes[0].Name} ${name}`;\r\n  }\r\n\r\n  if (suffixes?.length > 0) {\r\n    name = `${name} ${suffixes[0].Name}`;\r\n  }\r\n\r\n  return name;\r\n};\r\n\r\n// Idol size lookup\r\nconst idolSizes = {\r\n  Minor: { width: 1, height: 1 },\r\n  Kamasan: { width: 1, height: 2 },\r\n  Totemic: { width: 1, height: 3 },\r\n  Noble: { width: 2, height: 1 },\r\n  Conqueror: { width: 2, height: 2 },\r\n  Burial: { width: 3, height: 1 }\r\n};\r\n\r\nconst restoreFromOptimizedData = (optimizedData, modData) => {\r\n  if (!optimizedData?.v || !optimizedData?.g) {\r\n    return null;\r\n  }\r\n\r\n  // Restore inventory\r\n  const inventory = optimizedData.v.map((idolData) => {\r\n    const [index, typeCode, isPlaced, isUnique] = idolData;\r\n    const type = getIdolTypeFromCode(typeCode);\r\n    const idolId = `idol-${Date.now()}-${index}`;\r\n\r\n    if (isUnique === 1) {\r\n      const uniqueName = idolData[4];\r\n      const uniqueMods = idolData[5] || [];\r\n\r\n      return {\r\n        id: idolId,\r\n        type,\r\n        name: uniqueName,\r\n        uniqueName,\r\n        isPlaced: isPlaced === 1,\r\n        isUnique: true,\r\n        uniqueModifiers: uniqueMods.map((mod) => ({\r\n          Mod: mod,\r\n          Name: \"Unique\",\r\n          Code: `Unique-${Date.now()}-${Math.random()}`,\r\n        })),\r\n        prefixes: [],\r\n        suffixes: [],\r\n      };\r\n    } else {\r\n      const prefixIds = idolData[4] || [];\r\n      const suffixIds = idolData[5] || [];\r\n\r\n      const prefixes = prefixIds\r\n        .map((id) => findModifierById(id, modData, type))\r\n        .filter(Boolean);\r\n\r\n      const suffixes = suffixIds\r\n        .map((id) => findModifierById(id, modData, type))\r\n        .filter(Boolean);\r\n\r\n      const name = generateIdolName(type, prefixes, suffixes, false);\r\n\r\n      return {\r\n        id: idolId,\r\n        type,\r\n        name,\r\n        isPlaced: isPlaced === 1,\r\n        isUnique: false,\r\n        prefixes,\r\n        suffixes,\r\n      };\r\n    }\r\n  });\r\n\r\n  // Restore grid state\r\n  const gridState = Array(7).fill().map(() => Array(6).fill(null));\r\n\r\n  for (const [idolIndex, row, col] of optimizedData.g) {\r\n    const idol = inventory[idolIndex];\r\n    if (!idol) continue;\r\n\r\n    const { width, height } = idolSizes[idol.type] || { width: 1, height: 1 };\r\n\r\n    idol.isPlaced = true;\r\n\r\n    // Fill all cells the idol occupies\r\n    for (let r = row; r < row + height; r++) {\r\n      for (let c = col; c < col + width; c++) {\r\n        if (r < gridState.length && c < gridState[0].length) {\r\n          gridState[r][c] = { ...idol, position: { row, col } };\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return { gridState, inventory };\r\n};\r\n\r\n// Sharing functionality\r\nexport const generateShareableURL = (gridState, inventory) => {\r\n  try {\r\n    const optimizedData = optimizeDataForSharing(gridState, inventory);\r\n    const json = JSON.stringify(optimizedData);\r\n    const compressed = pako.deflate(json, { level: 9 });\r\n    const base64 = uint8ToBase64(compressed);\r\n\r\n    const url = new URL(window.location.href);\r\n    url.searchParams.set(\"share\", base64);\r\n    return url.toString();\r\n  } catch (err) {\r\n    console.error(\"Failed to generate share URL:\", err);\r\n    return window.location.href;\r\n  }\r\n};\r\n\r\nexport const getSharedDataFromURL = (modData, shareParam = null) => {\r\n  try {\r\n    if (!shareParam) {\r\n      const url = new URL(window.location.href);\r\n      shareParam = url.searchParams.get('share');\r\n      if (!shareParam) return null;\r\n    }\r\n\r\n    const compressed = base64ToUint8Array(shareParam);\r\n    const json = pako.inflate(compressed, { to: 'string' });\r\n    const optimizedData = JSON.parse(json);\r\n\r\n    return restoreFromOptimizedData(optimizedData, modData);\r\n  } catch (err) {\r\n    console.error('Failed to extract shared data:', err);\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const copyToClipboard = async (text) => {\r\n  try {\r\n    await navigator.clipboard.writeText(text);\r\n    return true;\r\n  } catch (err) {\r\n    console.error(\"Failed to copy to clipboard:\", err);\r\n    return false;\r\n  }\r\n};","// utils/grid/gridUtils.js\r\nimport _ from \"lodash\";\r\n\r\n// Predefined blocked cells for performance optimization\r\nconst BLOCKED_CELLS = new Set([\r\n  \"0,0\", \"2,1\", \"2,4\", \"3,1\", \"3,2\", \"3,3\", \"3,4\", \"4,1\", \"4,4\", \"6,5\"\r\n]);\r\n\r\nexport const isBlockedCell = (row, col) => BLOCKED_CELLS.has(`${row},${col}`);\r\n\r\nexport const isValidPlacement = (grid, idol, row, col, idolTypes) => {\r\n  const idolType = idolTypes.find((type) => type.name === idol.type);\r\n  if (!idolType) return false;\r\n\r\n  const { width, height } = idolType;\r\n\r\n  // Check boundaries\r\n  if (row + height > 7 || col + width > 6) return false;\r\n\r\n  // Check for blocked cells and collisions\r\n  for (let r = row; r < row + height; r++) {\r\n    for (let c = col; c < col + width; c++) {\r\n      if (isBlockedCell(r, c) || grid[r][c] !== null) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const placeIdol = (grid, idol, row, col, idolTypes) => {\r\n  const newGrid = _.cloneDeep(grid);\r\n  const idolType = idolTypes.find((type) => type.name === idol.type);\r\n\r\n  if (!idolType) return newGrid;\r\n\r\n  const positionData = { ...idol, position: { row, col } };\r\n\r\n  for (let r = row; r < row + idolType.height; r++) {\r\n    for (let c = col; c < col + idolType.width; c++) {\r\n      newGrid[r][c] = positionData;\r\n    }\r\n  }\r\n\r\n  return newGrid;\r\n};\r\n\r\nexport const calculateGridScore = (grid) => {\r\n  let filledCellCount = 0;\r\n\r\n  for (let row = 0; row < grid.length; row++) {\r\n    for (let col = 0; col < grid[row].length; col++) {\r\n      if (grid[row][col] !== null && !isBlockedCell(row, col)) {\r\n        filledCellCount++;\r\n      }\r\n    }\r\n  }\r\n\r\n  return filledCellCount;\r\n};\r\n\r\nexport const validatePlacement = (grid, idol, row, col, idolTypes) => {\r\n  const idolType = idolTypes.find((type) => type.name === idol.type);\r\n\r\n  if (!idolType) {\r\n    return { valid: false, reason: \"unknown_type\" };\r\n  }\r\n\r\n  const { width, height } = idolType;\r\n\r\n  if (row + height > 7 || col + width > 6) {\r\n    return { valid: false, reason: \"size_too_large\" };\r\n  }\r\n\r\n  for (let r = row; r < row + height; r++) {\r\n    for (let c = col; c < col + width; c++) {\r\n      if (isBlockedCell(r, c)) {\r\n        return { valid: false, reason: \"blocked_cells\" };\r\n      }\r\n\r\n      if (grid[r][c] !== null) {\r\n        return { valid: false, reason: \"overlapping\" };\r\n      }\r\n    }\r\n  }\r\n\r\n  return { valid: true };\r\n};\r\n\r\nexport const optimizeGrid = (\r\n  inventory,\r\n  idolTypes,\r\n  currentGrid,\r\n  clearExisting = true\r\n) => {\r\n  if (inventory.length === 0) {\r\n    return {\r\n      grid: currentGrid,\r\n      placedCount: 0,\r\n      notPlacedCount: 0,\r\n      notPlacedIdols: [],\r\n    };\r\n  }\r\n\r\n  let bestGrid = clearExisting\r\n    ? Array(7).fill().map(() => Array(6).fill(null))\r\n    : _.cloneDeep(currentGrid);\r\n\r\n  let bestScore = calculateGridScore(bestGrid);\r\n  let placedIdols = new Set();\r\n  let placementReasons = {};\r\n\r\n  const MAX_ITERATIONS = 1000;\r\n\r\n  for (let i = 0; i < MAX_ITERATIONS; i++) {\r\n    const testGrid = Array(7).fill().map(() => Array(6).fill(null));\r\n    const iterationPlacedIdols = new Set();\r\n    const iterationReasons = {};\r\n\r\n    const shuffledInventory = _.shuffle([...inventory]);\r\n\r\n    for (const idol of shuffledInventory) {\r\n      let placed = false;\r\n      let reason = \"no_space\";\r\n\r\n      for (let row = 0; row < 7 && !placed; row++) {\r\n        for (let col = 0; col < 6 && !placed; col++) {\r\n          const validation = validatePlacement(\r\n            testGrid,\r\n            idol,\r\n            row,\r\n            col,\r\n            idolTypes\r\n          );\r\n\r\n          if (validation.valid) {\r\n            const newGrid = placeIdol(testGrid, idol, row, col, idolTypes);\r\n            // Update the test grid directly instead of nested loops\r\n            for (let r = 0; r < 7; r++) {\r\n              testGrid[r] = [...newGrid[r]];\r\n            }\r\n\r\n            placed = true;\r\n            iterationPlacedIdols.add(idol.id);\r\n            break;\r\n          } else {\r\n            reason = validation.reason;\r\n          }\r\n        }\r\n        if (placed) break;\r\n      }\r\n\r\n      if (!placed) {\r\n        iterationReasons[idol.id] = reason;\r\n      }\r\n    }\r\n\r\n    const score = calculateGridScore(testGrid);\r\n\r\n    if (score > bestScore) {\r\n      bestGrid = testGrid;\r\n      bestScore = score;\r\n      placedIdols = iterationPlacedIdols;\r\n      placementReasons = iterationReasons;\r\n    }\r\n  }\r\n\r\n  const notPlacedIdols = inventory\r\n    .filter((idol) => !placedIdols.has(idol.id))\r\n    .map((idol) => ({\r\n      id: idol.id,\r\n      name: idol.name,\r\n      type: idol.type,\r\n      reason: placementReasons[idol.id] || \"no_space\",\r\n    }));\r\n\r\n  return {\r\n    grid: bestGrid,\r\n    placedCount: placedIdols.size,\r\n    notPlacedCount: notPlacedIdols.length,\r\n    notPlacedIdols,\r\n  };\r\n};\r\n\r\n// Pre-calculate idol sizes for performance\r\nconst DEFAULT_IDOL_SIZES = {\r\n  minor: { width: 1, height: 1 },\r\n  kamasan: { width: 1, height: 2 },\r\n  totemic: { width: 1, height: 3 },\r\n  noble: { width: 2, height: 1 },\r\n  conqueror: { width: 2, height: 2 },\r\n  burial: { width: 3, height: 1 },\r\n};\r\n\r\n// Default invalid positions\r\nconst DEFAULT_INVALID_POSITIONS = new Set([\r\n  \"0,0\", \"1,2\", \"4,2\", \"1,3\", \"2,3\", \"3,3\", \"4,3\", \"1,4\", \"4,4\", \"5,6\",\r\n]);\r\n\r\nconst getIdolValue = (idol) => (idol.prefixes?.length || 0) + (idol.suffixes?.length || 0);\r\n\r\nexport function optimizeIdolPlacement(\r\n  idols,\r\n  gridDimensions = { width: 6, height: 7 },\r\n  invalidPositions = null,\r\n  idolSizes = null\r\n) {\r\n  const blockedPositions = invalidPositions || DEFAULT_INVALID_POSITIONS;\r\n  const sizes = idolSizes || DEFAULT_IDOL_SIZES;\r\n\r\n  // Calculate value per cell for each idol and sort\r\n  const scoredIdols = idols.map((idol) => {\r\n    const modCount = getIdolValue(idol);\r\n    const idolSizeInfo = sizes[idol.type.toLowerCase()] || { width: 1, height: 1 };\r\n    const size = idolSizeInfo.width * idolSizeInfo.height;\r\n\r\n    return {\r\n      ...idol,\r\n      valuePerCell: modCount / size,\r\n      totalValue: modCount,\r\n    };\r\n  });\r\n\r\n  scoredIdols.sort((a, b) => b.valuePerCell - a.valuePerCell);\r\n\r\n  const grid = Array(gridDimensions.height)\r\n    .fill()\r\n    .map(() => Array(gridDimensions.width).fill(null));\r\n\r\n  const placedIdols = [];\r\n\r\n  for (const idol of scoredIdols) {\r\n    const bestPosition = findBestPosition(idol, grid, blockedPositions, sizes);\r\n\r\n    if (bestPosition) {\r\n      placeIdolOnGrid(idol, bestPosition, grid, sizes);\r\n      placedIdols.push({\r\n        ...idol,\r\n        position: bestPosition,\r\n      });\r\n    }\r\n  }\r\n\r\n  return placedIdols;\r\n}\r\n\r\nfunction findBestPosition(idol, grid, invalidPositions, idolSizes) {\r\n  const idolType = idol.type.toLowerCase();\r\n  const { width, height } = idolSizes[idolType] || { width: 1, height: 1 };\r\n  const gridHeight = grid.length;\r\n  const gridWidth = grid[0].length;\r\n\r\n  for (let y = 0; y < gridHeight - height + 1; y++) {\r\n    for (let x = 0; x < gridWidth - width + 1; x++) {\r\n      if (isValidPosition(x, y, width, height, grid, invalidPositions)) {\r\n        return { x, y };\r\n      }\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction isValidPosition(x, y, width, height, grid, invalidPositions) {\r\n  for (let j = 0; j < height; j++) {\r\n    for (let i = 0; i < width; i++) {\r\n      const posX = x + i;\r\n      const posY = y + j;\r\n\r\n      if (\r\n        posY >= grid.length ||\r\n        posX >= grid[0].length ||\r\n        invalidPositions.has(`${posX},${posY}`) ||\r\n        grid[posY][posX] !== null\r\n      ) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction placeIdolOnGrid(idol, position, grid, idolSizes) {\r\n  const idolType = idol.type.toLowerCase();\r\n  const { width, height } = idolSizes[idolType] || { width: 1, height: 1 };\r\n  const { x, y } = position;\r\n\r\n  for (let j = 0; j < height; j++) {\r\n    for (let i = 0; i < width; i++) {\r\n      grid[y + j][x + i] = idol.id;\r\n    }\r\n  }\r\n}\r\n\r\nexport function backtrackingOptimization(\r\n  idols,\r\n  gridDimensions = { width: 6, height: 7 },\r\n  invalidPositions = null,\r\n  idolSizes = null\r\n) {\r\n  const blockedPositions = invalidPositions || DEFAULT_INVALID_POSITIONS;\r\n  const sizes = idolSizes || DEFAULT_IDOL_SIZES;\r\n\r\n  // Sort idols by value (highest first)\r\n  const sortedIdols = [...idols].sort((a, b) => getIdolValue(b) - getIdolValue(a));\r\n\r\n  const grid = Array(gridDimensions.height)\r\n    .fill()\r\n    .map(() => Array(gridDimensions.width).fill(null));\r\n\r\n  let bestSolution = {\r\n    idols: [],\r\n    totalValue: 0,\r\n  };\r\n\r\n  function backtrack(index, currentGrid, placedIdols, currentValue) {\r\n    // Base case: all idols processed\r\n    if (index >= sortedIdols.length) {\r\n      if (currentValue > bestSolution.totalValue) {\r\n        bestSolution = {\r\n          idols: [...placedIdols],\r\n          totalValue: currentValue,\r\n        };\r\n      }\r\n      return;\r\n    }\r\n\r\n    const idol = sortedIdols[index];\r\n    const idolType = idol.type.toLowerCase();\r\n    const { width, height } = sizes[idolType] || { width: 1, height: 1 };\r\n\r\n    // Try to place the current idol\r\n    let placed = false;\r\n    const { height: gridHeight, width: gridWidth } = gridDimensions;\r\n\r\n    for (let y = 0; y < gridHeight - height + 1; y++) {\r\n      for (let x = 0; x < gridWidth - width + 1; x++) {\r\n        if (isValidPosition(x, y, width, height, currentGrid, blockedPositions)) {\r\n          // Clone grid and place idol\r\n          const newGrid = currentGrid.map(row => [...row]);\r\n          placeIdolOnGrid(idol, { x, y }, newGrid, sizes);\r\n\r\n          const idolValue = getIdolValue(idol);\r\n          placedIdols.push({ ...idol, position: { x, y } });\r\n\r\n          // Recurse with the placed idol\r\n          backtrack(index + 1, newGrid, placedIdols, currentValue + idolValue);\r\n\r\n          // Backtrack\r\n          placedIdols.pop();\r\n          placed = true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // If couldn't place this idol, skip it\r\n    if (!placed) {\r\n      backtrack(index + 1, currentGrid, placedIdols, currentValue);\r\n    }\r\n  }\r\n\r\n  backtrack(0, grid, [], 0);\r\n  return bestSolution.idols;\r\n}","// utils/idolGenerator.js\r\n\r\n/**\r\n * Generate idol names with a consistent format based on idol type and modifiers\r\n * @param {string} idolType - The type of idol\r\n * @param {Array} prefixes - Array of prefix modifiers\r\n * @param {Array} suffixes - Array of suffix modifiers\r\n * @returns {string} - The formatted idol name\r\n */\r\nconst generateIdolName = (idolType, prefixes, suffixes) => {\r\n  if (!idolType) return '';\r\n\r\n  const parts = [];\r\n\r\n  // Add first prefix\r\n  if (prefixes.length > 0) {\r\n    let prefixPart = prefixes[0].Name;\r\n    if (prefixes[0].totalCount > 1) {\r\n      prefixPart += ` (${prefixes[0].displayCount}/${prefixes[0].totalCount})`;\r\n    }\r\n    parts.push(prefixPart);\r\n  }\r\n\r\n  // Add idol type\r\n  parts.push(idolType);\r\n\r\n  // Add first suffix\r\n  if (suffixes.length > 0) {\r\n    let suffixPart = suffixes[0].Name;\r\n    if (suffixes[0].totalCount > 1 && prefixes.length === 0) {\r\n      suffixPart += ` (${suffixes[0].displayCount}/${suffixes[0].totalCount})`;\r\n    }\r\n    parts.push(suffixPart);\r\n  }\r\n\r\n  // Add secondary prefix\r\n  if (prefixes.length > 1) {\r\n    parts.push(`of ${prefixes[1].Name}`);\r\n  }\r\n\r\n  // Add secondary suffix\r\n  if (suffixes.length > 1) {\r\n    parts.push(`of ${suffixes[1].Name}`);\r\n  }\r\n\r\n  return parts.join(' ');\r\n};\r\n\r\n/**\r\n * Check if two modifiers are mutually exclusive\r\n * @param {Object} mod1 - First modifier to check\r\n * @param {Object} mod2 - Second modifier to check\r\n * @returns {boolean} - True if modifiers are mutually exclusive\r\n */\r\nconst areExclusiveModifiers = (mod1, mod2) => {\r\n  // No conflict if either mod is missing or they have different names\r\n  if (!mod1 || !mod2 || mod1.Name !== mod2.Name) return false;\r\n\r\n  // Known exclusive modifier types\r\n  const exclusiveModNames = [\r\n    \"Breach\", \"Domination\", \"Essence\",\r\n    \"Harbinger\", \"Ambush\", \"Torment\"\r\n  ];\r\n\r\n  // Skip check if not an exclusive modifier type\r\n  if (!exclusiveModNames.includes(mod1.Name)) return false;\r\n\r\n  // Mapping of modifier names to their exclusive text patterns\r\n  const exclusivePatternsMap = {\r\n    \"Breach\": [\r\n      \"Breaches in your Maps contain 3 additional Clasped Hands\",\r\n      \"Breaches in your Maps contain 2 additional Clasped Hands\"\r\n    ],\r\n    \"Domination\": [\r\n      \"Your Maps contain an additional Shrine\",\r\n      \"Your Maps contain 2 additional Shrines\"\r\n    ],\r\n    \"Essence\": [\r\n      \"Your Maps contain an additional Imprisoned Monster\",\r\n      \"Your Maps contain 2 additional Imprisoned Monsters\"\r\n    ],\r\n    \"Harbinger\": [\r\n      \"Your Maps contain an additional Harbinger\",\r\n      \"Your Maps contain 2 additional Harbingers\"\r\n    ],\r\n    \"Ambush\": [\r\n      \"Your Maps contain an additional Strongbox\",\r\n      \"Your Maps contain 2 additional Strongboxes\"\r\n    ],\r\n    \"Torment\": [\r\n      \"Your Maps are haunted by an additional Tormented Spirit\",\r\n      \"Your Maps are haunted by 2 additional Tormented Spirits\"\r\n    ]\r\n  };\r\n\r\n  const patterns = exclusivePatternsMap[mod1.Name];\r\n  if (!patterns) return false;\r\n\r\n  // Check if both mods match patterns from the same set and are different\r\n  const mod1MatchesPattern = patterns.includes(mod1.Mod);\r\n  const mod2MatchesPattern = patterns.includes(mod2.Mod);\r\n\r\n  return (mod1MatchesPattern && mod2MatchesPattern && mod1.Mod !== mod2.Mod);\r\n};\r\n\r\n/**\r\n * Generate a list of idols based on desired modifiers\r\n * @param {Array} desiredModifiers - List of modifiers to include\r\n * @param {Object} modData - Available modifiers data by idol type\r\n * @param {Array} idolTypes - List of available idol types\r\n * @returns {Array} - Generated list of idols\r\n */\r\nexport const generateIdols = (desiredModifiers, modData, idolTypes) => {\r\n  if (!desiredModifiers?.length || !modData || !idolTypes?.length) {\r\n    return [];\r\n  }\r\n\r\n  // Group modifiers by ID and track counts\r\n  const modifierGroups = desiredModifiers.reduce((groups, mod) => {\r\n    if (!groups[mod.id]) {\r\n      groups[mod.id] = { ...mod, count: 1, originalCount: 1 };\r\n    } else {\r\n      groups[mod.id].count++;\r\n      groups[mod.id].originalCount++;\r\n    }\r\n    return groups;\r\n  }, {});\r\n\r\n  const uniqueModifiers = Object.values(modifierGroups);\r\n  const modifierUsage = uniqueModifiers.reduce((usage, mod) => {\r\n    usage[mod.id] = 0;\r\n    return usage;\r\n  }, {});\r\n\r\n  const idols = [];\r\n  const typeCounts = idolTypes.reduce((counts, type) => {\r\n    counts[type.name] = 0;\r\n    return counts;\r\n  }, {});\r\n\r\n  // Check if two modifiers are compatible on the same idol\r\n  const areModsCompatible = (mod1, mod2) => {\r\n    return !areExclusiveModifiers(mod1, mod2);\r\n  };\r\n\r\n  /**\r\n   * Determine the most appropriate idol type based on available modifiers\r\n   * @param {Array} availablePrefixes - List of available prefix modifiers\r\n   * @param {Array} availableSuffixes - List of available suffix modifiers\r\n   * @returns {string|null} - The determined idol type or null if none found\r\n   */\r\n  const determineIdolType = (availablePrefixes, availableSuffixes) => {\r\n    // Map modifiers to eligible types\r\n    const prefixTypeSupport = new Map();\r\n    const suffixTypeSupport = new Map();\r\n\r\n    // Build maps of which types support each modifier\r\n    for (const prefix of availablePrefixes) {\r\n      const supportingTypes = [];\r\n      for (const type of idolTypes) {\r\n        if (modData.prefixes[type.name]?.some(p => p.id === prefix.id)) {\r\n          supportingTypes.push(type.name);\r\n        }\r\n      }\r\n      if (supportingTypes.length > 0) {\r\n        prefixTypeSupport.set(prefix.id, supportingTypes);\r\n      }\r\n    }\r\n\r\n    for (const suffix of availableSuffixes) {\r\n      const supportingTypes = [];\r\n      for (const type of idolTypes) {\r\n        if (modData.suffixes[type.name]?.some(s => s.id === suffix.id)) {\r\n          supportingTypes.push(type.name);\r\n        }\r\n      }\r\n      if (supportingTypes.length > 0) {\r\n        suffixTypeSupport.set(suffix.id, supportingTypes);\r\n      }\r\n    }\r\n\r\n    // Define type pairs that commonly share modifiers and should be balanced\r\n    const typePairs = [\r\n      [\"Burial\", \"Totemic\"],\r\n      [\"Noble\", \"Kamasan\"]\r\n    ];\r\n\r\n    // Map of pair types for quick lookups\r\n    const typePairMap = new Map();\r\n    for (const [type1, type2] of typePairs) {\r\n      typePairMap.set(type1, type2);\r\n      typePairMap.set(type2, type1);\r\n    }\r\n\r\n    // Find all eligible types that can support the required modifiers\r\n    const eligibleTypes = idolTypes\r\n      .filter(type => {\r\n        const hasValidPrefix = availablePrefixes.length === 0 ||\r\n          availablePrefixes.some(p =>\r\n            prefixTypeSupport.get(p.id)?.includes(type.name)\r\n          );\r\n\r\n        const hasValidSuffix = availableSuffixes.length === 0 ||\r\n          availableSuffixes.some(s =>\r\n            suffixTypeSupport.get(s.id)?.includes(type.name)\r\n          );\r\n\r\n        return hasValidPrefix && hasValidSuffix;\r\n      })\r\n      .map(type => type.name);\r\n\r\n    if (eligibleTypes.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Check if we have any paired types that share all the modifiers\r\n    let pairedTypes = [];\r\n    for (const [type1, type2] of typePairs) {\r\n      if (eligibleTypes.includes(type1) && eligibleTypes.includes(type2)) {\r\n        // Check if both types support all the modifiers\r\n        const bothSupportAll = [...availablePrefixes, ...availableSuffixes].every(mod => {\r\n          const supportingTypes = mod.type === 'prefix'\r\n            ? prefixTypeSupport.get(mod.id)\r\n            : suffixTypeSupport.get(mod.id);\r\n\r\n          return supportingTypes?.includes(type1) && supportingTypes?.includes(type2);\r\n        });\r\n\r\n        if (bothSupportAll) {\r\n          pairedTypes.push([type1, type2]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // If we have paired types that share all mods, use balanced selection logic\r\n    if (pairedTypes.length > 0) {\r\n      // Use the first pair that shares all mods\r\n      const [type1, type2] = pairedTypes[0];\r\n\r\n      const type1Item = idolTypes.find(t => t.name === type1);\r\n      const type2Item = idolTypes.find(t => t.name === type2);\r\n\r\n      const type1Cells = type1Item.width * type1Item.height;\r\n      const type2Cells = type2Item.width * type2Item.height;\r\n\r\n      const type1Count = typeCounts[type1] || 0;\r\n      const type2Count = typeCounts[type2] || 0;\r\n\r\n      // Balance based on cell usage\r\n      const type1CellsUsed = type1Count * type1Cells;\r\n      const type2CellsUsed = type2Count * type2Cells;\r\n\r\n      // Choose based on cell usage\r\n      let chosenType;\r\n      if (type1CellsUsed < type2CellsUsed) {\r\n        chosenType = type1;\r\n      } else if (type2CellsUsed < type1CellsUsed) {\r\n        chosenType = type2;\r\n      } else {\r\n        // With equal cell usage, alternate between types on an empty grid\r\n        if (type1Count === 0 && type2Count === 0) {\r\n          // On an empty grid, choose the first type in the pair for the first idol,\r\n          // then alternate for subsequent idols\r\n          const totalIdols = Object.values(typeCounts).reduce((sum, count) => sum + count, 0);\r\n          chosenType = totalIdols % 2 === 0 ? type1 : type2;\r\n        } else {\r\n          // Otherwise, choose the one with fewer idols\r\n          if (type1Count <= type2Count) {\r\n            chosenType = type1;\r\n          } else {\r\n            chosenType = type2;\r\n          }\r\n        }\r\n      }\r\n\r\n      return chosenType;\r\n    }\r\n\r\n    // If we get here, either there are no pairs or the pairs don't share all mods\r\n    // Choose the type that can support all modifiers with the smallest grid footprint\r\n    const sortedEligible = [...eligibleTypes].sort((a, b) => {\r\n      const typeA = idolTypes.find(t => t.name === a);\r\n      const typeB = idolTypes.find(t => t.name === b);\r\n      return (typeA.width * typeA.height) - (typeB.width * typeB.height);\r\n    });\r\n\r\n    const chosenType = sortedEligible[0];\r\n    return chosenType;\r\n  };\r\n\r\n  /**\r\n   * Attempt to create an idol with maximum modifiers\r\n   * @returns {boolean} - True if successful, false otherwise\r\n   */\r\n  const tryCreateFullIdol = () => {\r\n    // Get available prefix and suffix mods\r\n    const availablePrefixes = uniqueModifiers.filter(mod =>\r\n      mod.type === \"prefix\" && modifierUsage[mod.id] < mod.count\r\n    );\r\n\r\n    const availableSuffixes = uniqueModifiers.filter(mod =>\r\n      mod.type === \"suffix\" && modifierUsage[mod.id] < mod.count\r\n    );\r\n\r\n    // Skip if no mods available\r\n    if (availablePrefixes.length === 0 && availableSuffixes.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    // Try to determine an idol type that can support the available prefixes and suffixes\r\n    const idolType = determineIdolType(availablePrefixes, availableSuffixes);\r\n\r\n    if (!idolType) {\r\n      let createdIdol = false;\r\n\r\n      // Try creating separate idols for each remaining prefix\r\n      for (const prefix of availablePrefixes) {\r\n        for (const type of idolTypes) {\r\n          if (modData.prefixes[type.name]?.some(p => p.id === prefix.id)) {\r\n            const idolId = `${Date.now()}-${Math.random()}`;\r\n            const newIdol = {\r\n              id: idolId,\r\n              type: type.name,\r\n              name: generateIdolName(type.name, [prefix], []),\r\n              prefixes: [prefix],\r\n              suffixes: [],\r\n            };\r\n\r\n            modifierUsage[prefix.id]++;\r\n            typeCounts[type.name] = (typeCounts[type.name] || 0) + 1; // Update typeCounts\r\n            idols.push(newIdol);\r\n            createdIdol = true;\r\n            break; // Move to the next prefix\r\n          }\r\n        }\r\n      }\r\n\r\n      // Try creating separate idols for each remaining suffix\r\n      for (const suffix of availableSuffixes) {\r\n        for (const type of idolTypes) {\r\n          if (modData.suffixes[type.name]?.some(s => s.id === suffix.id)) {\r\n            const idolId = `${Date.now()}-${Math.random()}`;\r\n            const newIdol = {\r\n              id: idolId,\r\n              type: type.name,\r\n              name: generateIdolName(type.name, [], [suffix]),\r\n              prefixes: [],\r\n              suffixes: [suffix],\r\n            };\r\n\r\n            modifierUsage[suffix.id]++;\r\n            typeCounts[type.name] = (typeCounts[type.name] || 0) + 1; // Update typeCounts\r\n            idols.push(newIdol);\r\n            createdIdol = true;\r\n            break; // Move to the next suffix\r\n          }\r\n        }\r\n      }\r\n\r\n      if (createdIdol) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    // Get type-specific available modifiers\r\n    const typeAvailablePrefixes = availablePrefixes.filter(mod =>\r\n      modData.prefixes[idolType]?.some(p => p.id === mod.id)\r\n    );\r\n\r\n    const typeAvailableSuffixes = availableSuffixes.filter(mod =>\r\n      modData.suffixes[idolType]?.some(s => s.id === mod.id)\r\n    );\r\n\r\n    // Select up to 2 compatible prefixes\r\n    const selectedPrefixes = [];\r\n    for (const prefix of typeAvailablePrefixes) {\r\n      if (selectedPrefixes.length >= 2) break;\r\n\r\n      // Check compatibility with already selected prefixes\r\n      const isCompatible = selectedPrefixes.every(p => areModsCompatible(p, prefix));\r\n      if (isCompatible) {\r\n        selectedPrefixes.push(prefix);\r\n      }\r\n    }\r\n\r\n    // Select up to 2 compatible suffixes\r\n    const selectedSuffixes = [];\r\n    for (const suffix of typeAvailableSuffixes) {\r\n      if (selectedSuffixes.length >= 2) break;\r\n\r\n      // Check compatibility with already selected suffixes and prefixes\r\n      const isCompatibleWithSuffixes = selectedSuffixes.every(s => areModsCompatible(s, suffix));\r\n      const isCompatibleWithPrefixes = selectedPrefixes.every(p => areModsCompatible(p, suffix));\r\n\r\n      if (isCompatibleWithSuffixes && isCompatibleWithPrefixes) {\r\n        selectedSuffixes.push(suffix);\r\n      }\r\n    }\r\n\r\n    // Only create idol if we have at least one modifier\r\n    if (selectedPrefixes.length + selectedSuffixes.length > 0) {\r\n      const idolId = `${Date.now()}-${Math.random()}`;\r\n      const newIdol = {\r\n        id: idolId,\r\n        type: idolType,\r\n        name: generateIdolName(idolType, selectedPrefixes, selectedSuffixes),\r\n        prefixes: selectedPrefixes,\r\n        suffixes: selectedSuffixes,\r\n      };\r\n\r\n      // Mark included mods as used\r\n      selectedPrefixes.forEach(prefix => {\r\n        modifierUsage[prefix.id]++;\r\n      });\r\n\r\n      selectedSuffixes.forEach(suffix => {\r\n        modifierUsage[suffix.id]++;\r\n      });\r\n\r\n      typeCounts[idolType] = (typeCounts[idolType] || 0) + 1; // Update typeCounts\r\n      idols.push(newIdol);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  // Create as many idols as needed\r\n  while (uniqueModifiers.some(mod => modifierUsage[mod.id] < mod.count)) {\r\n    if (!tryCreateFullIdol()) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  return idols;\r\n};\r\n\r\n/**\r\n * Generate idols and place them on the grid\r\n * @param {Array} desiredModifiers - List of modifiers to include\r\n * @param {Object} modData - Available modifiers data by idol type\r\n * @param {Array} idolTypes - List of available idol types\r\n * @param {Array} currentGrid - Current grid layout\r\n * @returns {Object} - Generated idols and grid state\r\n */\r\nexport const generateAndPlaceIdols = (\r\n  desiredModifiers,\r\n  modData,\r\n  idolTypes,\r\n  currentGrid\r\n) => {\r\n  if (!desiredModifiers?.length || !modData || !idolTypes?.length) {\r\n    return { idols: [], placedIdols: [], grid: currentGrid || [] };\r\n  }\r\n\r\n  // Expand modifiers to account for counts\r\n  const expandedModifiers = desiredModifiers.flatMap(mod => {\r\n    const count = mod.count || 1;\r\n    const { count: _, ...modWithoutCount } = mod;\r\n    return Array(count).fill(modWithoutCount);\r\n  });\r\n\r\n  const generatedIdols = generateIdols(expandedModifiers, modData, idolTypes);\r\n\r\n  return {\r\n    idols: generatedIdols,\r\n    placedIdols: [],\r\n    grid: currentGrid,\r\n  };\r\n};","// context/AppContext.js\r\nimport React, { createContext, useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { loadIdolData } from '../api/idolDataApi';\r\nimport { saveGridState, saveInventory, loadGridState, loadInventory, getSharedDataFromURL } from '../utils/storage/storageUtils';\r\nimport { optimizeGrid } from '../utils/grid/gridUtils';\r\nimport { generateAndPlaceIdols } from '../utils/idol/idolGenerator';\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = ({ children }) => {\r\n  // Main state\r\n  const [modData, setModData] = useState({ prefixes: {}, suffixes: {} });\r\n  const [idolTypes, setIdolTypes] = useState([]);\r\n  const [inventory, setInventory] = useState([]);\r\n  const [gridState, setGridState] = useState(\r\n    Array(7).fill().map(() => Array(6).fill(null))\r\n  );\r\n\r\n  // UI state\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [activeTab, setActiveTab] = useState(\"builder\");\r\n  const [generationResult, setGenerationResult] = useState(null);\r\n  const [firstVisit, setFirstVisit] = useState(true);\r\n\r\n  // Inventory search state\r\n  const [inventorySearchTerm, setInventorySearchTerm] = useState(\"\");\r\n\r\n  // Load data and check for shared URL\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const data = await loadIdolData();\r\n        setModData(data.mods);\r\n        setIdolTypes(data.types);\r\n\r\n        const sharedData = getSharedDataFromURL(data.mods);\r\n\r\n        if (sharedData) {\r\n          setGridState(sharedData.gridState);\r\n          setInventory(sharedData.inventory);\r\n        } else {\r\n          const savedGrid = loadGridState();\r\n          const savedInventory = loadInventory();\r\n\r\n          if (savedGrid) setGridState(savedGrid);\r\n          if (savedInventory) setInventory(savedInventory);\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Failed to load idol data:\", error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n\r\n    const hasVisited = localStorage.getItem(\"hasVisitedBefore\");\r\n    if (!hasVisited) {\r\n      localStorage.setItem(\"hasVisitedBefore\", \"true\");\r\n      setFirstVisit(true);\r\n    } else {\r\n      setFirstVisit(false);\r\n    }\r\n  }, []);\r\n\r\n  // Add a new idol to inventory\r\n  const handleAddIdol = useCallback((newIdol) => {\r\n    const idolWithId = {\r\n      ...newIdol,\r\n      id: Date.now() + Math.random(),\r\n    };\r\n\r\n    setInventory(prevInventory => {\r\n      const updatedInventory = [...prevInventory, idolWithId];\r\n      saveInventory(updatedInventory);\r\n      return updatedInventory;\r\n    });\r\n  }, []);\r\n\r\n  // Cached function to check if a cell is blocked\r\n  const isBlockedCell = useCallback((row, col) => {\r\n    return (\r\n      (row === 0 && col === 0) ||\r\n      (row === 2 && (col === 1 || col === 4)) ||\r\n      (row === 3 && (col === 1 || col === 2 || col === 3 || col === 4)) ||\r\n      (row === 4 && (col === 1 || col === 4)) ||\r\n      (row === 6 && col === 5)\r\n    );\r\n  }, []);\r\n\r\n  // Removes idol from both inventory and grid\r\n  const handleRemoveIdol = useCallback((id) => {\r\n    let idolOnGrid = null;\r\n    let idolPosition = null;\r\n    let idolType = null;\r\n\r\n    // Find idol on grid\r\n    for (let row = 0; row < gridState.length; row++) {\r\n      for (let col = 0; col < gridState[row].length; col++) {\r\n        const cell = gridState[row][col];\r\n        if (cell && cell.id === id) {\r\n          idolOnGrid = cell;\r\n          idolPosition = cell.position || { row, col };\r\n          idolType = idolTypes.find((type) => type.name === cell.type);\r\n          break;\r\n        }\r\n      }\r\n      if (idolOnGrid) break;\r\n    }\r\n\r\n    // Remove from grid if present\r\n    if (idolOnGrid && idolPosition && idolType) {\r\n      const newGrid = gridState.map((row) => [...row]);\r\n      const { width, height } = idolType;\r\n      for (let r = idolPosition.row; r < idolPosition.row + height; r++) {\r\n        for (let c = idolPosition.col; c < idolPosition.col + width; c++) {\r\n          if (r >= 0 && r < newGrid.length && c >= 0 && c < newGrid[r].length) {\r\n            newGrid[r][c] = null;\r\n          }\r\n        }\r\n      }\r\n\r\n      setGridState(newGrid);\r\n      saveGridState(newGrid);\r\n    }\r\n\r\n    // Remove from inventory\r\n    setInventory(prevInventory => {\r\n      const updatedInventory = prevInventory.filter((idol) => idol.id !== id);\r\n      saveInventory(updatedInventory);\r\n      return updatedInventory;\r\n    });\r\n  }, [gridState, idolTypes]);\r\n\r\n  // Check if an idol can be placed at a position on a given grid\r\n  const canPlaceIdol = useCallback((grid, idol, position) => {\r\n    const { row, col } = position;\r\n    const idolType = idolTypes.find((type) => type.name === idol.type);\r\n    if (!idolType) return false;\r\n\r\n    const { width, height } = idolType;\r\n\r\n    if (row + height > 7 || col + width > 6) return false;\r\n\r\n    for (let r = row; r < row + height; r++) {\r\n      for (let c = col; c < col + width; c++) {\r\n        if (isBlockedCell(r, c)) {\r\n          return false;\r\n        }\r\n        if (grid[r][c] !== null) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }, [idolTypes, isBlockedCell]);\r\n\r\n  // Place an idol on a grid, returning a new grid state\r\n  const placeIdolOnGrid = useCallback((grid, idol, position) => {\r\n    const newGrid = grid.map((row) => [...row]);\r\n    const { row, col } = position;\r\n    const idolType = idolTypes.find((type) => type.name === idol.type);\r\n\r\n    if (!idolType) return newGrid;\r\n\r\n    const { width, height } = idolType;\r\n\r\n    for (let r = row; r < row + height; r++) {\r\n      for (let c = col; c < col + width; c++) {\r\n        if (r < newGrid.length && c < newGrid[r].length) {\r\n          newGrid[r][c] = {\r\n            ...idol,\r\n            position: { row, col },\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return newGrid;\r\n  }, [idolTypes]);\r\n\r\n  // Remove an idol from a grid, returning a new grid state\r\n  const removeIdolFromGrid = useCallback((grid, position) => {\r\n    const { row, col } = position;\r\n    if (!grid[row] || !grid[row][col]) return grid;\r\n\r\n    const idol = grid[row][col];\r\n    const idolType = idolTypes.find((type) => type.name === idol.type);\r\n    if (!idolType) return grid;\r\n\r\n    const { width, height } = idolType;\r\n    const idolPosition = idol.position || { row, col };\r\n    const newGrid = grid.map((row) => [...row]);\r\n\r\n    for (let r = idolPosition.row; r < idolPosition.row + height && r < grid.length; r++) {\r\n      for (let c = idolPosition.col; c < idolPosition.col + width && c < grid[0].length; c++) {\r\n        if (r >= 0 && c >= 0) {\r\n          newGrid[r][c] = null;\r\n        }\r\n      }\r\n    }\r\n    return newGrid;\r\n  }, [idolTypes]);\r\n\r\n  // Place idol on grid\r\n  const handlePlaceIdol = useCallback((idol, position, currentPosition = null) => {\r\n    let gridForCheck = gridState;\r\n\r\n    if (currentPosition) {\r\n      gridForCheck = removeIdolFromGrid(gridState, currentPosition);\r\n    }\r\n\r\n    if (canPlaceIdol(gridForCheck, idol, position)) {\r\n      const newGrid = placeIdolOnGrid(gridForCheck, idol, position);\r\n      setGridState(newGrid);\r\n      saveGridState(newGrid);\r\n\r\n      if (!currentPosition) {\r\n        setInventory(prevInventory => {\r\n          const updatedInventory = prevInventory.map((invIdol) =>\r\n            invIdol.id === idol.id ? { ...invIdol, isPlaced: true } : invIdol\r\n          );\r\n          saveInventory(updatedInventory);\r\n          return updatedInventory;\r\n        });\r\n      }\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }, [gridState, canPlaceIdol, placeIdolOnGrid, removeIdolFromGrid]);\r\n\r\n  // Remove idol from grid\r\n  const handleRemoveFromGrid = useCallback((position) => {\r\n    const { row, col } = position;\r\n    if (!gridState[row] || !gridState[row][col]) return;\r\n\r\n    const idol = gridState[row][col];\r\n    const idolType = idolTypes.find((type) => type.name === idol.type);\r\n\r\n    if (!idolType) return;\r\n\r\n    const { width, height } = idolType;\r\n    const idolPosition = idol.position || { row, col };\r\n\r\n    // Create new grid with idol removed\r\n    const newGrid = gridState.map(row => [...row]);\r\n    for (let r = idolPosition.row; r < idolPosition.row + height && r < newGrid.length; r++) {\r\n      for (let c = idolPosition.col; c < idolPosition.col + width && c < newGrid[r].length; c++) {\r\n        if (r >= 0 && c >= 0) {\r\n          newGrid[r][c] = null;\r\n        }\r\n      }\r\n    }\r\n\r\n    setGridState(newGrid);\r\n    saveGridState(newGrid);\r\n\r\n    // Update inventory to mark idol as not placed\r\n    setInventory(prevInventory => {\r\n      const updatedInventory = prevInventory.map((invIdol) =>\r\n        invIdol.id === idol.id\r\n          ? { ...invIdol, isPlaced: false }\r\n          : invIdol\r\n      );\r\n      saveInventory(updatedInventory);\r\n      return updatedInventory;\r\n    });\r\n  }, [gridState, idolTypes]);\r\n\r\n  // Clear all data\r\n  const handleClearAll = useCallback(() => {\r\n    const emptyGrid = Array(7).fill().map(() => Array(6).fill(null));\r\n    setGridState(emptyGrid);\r\n    saveGridState(emptyGrid);\r\n\r\n    setInventory([]);\r\n    saveInventory([]);\r\n\r\n    setGenerationResult(null);\r\n  }, []);\r\n\r\n  // Clear inventory except unique idols and reset grid\r\n  const handleClearInventoryExceptUniques = useCallback(() => {\r\n    const emptyGrid = Array(7).fill().map(() => Array(6).fill(null));\r\n    setGridState(emptyGrid);\r\n    saveGridState(emptyGrid);\r\n\r\n    setInventory(prevInventory => {\r\n      const uniqueIdols = prevInventory.filter(idol => idol.isUnique);\r\n      saveInventory(uniqueIdols);\r\n      return uniqueIdols;\r\n    });\r\n\r\n    setGenerationResult(null);\r\n  }, []);\r\n\r\n  // Auto-optimize idol placement\r\n  const handleOptimizeGrid = useCallback(() => {\r\n    const optimizationResult = optimizeGrid(inventory, idolTypes, gridState);\r\n\r\n    setGridState(optimizationResult.grid);\r\n    saveGridState(optimizationResult.grid);\r\n\r\n    setInventory(prevInventory => {\r\n      const updatedInventory = prevInventory.map((idol) => {\r\n        let isPlaced = false;\r\n\r\n        // Check if this idol is placed on the grid\r\n        outer: for (let row = 0; row < optimizationResult.grid.length; row++) {\r\n          for (let col = 0; col < optimizationResult.grid[row].length; col++) {\r\n            const cell = optimizationResult.grid[row][col];\r\n            if (cell && cell.id === idol.id) {\r\n              isPlaced = true;\r\n              break outer;\r\n            }\r\n          }\r\n        }\r\n\r\n        return { ...idol, isPlaced };\r\n      });\r\n\r\n      saveInventory(updatedInventory);\r\n      return updatedInventory;\r\n    });\r\n\r\n    return {\r\n      placedCount: optimizationResult.placedCount,\r\n      notPlacedCount: optimizationResult.notPlacedCount,\r\n      notPlacedIdols: optimizationResult.notPlacedIdols,\r\n    };\r\n  }, [inventory, idolTypes, gridState]);\r\n\r\n  // Generate idols from desired modifiers\r\n  const handleGenerateIdols = useCallback((desiredModifiers) => {\r\n    if (!desiredModifiers || desiredModifiers.length === 0) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = generateAndPlaceIdols(\r\n        desiredModifiers,\r\n        modData,\r\n        idolTypes,\r\n        gridState\r\n      );\r\n\r\n      if (!result || !result.idols || result.idols.length === 0) {\r\n        setGenerationResult({\r\n          total: 0,\r\n          placed: 0,\r\n          notPlaced: [],\r\n          modifiersRequested: desiredModifiers.length,\r\n          success: false,\r\n          error: \"Failed to generate idols. Try different modifiers.\",\r\n        });\r\n        return;\r\n      }\r\n\r\n      // Add new idols to inventory\r\n      setInventory(prevInventory => {\r\n        const newInventory = [\r\n          ...prevInventory,\r\n          ...result.idols.map(idol => ({ ...idol, isPlaced: false }))\r\n        ];\r\n\r\n        // Optimize grid with the new inventory\r\n        const optimizationResult = optimizeGrid(newInventory, idolTypes, gridState);\r\n\r\n        // Update grid state\r\n        setGridState(optimizationResult.grid);\r\n        saveGridState(optimizationResult.grid);\r\n\r\n        // Mark placed idols in inventory\r\n        const finalInventory = newInventory.map(idol => {\r\n          let isPlaced = false;\r\n\r\n          // Check if this idol is placed on the grid\r\n          outer: for (let row = 0; row < optimizationResult.grid.length; row++) {\r\n            for (let col = 0; col < optimizationResult.grid[row].length; col++) {\r\n              const cell = optimizationResult.grid[row][col];\r\n              if (cell && cell.id === idol.id) {\r\n                isPlaced = true;\r\n                break outer;\r\n              }\r\n            }\r\n          }\r\n\r\n          return { ...idol, isPlaced };\r\n        });\r\n\r\n        // Set generation result\r\n        setGenerationResult({\r\n          total: result.idols.length,\r\n          placed: optimizationResult.placedCount,\r\n          notPlaced: optimizationResult.notPlacedIdols,\r\n          modifiersRequested: desiredModifiers.length,\r\n          success: result.idols.length > 0,\r\n        });\r\n\r\n        saveInventory(finalInventory);\r\n        return finalInventory;\r\n      });\r\n    } catch (error) {\r\n      console.error(\"Error generating idols:\", error);\r\n      setGenerationResult({\r\n        error: \"An error occurred while generating idols.\",\r\n        success: false\r\n      });\r\n    }\r\n  }, [gridState, idolTypes, modData]);\r\n\r\n  // Handle loading a strategy from URL\r\n  const handleLoadStrategy = useCallback((shareUrl) => {\r\n    if (!shareUrl) return;\r\n\r\n    try {\r\n      const url = new URL(shareUrl);\r\n      const shareParam = url.searchParams.get(\"share\");\r\n\r\n      if (shareParam) {\r\n        const sharedData = getSharedDataFromURL(modData, shareParam);\r\n\r\n        if (sharedData) {\r\n          setGridState(sharedData.gridState);\r\n          saveGridState(sharedData.gridState);\r\n\r\n          setInventory(sharedData.inventory);\r\n          saveInventory(sharedData.inventory);\r\n\r\n          setGenerationResult({\r\n            total: sharedData.inventory.length,\r\n            placed: sharedData.inventory.filter((idol) => idol.isPlaced).length,\r\n            success: true,\r\n            message: \"Strategy loaded successfully!\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error loading strategy:\", error);\r\n      setGenerationResult({\r\n        error: \"Failed to load strategy.\",\r\n        success: false\r\n      });\r\n    }\r\n  }, [modData]);\r\n\r\n  // Memoize filtered inventory for better performance\r\n  const filteredInventory = useMemo(() => {\r\n    return inventory.filter((idol) => {\r\n      if (!inventorySearchTerm) return true;\r\n\r\n      const searchTerm = inventorySearchTerm.toLowerCase();\r\n\r\n      if (\r\n        idol.name.toLowerCase().includes(searchTerm) ||\r\n        idol.type.toLowerCase().includes(searchTerm) ||\r\n        (idol.isUnique && \"unique\".includes(searchTerm))\r\n      ) {\r\n        return true;\r\n      }\r\n\r\n      if (idol.prefixes && idol.prefixes.length > 0) {\r\n        for (const prefix of idol.prefixes) {\r\n          if (\r\n            prefix.Name.toLowerCase().includes(searchTerm) ||\r\n            prefix.Mod.toLowerCase().includes(searchTerm)\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (idol.suffixes && idol.suffixes.length > 0) {\r\n        for (const suffix of idol.suffixes) {\r\n          if (\r\n            suffix.Name.toLowerCase().includes(searchTerm) ||\r\n            suffix.Mod.toLowerCase().includes(searchTerm)\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (idol.isUnique && idol.uniqueModifiers && idol.uniqueModifiers.length > 0) {\r\n        for (const mod of idol.uniqueModifiers) {\r\n          if (mod.Mod.toLowerCase().includes(searchTerm)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n\r\n      return false;\r\n    });\r\n  }, [inventory, inventorySearchTerm]);\r\n\r\n  const contextValue = {\r\n    // State\r\n    modData,\r\n    idolTypes,\r\n    inventory,\r\n    gridState,\r\n    isLoading,\r\n    activeTab,\r\n    generationResult,\r\n    firstVisit,\r\n    inventorySearchTerm,\r\n    filteredInventory, // Memoized filtered inventory\r\n\r\n    // State setters\r\n    setActiveTab,\r\n    setGenerationResult,\r\n    setFirstVisit,\r\n    setInventorySearchTerm,\r\n\r\n    // Action functions\r\n    handleAddIdol,\r\n    handleRemoveIdol,\r\n    canPlaceIdol,\r\n    placeIdolOnGrid,\r\n    removeIdolFromGrid,\r\n    handlePlaceIdol,\r\n    handleRemoveFromGrid,\r\n    handleClearAll,\r\n    handleClearInventoryExceptUniques,\r\n    handleOptimizeGrid,\r\n    handleGenerateIdols,\r\n    handleLoadStrategy,\r\n    isBlockedCell,\r\n  };\r\n\r\n  return (\r\n    <AppContext.Provider value={contextValue}>\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};","// hooks/useGrid.js\r\nimport { useContext, useCallback, useMemo } from 'react';\r\nimport { AppContext } from '../context/AppContext';\r\n\r\nexport const useGrid = () => {\r\n  const {\r\n    gridState,\r\n    idolTypes,\r\n    canPlaceIdol,\r\n    placeIdolOnGrid,\r\n    removeIdolFromGrid,\r\n    handlePlaceIdol,\r\n    handleRemoveFromGrid,\r\n    handleOptimizeGrid,\r\n    isBlockedCell: contextIsBlockedCell,\r\n  } = useContext(AppContext);\r\n\r\n  // Use the memoized isBlockedCell from context if available, otherwise create it\r\n  const isBlockedCell = useCallback((row, col) => {\r\n    if (contextIsBlockedCell) {\r\n      return contextIsBlockedCell(row, col);\r\n    }\r\n\r\n    return (\r\n      (row === 0 && col === 0) ||\r\n      (row === 2 && (col === 1 || col === 4)) ||\r\n      (row === 3 && (col === 1 || col === 2 || col === 3 || col === 4)) ||\r\n      (row === 4 && (col === 1 || col === 4)) ||\r\n      (row === 6 && col === 5)\r\n    );\r\n  }, [contextIsBlockedCell]);\r\n\r\n  // Get dimensions of an idol based on its type\r\n  const getIdolDimensions = useCallback((idol) => {\r\n    if (!idol || !idol.type) return { width: 1, height: 1 };\r\n\r\n    const idolType = idolTypes.find((type) => type.name === idol.type);\r\n    return idolType ? { width: idolType.width, height: idolType.height } : { width: 1, height: 1 };\r\n  }, [idolTypes]);\r\n\r\n  // Validates if an idol can be placed at a given position\r\n  const validatePlacement = useCallback((grid, idol, row, col) => {\r\n    const idolType = idolTypes.find((type) => type.name === idol.type);\r\n\r\n    if (!idolType) {\r\n      return { valid: false, reason: \"unknown_type\" };\r\n    }\r\n\r\n    const { width, height } = idolType;\r\n\r\n    if (row + height > 7 || col + width > 6) {\r\n      return { valid: false, reason: \"size_too_large\" };\r\n    }\r\n\r\n    for (let r = row; r < row + height; r++) {\r\n      for (let c = col; c < col + width; c++) {\r\n        if (isBlockedCell(r, c)) {\r\n          return { valid: false, reason: \"blocked_cells\" };\r\n        }\r\n\r\n        if (grid[r]?.[c] !== null) {\r\n          return { valid: false, reason: \"overlapping\" };\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: true };\r\n  }, [idolTypes, isBlockedCell]);\r\n\r\n  // Calculate grid statistics (using useMemo for performance)\r\n  const gridStats = useMemo(() => {\r\n    let filledCellCount = 0;\r\n    let totalIdols = 0;\r\n    const idolTypeCount = {};\r\n\r\n    // Track processed cells to avoid counting the same idol multiple times\r\n    const processedCells = new Set();\r\n\r\n    for (let row = 0; row < gridState.length; row++) {\r\n      for (let col = 0; col < gridState[row].length; col++) {\r\n        const cell = gridState[row][col];\r\n\r\n        if (cell !== null && !isBlockedCell(row, col)) {\r\n          filledCellCount++;\r\n\r\n          // Track idol types and count them only once per idol\r\n          const position = cell.position || { row, col };\r\n          const cellKey = `${position.row}-${position.col}`;\r\n\r\n          if (!processedCells.has(cellKey)) {\r\n            processedCells.add(cellKey);\r\n            totalIdols++;\r\n\r\n            const type = cell.type;\r\n            idolTypeCount[type] = (idolTypeCount[type] || 0) + 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      filledCellCount,\r\n      totalIdols,\r\n      idolTypeCount\r\n    };\r\n  }, [gridState, isBlockedCell]);\r\n\r\n  return {\r\n    gridState,\r\n    isBlockedCell,\r\n    getIdolDimensions,\r\n    validatePlacement,\r\n    canPlaceIdol,\r\n    placeIdolOnGrid,\r\n    removeIdolFromGrid,\r\n    handlePlaceIdol,\r\n    handleRemoveFromGrid,\r\n    handleOptimizeGrid,\r\n    gridStats\r\n  };\r\n};","// components/grid/GridCell.jsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport { useDrop, useDrag } from \"react-dnd\";\r\nimport { useGrid } from \"../../hooks/useGrid\";\r\n\r\n// Idol type to CSS color mapping\r\nconst IDOL_COLOR_MAP = {\r\n  Minor: {\r\n    primary: \"bg-blue-900/40\",\r\n    secondary: \"bg-blue-900/40\",\r\n  },\r\n  Kamasan: {\r\n    primary: \"bg-green-900/40\",\r\n    secondary: \"bg-green-900/40\",\r\n  },\r\n  Totemic: {\r\n    primary: \"bg-yellow-900/40\",\r\n    secondary: \"bg-yellow-900/40\",\r\n  },\r\n  Noble: {\r\n    primary: \"bg-purple-900/40\",\r\n    secondary: \"bg-purple-900/40\",\r\n  },\r\n  Conqueror: {\r\n    primary: \"bg-red-900/40\",\r\n    secondary: \"bg-red-900/40\",\r\n  },\r\n  Burial: {\r\n    primary: \"bg-orange-700/40\",\r\n    secondary: \"bg-orange-700/40\",\r\n  },\r\n  // Special case for unique idols\r\n  unique: {\r\n    primary: \"bg-pink-600/40\",\r\n    secondary: \"bg-pink-600/40\",\r\n  },\r\n  // Default fallback\r\n  default: {\r\n    primary: \"bg-slate-700\",\r\n    secondary: \"bg-slate-700\",\r\n  }\r\n};\r\n\r\nconst GridCell = ({\r\n  row,\r\n  col,\r\n  cell,\r\n  isPrimary,\r\n  isBlocked,\r\n  onPlaceIdol,\r\n  onRemoveFromGrid,\r\n  idolTypes,\r\n  gridState,\r\n  isValidPlacement,\r\n  currentDrag\r\n}) => {\r\n  const [previewStatus, setPreviewStatus] = useState(null);\r\n  const { isBlockedCell } = useGrid();\r\n\r\n  // Check if position is occupied by an idol other than the currently dragged one\r\n  const isOccupiedByOtherIdol = useCallback((r, c, dragItem) => {\r\n    if (!gridState[r] || !gridState[r][c]) return false;\r\n    \r\n    if (dragItem?.sourceType === \"GRID\" && dragItem?.sourcePosition) {\r\n      const { row: sourceRow, col: sourceCol } = dragItem.sourcePosition;\r\n      const draggedIdol = gridState[sourceRow]?.[sourceCol];\r\n      \r\n      if (!draggedIdol) return true;\r\n      \r\n      const idolType = idolTypes.find((type) => type.name === draggedIdol.type);\r\n      if (!idolType) return true;\r\n      \r\n      const { width, height } = idolType;\r\n      \r\n      // Check if this cell is within the currently dragged idol's area\r\n      const isWithinDraggedIdol = \r\n        r >= sourceRow && r < sourceRow + height &&\r\n        c >= sourceCol && c < sourceCol + width;\r\n        \r\n      if (isWithinDraggedIdol) return false;\r\n    }\r\n    \r\n    return true;\r\n  }, [gridState, idolTypes]);\r\n\r\n  // Process hover status during drag\r\n  const processHover = useCallback((item) => {\r\n    if (isBlocked || cell) {\r\n      setPreviewStatus(\"invalid\");\r\n      return;\r\n    }\r\n\r\n    if (item.idol && idolTypes) {\r\n      const idolType = idolTypes.find((type) => type.name === item.idol.type);\r\n      if (!idolType) {\r\n        setPreviewStatus(\"invalid\");\r\n        return;\r\n      }\r\n\r\n      const { width, height } = idolType;\r\n      \r\n      // Check boundaries\r\n      if (row + height > 7 || col + width > 6) {\r\n        setPreviewStatus(\"invalid\");\r\n        return;\r\n      }\r\n      \r\n      // Check for blocked cells or other idols\r\n      for (let r = row; r < row + height; r++) {\r\n        for (let c = col; c < col + width; c++) {\r\n          if (isBlockedCell(r, c)) {\r\n            setPreviewStatus(\"invalid\");\r\n            return;\r\n          }\r\n          if (gridState[r] && gridState[r][c] && isOccupiedByOtherIdol(r, c, item)) {\r\n            setPreviewStatus(\"invalid\");\r\n            return;\r\n          }\r\n        }\r\n      }\r\n      \r\n      setPreviewStatus(\"valid\");\r\n    }\r\n  }, [cell, isBlocked, row, col, idolTypes, gridState, isBlockedCell, isOccupiedByOtherIdol]);\r\n\r\n  // Drop target configuration\r\n  const [{ isOver, canDrop }, drop] = useDrop({\r\n    accept: \"IDOL\",\r\n    hover: processHover,\r\n    drop: (item) => {\r\n      if (isBlocked || cell) return { success: false };\r\n  \r\n      let success;\r\n      if (item.sourceType === \"GRID\" && item.sourcePosition) {\r\n        success = onPlaceIdol(item.idol, { row, col }, item.sourcePosition);\r\n      } else {\r\n        success = onPlaceIdol(item.idol, { row, col });\r\n      }\r\n      \r\n      setPreviewStatus(null);\r\n      \r\n      return { success };\r\n    },\r\n    canDrop: () => !isBlocked && !cell,\r\n    collect: (monitor) => ({\r\n      isOver: !!monitor.isOver(),\r\n      canDrop: !!monitor.canDrop(),\r\n    }),\r\n  });\r\n\r\n  // Clear preview status when not hovering\r\n  useEffect(() => {\r\n    if (!isOver) {\r\n      setPreviewStatus(null);\r\n    }\r\n  }, [isOver]);\r\n\r\n  // Drag source configuration\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: \"IDOL\",\r\n    item: () => {\r\n      if (cell && isPrimary) {\r\n        return { \r\n          type: \"IDOL\", \r\n          idol: cell,\r\n          sourceType: \"GRID\",\r\n          sourcePosition: { row, col }\r\n        };\r\n      }\r\n      return null;\r\n    },\r\n    canDrag: () => cell && isPrimary,\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n    end: () => {\r\n      setPreviewStatus(null);\r\n    },\r\n  });\r\n\r\n  // Handle right-click to remove idol\r\n  const handleRightClick = (e) => {\r\n    e.preventDefault();\r\n    if (cell) {\r\n      onRemoveFromGrid({ row, col });\r\n    }\r\n  };\r\n\r\n  // Calculate cell styling based on state\r\n  const cellClassNames = useMemo(() => {\r\n    let classNames = \"w-14 h-14 flex items-center justify-center \";\r\n\r\n    // Blocked cells\r\n    if (isBlocked) {\r\n      return classNames + \"bg-slate-950 border-slate-900 opacity-60\";\r\n    }\r\n\r\n    // Cells with idols\r\n    if (cell) {\r\n      // Get color based on idol type or unique status\r\n      const colors = cell.isUnique \r\n        ? IDOL_COLOR_MAP.unique \r\n        : (IDOL_COLOR_MAP[cell.type] || IDOL_COLOR_MAP.default);\r\n\r\n      if (isPrimary) {\r\n        classNames += isDragging \r\n          ? `opacity-50 ${colors.primary}` \r\n          : (isOver ? \"bg-red-700\" : colors.primary);\r\n      } else {\r\n        classNames += colors.secondary;\r\n      }\r\n      \r\n      // Add border styling based on idol position\r\n      if (cell.position) {\r\n        const { width, height } = idolTypes.find(type => type.name === cell.type) || { width: 1, height: 1 };\r\n        const { row: posRow, col: posCol } = cell.position;\r\n        \r\n        // Calculate borders\r\n        const isTopEdge = row === posRow;\r\n        const isLeftEdge = col === posCol;\r\n        const isRightEdge = col === posCol + width - 1;\r\n        const isBottomEdge = row === posRow + height - 1;\r\n        \r\n        // Apply edge borders\r\n        if (isTopEdge) classNames += \" border-t border-t-white/40\";\r\n        if (isLeftEdge) classNames += \" border-l border-l-white/40\";\r\n        if (isRightEdge) classNames += \" border-r border-r-white/40\";\r\n        if (isBottomEdge) classNames += \" border-b border-b-white/40\";\r\n        \r\n        // Apply inner borders\r\n        if (!isRightEdge && col < posCol + width - 1) {\r\n          classNames += \" border-r border-r-black/35\";\r\n        }\r\n        \r\n        if (!isBottomEdge && row < posRow + height - 1) {\r\n          classNames += \" border-b border-b-black/35\";\r\n        }\r\n      }\r\n      \r\n      return classNames;\r\n    }\r\n    \r\n    // Empty cells - style for dropping\r\n    if (previewStatus === \"valid\") {\r\n      classNames += \"bg-green-600/70 border border-green-500\";\r\n    } else if (previewStatus === \"invalid\") {\r\n      classNames += \"bg-red-600/70 border border-red-500\";\r\n    } else if (isOver) {\r\n      classNames += canDrop\r\n        ? \"bg-green-600/70 border border-green-500\"\r\n        : \"bg-red-600/70 border border-red-500\";\r\n    } else if (isValidPlacement) {\r\n      classNames += \"bg-green-700/30 border border-green-600/50\";\r\n    } else {\r\n      classNames += \"bg-slate-800 border border-slate-700 hover:bg-slate-750\";\r\n    }\r\n    \r\n    return classNames;\r\n  }, [\r\n    cell, \r\n    isPrimary, \r\n    isBlocked, \r\n    isDragging, \r\n    isOver, \r\n    canDrop, \r\n    previewStatus, \r\n    isValidPlacement,\r\n    row,\r\n    col, \r\n    idolTypes\r\n  ]);\r\n\r\n  // Combine drag and drop refs\r\n  const combinedRef = (node) => {\r\n    if (cell && isPrimary) {\r\n      drag(node);\r\n    } else if (!isBlocked) {\r\n      drop(node);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      ref={combinedRef}\r\n      className={cellClassNames}\r\n      onContextMenu={handleRightClick}\r\n      title={cell && isPrimary ? `${cell.name} (Right-click to remove)` : \"\"}\r\n      style={{ transition: \"none\" }}\r\n    >\r\n      {isPrimary && cell && (\r\n        <div className=\"text-base font-bold text-white\">\r\n          {cell.isUnique ? \"U\" : cell.type.charAt(0)}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(GridCell);","// components/grid/Grid.jsx\r\nimport React, { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport GridCell from \"./GridCell\";\r\nimport { useGrid } from \"../../hooks/useGrid\";\r\n\r\nconst GRID_PATTERN_STYLE = {\r\n  backgroundSize: '56px 56px',\r\n  backgroundImage: `\r\n    linear-gradient(to right, rgba(255, 255, 255, 0.03) 1px, transparent 1px),\r\n    linear-gradient(to bottom, rgba(255, 255, 255, 0.03) 1px, transparent 1px)\r\n  `,\r\n  backgroundPosition: '0 0'\r\n};\r\n\r\nfunction Grid({ gridState, onPlaceIdol, onRemoveFromGrid, idolTypes }) {\r\n  const [currentDrag, setCurrentDrag] = useState(null);\r\n  const { isBlockedCell } = useGrid();\r\n\r\n  // Memoize drag event handlers\r\n  const handleDragStart = useCallback((e) => {\r\n    if (e.dataTransfer?.types.includes('application/json')) {\r\n      try {\r\n        const data = JSON.parse(e.dataTransfer.getData('application/json'));\r\n        if (data.type === 'IDOL') {\r\n          setCurrentDrag(data.idol);\r\n        }\r\n      } catch (err) {\r\n        // Silently ignore parse errors\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const handleDragEnd = useCallback(() => {\r\n    setCurrentDrag(null);\r\n  }, []);\r\n\r\n  // Effect for drag event listeners\r\n  useEffect(() => {\r\n    window.addEventListener('dragstart', handleDragStart);\r\n    window.addEventListener('dragend', handleDragEnd);\r\n\r\n    return () => {\r\n      window.removeEventListener('dragstart', handleDragStart);\r\n      window.removeEventListener('dragend', handleDragEnd);\r\n    };\r\n  }, [handleDragStart, handleDragEnd]);\r\n\r\n  // Memoize canPlaceIdol function\r\n  const canPlaceIdol = useCallback((idol, position) => {\r\n    if (!idol || !position) return false;\r\n\r\n    const { row, col } = position;\r\n    const idolType = idolTypes.find((type) => type.name === idol.type);\r\n    if (!idolType) return false;\r\n\r\n    const { width, height } = idolType;\r\n\r\n    // Check grid boundaries\r\n    if (row + height > 7 || col + width > 6) return false;\r\n\r\n    // Check for blocked cells or existing idols\r\n    for (let r = row; r < row + height; r++) {\r\n      for (let c = col; c < col + width; c++) {\r\n        if (isBlockedCell(r, c) || gridState[r][c] !== null) return false;\r\n      }\r\n    }\r\n    return true;\r\n  }, [gridState, idolTypes, isBlockedCell]);\r\n\r\n  // Memoize valid cells calculation\r\n  const validCells = useMemo(() => {\r\n    if (!currentDrag) return [];\r\n\r\n    const validPositions = [];\r\n    \r\n    for (let row = 0; row < gridState.length; row++) {\r\n      for (let col = 0; col < gridState[row].length; col++) {\r\n        if (canPlaceIdol(currentDrag, { row, col })) {\r\n          validPositions.push({ row, col });\r\n        }\r\n      }\r\n    }\r\n\r\n    return validPositions;\r\n  }, [currentDrag, gridState, canPlaceIdol]);\r\n\r\n  // Memoize grid rendering\r\n  const renderGrid = useCallback(() => {\r\n    return gridState.map((row, rowIndex) => (\r\n      <div key={`row-${rowIndex}`} className=\"flex\">\r\n        {row.map((cell, colIndex) => {\r\n          const isPrimary =\r\n            cell &&\r\n            (!cell.position ||\r\n              (cell.position.row === rowIndex &&\r\n                cell.position.col === colIndex));\r\n\r\n          const isValidPlacement = validCells.some(\r\n            validCell => validCell.row === rowIndex && validCell.col === colIndex\r\n          );\r\n\r\n          return (\r\n            <GridCell\r\n              key={`cell-${rowIndex}-${colIndex}`}\r\n              row={rowIndex}\r\n              col={colIndex}\r\n              cell={cell}\r\n              isPrimary={isPrimary}\r\n              isBlocked={isBlockedCell(rowIndex, colIndex)}\r\n              onPlaceIdol={onPlaceIdol}\r\n              onRemoveFromGrid={onRemoveFromGrid}\r\n              idolTypes={idolTypes}\r\n              gridState={gridState}\r\n              isValidPlacement={isValidPlacement && currentDrag !== null}\r\n              currentDrag={currentDrag}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    ));\r\n  }, [\r\n    gridState, \r\n    validCells, \r\n    currentDrag, \r\n    onPlaceIdol, \r\n    onRemoveFromGrid, \r\n    idolTypes, \r\n    isBlockedCell\r\n  ]);\r\n\r\n  return (\r\n    <div \r\n      className=\"grid-container border-2 border-indigo-600 rounded-xl p-1 bg-slate-950 inline-block shadow-sm mx-auto scale-95 minimal-scrollbar\"\r\n      style={GRID_PATTERN_STYLE}\r\n    >\r\n      {renderGrid()}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(Grid);","// components/common/Button.jsx\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst VARIANT_STYLES = {\r\n  primary: \"bg-indigo-600 hover:bg-indigo-500 text-white\",\r\n  secondary: \"bg-slate-800 hover:bg-slate-700 text-white\",\r\n  danger: \"bg-red-600 hover:bg-red-500 text-white\",\r\n  amber: \"bg-amber-600 hover:bg-amber-500 text-white\",\r\n  blue: \"bg-blue-600 hover:bg-blue-500 text-white\",\r\n};\r\n\r\nconst SIZE_STYLES = {\r\n  sm: \"py-1.5 px-3 text-xs\",\r\n  md: \"py-2 px-4 text-sm\",\r\n  lg: \"py-2.5 px-5 text-base\",\r\n};\r\n\r\nconst Button = ({\r\n  children,\r\n  variant = \"primary\",\r\n  size = \"md\",\r\n  className = \"\",\r\n  disabled = false,\r\n  onClick,\r\n  title,\r\n  type = \"button\",\r\n  ...props\r\n}) => {\r\n  const baseStyles = \"rounded-lg font-medium transition-colors flex items-center justify-center\";\r\n  const variantStyle = VARIANT_STYLES[variant] || VARIANT_STYLES.primary;\r\n  const sizeStyle = SIZE_STYLES[size] || SIZE_STYLES.md;\r\n  const disabledStyle = disabled ? \"opacity-60 cursor-not-allowed\" : \"\";\r\n  \r\n  const combinedStyles = `${baseStyles} ${variantStyle} ${sizeStyle} ${disabledStyle} ${className}`;\r\n\r\n  return (\r\n    <button\r\n      type={type}\r\n      className={combinedStyles}\r\n      disabled={disabled}\r\n      onClick={onClick}\r\n      title={title}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nButton.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  variant: PropTypes.oneOf(Object.keys(VARIANT_STYLES)),\r\n  size: PropTypes.oneOf(Object.keys(SIZE_STYLES)),\r\n  className: PropTypes.string,\r\n  disabled: PropTypes.bool,\r\n  onClick: PropTypes.func,\r\n  title: PropTypes.string,\r\n  type: PropTypes.oneOf([\"button\", \"submit\", \"reset\"]),\r\n};\r\n\r\nexport default React.memo(Button);","// components/grid/OptimizeButton.jsx\r\nimport React, { useState, useCallback, useMemo } from \"react\";\r\nimport Button from \"../common/Button\";\r\n\r\nconst REASON_MAP = {\r\n  \"no_space\": \"No suitable space\",\r\n  \"size_too_large\": \"Too large for remaining space\",\r\n  \"overlapping\": \"Would overlap other idols\",\r\n  \"blocked_cells\": \"Would cover blocked cells\"\r\n};\r\n\r\nfunction OptimizeButton({ onOptimize }) {\r\n  const [isOptimizing, setIsOptimizing] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [results, setResults] = useState({\r\n    placedCount: 0,\r\n    notPlacedCount: 0,\r\n    notPlacedIdols: [],\r\n  });\r\n\r\n  const handleOptimize = useCallback(() => {\r\n    setIsOptimizing(true);\r\n\r\n    setTimeout(() => {\r\n      const optimizationResults = onOptimize();\r\n      setResults(optimizationResults);\r\n      setShowResults(true);\r\n      setIsOptimizing(false);\r\n    }, 500);\r\n  }, [onOptimize]);\r\n\r\n  const handleCloseResults = useCallback(() => {\r\n    setShowResults(false);\r\n  }, []);\r\n\r\n  const getReasonText = useCallback((reason) => {\r\n    return REASON_MAP[reason] || \"Could not fit in grid\";\r\n  }, []);\r\n\r\n  const resultsSummary = useMemo(() => {\r\n    if (!showResults) return null;\r\n\r\n    return (\r\n      <div className=\"absolute right-0 mt-2 p-4 bg-slate-800 border border-slate-700 rounded-lg shadow-lg z-10 w-72\">\r\n        <div className=\"flex justify-between items-center mb-3\">\r\n          <h3 className=\"font-medium text-white\">Results</h3>\r\n          <button\r\n            onClick={handleCloseResults}\r\n            className=\"text-slate-400 hover:text-slate-200 transition-colors\"\r\n            aria-label=\"Close results\"\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"text-sm space-y-3\">\r\n          <div className=\"text-green-400 font-medium\">\r\n            {results.placedCount} idols placed\r\n          </div>\r\n\r\n          {results.notPlacedCount > 0 && (\r\n            <div className=\"bg-slate-850 p-3 rounded-lg border border-slate-700\">\r\n              <div className=\"text-yellow-400 font-medium mb-2\">\r\n                {results.notPlacedCount} couldn't be placed:\r\n              </div>\r\n              <ul className=\"space-y-1 ml-4 list-disc text-xs text-slate-300\">\r\n                {results.notPlacedIdols.map((idol, index) => (\r\n                  <li key={idol.id || `unplaced-${index}`}>\r\n                    {idol.name} - {getReasonText(idol.reason)}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }, [showResults, results, handleCloseResults, getReasonText]);\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Button\r\n        variant=\"primary\"\r\n        onClick={handleOptimize}\r\n        disabled={isOptimizing}\r\n        title=\"Automatically arrange inventory idols on the grid\"\r\n        className=\"flex items-center gap-2\"\r\n      >\r\n        <OptimizeIcon />\r\n        {isOptimizing ? \"Optimizing...\" : \"Smart Fill Grid\"}\r\n      </Button>\r\n\r\n      {resultsSummary}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Extracted SVG icon component\r\nconst OptimizeIcon = React.memo(() => (\r\n  <svg \r\n    xmlns=\"http://www.w3.org/2000/svg\" \r\n    className=\"h-4 w-4\" \r\n    fill=\"none\" \r\n    viewBox=\"0 0 24 24\" \r\n    stroke=\"currentColor\"\r\n    aria-hidden=\"true\"\r\n  >\r\n    <path \r\n      strokeLinecap=\"round\" \r\n      strokeLinejoin=\"round\" \r\n      strokeWidth={2} \r\n      d=\"M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z\" \r\n    />\r\n  </svg>\r\n));\r\n\r\nOptimizeIcon.displayName = 'OptimizeIcon';\r\n\r\nexport default React.memo(OptimizeButton);","// utils/trade/tradeUtils.js\r\n\r\n/**\r\n * Extract numeric values from modifier text for trade filtering\r\n * @param {string} modText - The modifier text to parse\r\n * @returns {number|null} - Extracted numeric value or null if not found\r\n */\r\nconst extractNumericValue = (modText) => {\r\n  if (!modText) return null;\r\n\r\n  const normalizedText = modText.toLowerCase().trim();\r\n\r\n  // Check for \"contain X additional\" pattern\r\n  const containPattern = /^(your maps contain|[a-z\\s]+ in your maps contain)\\s+(\\d+)\\s+additional\\s+[a-z\\s]+$/i;\r\n  if (containPattern.test(normalizedText)) {\r\n    const numericMatch = normalizedText.match(/contain\\s+(\\d+)\\s+additional/i);\r\n    if (numericMatch && numericMatch[1]) {\r\n      return parseInt(numericMatch[1], 10);\r\n    }\r\n  }\r\n\r\n  // Check for \"an additional\" pattern (value = 1)\r\n  if (/^your maps contain\\s+an\\s+additional\\s+[a-z\\s]+$/i.test(normalizedText)) {\r\n    return 1;\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\n/**\r\n * Generate a trade URL for a single idol\r\n * @param {Object} idol - The idol object to generate a trade URL for\r\n * @returns {string} - The generated trade URL\r\n */\r\nexport const generateTradeUrl = (idol) => {\r\n  if (!idol) return \"\";\r\n\r\n  // Handle unique idols\r\n  if (idol.isUnique) {\r\n    const query = {\r\n      query: {\r\n        name: idol.uniqueName || idol.name,\r\n        type: `${idol.type} Idol`,\r\n        stats: [{ type: \"and\", filters: [] }],\r\n        status: { option: \"online\" },\r\n      },\r\n    };\r\n    const encodedQuery = encodeURIComponent(JSON.stringify(query));\r\n    return `https://www.pathofexile.com/trade/search/Phrecia?q=${encodedQuery}`;\r\n  }\r\n\r\n  // Build filters for prefixes and suffixes\r\n  const filters = [];\r\n\r\n  // Process prefixes\r\n  if (idol.prefixes?.length > 0) {\r\n    idol.prefixes.forEach(prefix => {\r\n      if (!prefix.trade) return;\r\n\r\n      const numericValue = extractNumericValue(prefix.Mod);\r\n      if (numericValue !== null) {\r\n        filters.push({\r\n          id: prefix.trade,\r\n          value: { min: numericValue, max: numericValue },\r\n          disabled: false\r\n        });\r\n      } else {\r\n        filters.push({ id: prefix.trade });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Process suffixes\r\n  if (idol.suffixes?.length > 0) {\r\n    idol.suffixes.forEach(suffix => {\r\n      if (!suffix.trade) return;\r\n\r\n      const numericValue = extractNumericValue(suffix.Mod);\r\n      if (numericValue !== null) {\r\n        filters.push({\r\n          id: suffix.trade,\r\n          value: { min: numericValue, max: numericValue },\r\n          disabled: false\r\n        });\r\n      } else {\r\n        filters.push({ id: suffix.trade });\r\n      }\r\n    });\r\n  }\r\n\r\n  if (filters.length === 0) return \"\";\r\n\r\n  // Build and encode the query\r\n  const query = {\r\n    query: {\r\n      type: `${idol.type} Idol`,\r\n      stats: [{ type: \"and\", filters: filters }],\r\n      status: { option: \"online\" }\r\n    }\r\n  };\r\n\r\n  const encodedQuery = encodeURIComponent(JSON.stringify(query));\r\n  return `https://www.pathofexile.com/trade/search/Phrecia?q=${encodedQuery}`;\r\n};\r\n\r\n/**\r\n * Generate a trade URL for multiple modifiers\r\n * @param {string} idolType - The idol type\r\n * @param {Array} prefixes - List of prefix modifiers\r\n * @param {Array} suffixes - List of suffix modifiers\r\n * @returns {string} - The generated trade URL\r\n */\r\nexport const generateTradeUrlWithMultipleModifiers = (idolType, prefixes, suffixes) => {\r\n  if (!idolType || (!prefixes?.length && !suffixes?.length)) return \"\";\r\n\r\n  const prefixFilters = [];\r\n  const suffixFilters = [];\r\n\r\n  // Process prefixes with trade data\r\n  if (prefixes?.length > 0) {\r\n    prefixes.forEach(prefix => {\r\n      if (prefix.trade) {\r\n        prefixFilters.push({ id: prefix.trade });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Process suffixes with trade data\r\n  if (suffixes?.length > 0) {\r\n    suffixes.forEach(suffix => {\r\n      if (suffix.trade) {\r\n        suffixFilters.push({ id: suffix.trade });\r\n      }\r\n    });\r\n  }\r\n\r\n  if (prefixFilters.length === 0 && suffixFilters.length === 0) return \"\";\r\n\r\n  // Initialize stats array with empty base filter\r\n  const stats = [\r\n    {\r\n      type: \"and\",\r\n      filters: [],\r\n      disabled: false\r\n    }\r\n  ];\r\n\r\n  // Add prefix count group if we have prefixes\r\n  if (prefixFilters.length > 0) {\r\n    stats.push({\r\n      type: \"count\",\r\n      value: {\r\n        min: 1\r\n      },\r\n      filters: prefixFilters\r\n    });\r\n  }\r\n\r\n  // Add suffix count group if we have suffixes\r\n  if (suffixFilters.length > 0) {\r\n    stats.push({\r\n      type: \"count\",\r\n      value: {\r\n        min: 1\r\n      },\r\n      filters: suffixFilters\r\n    });\r\n  }\r\n\r\n  // Build and encode the query\r\n  const query = {\r\n    query: {\r\n      type: `${idolType} Idol`,\r\n      stats: stats,\r\n      status: {\r\n        option: \"online\"\r\n      },\r\n      filters: {\r\n        type_filters: {\r\n          filters: {\r\n            category: {\r\n              option: \"idol\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const encodedQuery = encodeURIComponent(JSON.stringify(query));\r\n  return `https://www.pathofexile.com/trade/search/Phrecia?q=${encodedQuery}`;\r\n};\r\n\r\n/**\r\n * Check if an idol has valid trade data\r\n * @param {Object} idol - The idol to check\r\n * @returns {boolean} - True if the idol has valid trade data\r\n */\r\nexport const hasValidTradeData = (idol) => {\r\n  if (!idol) return false;\r\n\r\n  // Unique idols always have valid trade data\r\n  if (idol.isUnique) return true;\r\n\r\n  // Check for valid prefix trade data\r\n  const hasValidPrefix = idol.prefixes?.length > 0 &&\r\n    idol.prefixes.some((prefix) => !!prefix.trade);\r\n\r\n  // Check for valid suffix trade data\r\n  const hasValidSuffix = idol.suffixes?.length > 0 &&\r\n    idol.suffixes.some((suffix) => !!suffix.trade);\r\n\r\n  return hasValidPrefix || hasValidSuffix;\r\n};","// components/inventory/IdolInventory.jsx\r\nimport React, { useState, memo, useCallback } from \"react\";\r\nimport { useDrag } from \"react-dnd\";\r\nimport { generateTradeUrl, hasValidTradeData } from \"../../utils/trade/tradeUtils\";\r\n\r\n// Individual idol item component - memoized for performance\r\nconst IdolItem = memo(({ idol, onRemoveIdol, compactView }) => {\r\n  const [{ isDragging }, drag] = useDrag({\r\n    type: \"IDOL\",\r\n    item: { type: \"IDOL\", idol },\r\n    collect: (monitor) => ({\r\n      isDragging: !!monitor.isDragging(),\r\n    }),\r\n    end: (_, monitor) => {\r\n      const dropResult = monitor.getDropResult();\r\n      if (dropResult && !dropResult.success) {\r\n        // Idol remains in inventory if drop failed\r\n      }\r\n    },\r\n  });\r\n\r\n  // Convert event handlers to useCallback for stability\r\n  const handleRightClick = useCallback((e) => {\r\n    e.preventDefault();\r\n    onRemoveIdol(idol.id);\r\n  }, [idol.id, onRemoveIdol]);\r\n\r\n  const handleTradeClick = useCallback((e) => {\r\n    e.stopPropagation();\r\n    const tradeUrl = generateTradeUrl(idol);\r\n    if (tradeUrl) {\r\n      window.open(tradeUrl, \"_blank\");\r\n    }\r\n  }, [idol]);\r\n\r\n  // Move style constants outside of render for optimization\r\n  const typeColors = {\r\n    Minor: \"from-blue-800/30 to-blue-900/40\",\r\n    Kamasan: \"from-green-800/30 to-green-900/40\",\r\n    Totemic: \"from-yellow-800/30 to-yellow-900/40\",\r\n    Noble: \"from-purple-800/30 to-purple-900/40\",\r\n    Conqueror: \"from-red-800/30 to-red-900/40\",\r\n    Burial: \"from-orange-600/30 to-orange-700/40\",\r\n  };\r\n\r\n  const bgGradient = idol.isUnique\r\n    ? \"bg-gradient-to-r from-pink-700/30 to-pink-800/40\"\r\n    : `bg-gradient-to-r ${\r\n        typeColors[idol.type] || \"from-slate-800/30 to-slate-900/40\"\r\n      }`;\r\n\r\n  const opacity = isDragging ? \"opacity-50\" : \"\";\r\n  const canTrade = hasValidTradeData(idol);\r\n  const placedStyles = idol.isPlaced\r\n    ? \"border-2 border-white\"\r\n    : \"border border-slate-700 border-opacity-75\";\r\n\r\n  // Conditional rendering for performance optimization\r\n  if (compactView) {\r\n    return (\r\n      <div\r\n        ref={drag}\r\n        className={`${bgGradient} p-3 rounded-lg shadow-sm mb-2 cursor-move ${opacity} ${placedStyles} transition-all hover:shadow-md flex justify-between items-center`}\r\n        onContextMenu={handleRightClick}\r\n        title=\"Drag to place on grid or right-click to remove\"\r\n      >\r\n        <div className=\"flex-grow mr-2\">\r\n          <h3 className=\"font-extrabold text-base text-white truncate\">\r\n            {idol.name}\r\n          </h3>\r\n          <p className=\"text-xs text-slate-400\">{idol.type} Idol</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-1\">\r\n          {canTrade && (\r\n            <button\r\n              onClick={handleTradeClick}\r\n              className=\"bg-indigo-600 hover:bg-indigo-500 border border-indigo-500 text-white text-xs py-1 px-1.5 rounded transition-colors\"\r\n              title=\"Search for similar idols on the trade site\"\r\n            >\r\n              Trade\r\n            </button>\r\n          )}\r\n          <button\r\n            onClick={() => onRemoveIdol(idol.id)}\r\n            className=\"text-slate-400 hover:text-slate-300 transition-colors p-1\"\r\n            title=\"Remove idol\"\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div\r\n      ref={drag}\r\n      className={`${bgGradient} p-6 rounded-lg shadow-sm mb-3 cursor-move ${opacity} ${placedStyles} transition-all hover:shadow-md`}\r\n      onContextMenu={handleRightClick}\r\n      title=\"Drag to place on grid or right-click to remove\"\r\n    >\r\n      <div className=\"flex justify-between items-start\">\r\n        <div>\r\n          <h3 className=\"font-extrabold text-base text-white\">{idol.name}</h3>\r\n          <p className=\"text-xs text-slate-400 mt-1\">{idol.type} Idol</p>\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          {canTrade && (\r\n            <button\r\n              onClick={handleTradeClick}\r\n              className=\"bg-indigo-600 hover:bg-indigo-500 border border-indigo-500 text-white text-xs py-1 px-2 rounded transition-colors\"\r\n              title=\"Search for similar idols on the trade site\"\r\n            >\r\n              Trade\r\n            </button>\r\n          )}\r\n          <button\r\n            onClick={() => onRemoveIdol(idol.id)}\r\n            className=\"text-slate-400 hover:text-slate-300 transition-colors\"\r\n            title=\"Remove idol\"\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n      </div>\r\n  \r\n      <div className=\"mt-4 space-y-3\">\r\n        {idol.prefixes && idol.prefixes.length > 0 && (\r\n          <div>\r\n            <h4 className=\"text-xs font-medium text-blue-400\">Prefixes:</h4>\r\n            <ul className=\"text-[11px] space-y-1 mt-1\">\r\n              {idol.prefixes.map((prefix, idx) => (\r\n                <li key={`prefix-${idx}`} className=\"text-slate-300\">\r\n                  {prefix.Mod}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n  \r\n        {idol.suffixes && idol.suffixes.length > 0 && (\r\n          <div>\r\n            <h4 className=\"text-xs font-medium text-green-400\">Suffixes:</h4>\r\n            <ul className=\"text-[11px] space-y-1 mt-1\">\r\n              {idol.suffixes.map((suffix, idx) => (\r\n                <li key={`suffix-${idx}`} className=\"text-slate-300\">\r\n                  {suffix.Mod}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n  \r\n        {idol.isUnique && idol.uniqueModifiers && idol.uniqueModifiers.length > 0 && (\r\n          <div>\r\n            <h4 className=\"text-xs font-medium text-pink-400 border-l-4 border-pink-400 pl-2 mb-2\">\r\n              Unique Modifiers:\r\n            </h4>\r\n            <ul className=\"text-[11px] space-y-1 mt-1\">\r\n              {idol.uniqueModifiers.map((mod, idx) => (\r\n                <li key={`unique-${idx}`} className=\"text-slate-300\">\r\n                  {mod.Mod}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\n// Define display names for better debugging\r\nIdolItem.displayName = 'IdolItem';\r\n\r\n// SVG components extracted for reusability and cleaner code\r\nconst CompactViewIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className=\"h-5 w-5\"\r\n    viewBox=\"0 0 20 20\"\r\n    fill=\"currentColor\"\r\n  >\r\n    <path d=\"M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z\" />\r\n  </svg>\r\n);\r\n\r\nconst DetailedViewIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className=\"h-5 w-5\"\r\n    viewBox=\"0 0 20 20\"\r\n    fill=\"currentColor\"\r\n  >\r\n    <path d=\"M5 3a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2V5a2 2 0 00-2-2H5zM5 11a2 2 0 00-2 2v2a2 2 0 002 2h2a2 2 0 002-2v-2a2 2 0 00-2-2H5zM11 5a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V5zM11 13a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z\" />\r\n  </svg>\r\n);\r\n\r\nconst EmptyInventoryIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className=\"h-16 w-16 text-slate-500\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    stroke=\"currentColor\"\r\n  >\r\n    <path\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={1.5}\r\n      d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"\r\n    />\r\n  </svg>\r\n);\r\n\r\n// Main inventory component\r\nconst IdolInventory = ({ inventory, onRemoveIdol }) => {\r\n  const [compactView, setCompactView] = useState(false);\r\n\r\n  const toggleView = useCallback(() => {\r\n    setCompactView(prev => !prev);\r\n  }, []);\r\n\r\n  // Early render optimization for empty inventory\r\n  const isInventoryEmpty = inventory.length === 0;\r\n\r\n  return (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <button\r\n          onClick={toggleView}\r\n          className=\"bg-slate-800 hover:bg-slate-700 text-amber-400 hover:text-amber-300 p-1.5 rounded-md transition-colors\"\r\n          title={compactView ? \"Switch to detailed view\" : \"Switch to compact view\"}\r\n        >\r\n          {compactView ? <CompactViewIcon /> : <DetailedViewIcon />}\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"max-h-96 overflow-y-auto pr-1 minimal-scrollbar\">\r\n        {!isInventoryEmpty ? (\r\n          <div>\r\n            {inventory.map((idol) => (\r\n              <IdolItem\r\n                key={idol.id}\r\n                idol={idol}\r\n                onRemoveIdol={onRemoveIdol}\r\n                compactView={compactView}\r\n              />\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div className=\"bg-slate-800/50 rounded-xl p-6 text-center border border-slate-700/50\">\r\n            <div className=\"flex justify-center mb-4\">\r\n              <EmptyInventoryIcon />\r\n            </div>\r\n            <p className=\"text-slate-300 text-base mb-5\">No idols in inventory.</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(IdolInventory);","// components/common/Card.jsx\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Card = ({ \r\n  children, \r\n  title,\r\n  className = \"\",\r\n  headerRight,\r\n  ...props \r\n}) => {\r\n  return (\r\n    <div \r\n      className={`bg-slate-900 p-6 rounded-xl shadow-sm ${className}`}\r\n      {...props}\r\n    >\r\n      {(title || headerRight) && (\r\n        <div className=\"flex justify-between items-center mb-6\">\r\n          {title && <h2 className=\"text-xl font-bold text-white\">{title}</h2>}\r\n          {headerRight && <div>{headerRight}</div>}\r\n        </div>\r\n      )}\r\n      \r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  title: PropTypes.node,\r\n  className: PropTypes.string,\r\n  headerRight: PropTypes.node,\r\n};\r\n\r\nexport default React.memo(Card);","// utils/modifiers/modifierUtils.js\r\n\r\n// Pattern definitions for reuse\r\nconst PATTERNS = [\r\n  { type: \"plusChance\", regex: /\\+(\\d+(?:\\.\\d+)?)%\\s+chance/i },\r\n  { type: \"haveChance\", regex: /have\\s+(\\d+(?:\\.\\d+)?)%\\s+(?:increased\\s+)?chance/i },\r\n  { type: \"increased\", regex: /(\\d+(?:\\.\\d+)?)%\\s+increased/i },\r\n  { type: \"more\", regex: /(\\d+(?:\\.\\d+)?)%\\s+more/i },\r\n  { type: \"reduced\", regex: /(\\d+(?:\\.\\d+)?)%\\s+reduced/i },\r\n  { type: \"faster\", regex: /(\\d+(?:\\.\\d+)?)%\\s+faster/i },\r\n  { type: \"slower\", regex: /(\\d+(?:\\.\\d+)?)%\\s+slower/i },\r\n  { type: \"additional\", regex: /additional/i },\r\n  { type: \"numeric\", regex: /(\\d+(?:\\.\\d+)?)/ },\r\n];\r\n\r\n// POE pattern normalization for modifier comparison\r\nconst POE_PATTERNS = [\r\n  { regex: /(\\d+(?:\\.\\d+)?)%/g, replace: \"PERCENTAGE\" },\r\n  { regex: /\\+(\\d+(?:\\.\\d+)?)%/g, replace: \"+PERCENTAGE\" },\r\n  { regex: /\\+(\\d+(?:\\.\\d+)?)\\b(?!%)/g, replace: \"+NUMBER\" },\r\n  { regex: /(\\d+(?:\\.\\d+)?)\\s+additional/g, replace: \"NUMBER additional\" },\r\n  { regex: /lasts\\s+(\\d+(?:\\.\\d+)?)\\s+additional\\s+seconds/g, replace: \"lasts NUMBER additional seconds\" },\r\n  { regex: /have\\s+(?:a\\s+)?(\\d+(?:\\.\\d+)?)%\\s+(?:increased\\s+)?chance/g, replace: \"have PERCENTAGE chance\" },\r\n  { regex: /(\\d+(?:\\.\\d+)?)%\\s+chance/g, replace: \"PERCENTAGE chance\" },\r\n  { regex: /(\\d+(?:\\.\\d+)?)\\s+(increased|more|reduced|faster|slower)/g, replace: \"NUMBER $2\" },\r\n  { regex: /contain\\s+(\\d+(?:\\.\\d+)?)\\s+additional/g, replace: \"contain NUMBER additional\" },\r\n  { regex: /spawn\\s+with\\s+(?:an\\s+)?(?:additional\\s+)?(\\d+(?:\\.\\d+)?)%\\s+of\\s+Life\\s+missing/g, replace: \"spawn with PERCENTAGE of Life missing\" }\r\n];\r\n\r\n// Prefix detection patterns\r\nconst PREFIX_PATTERNS = [\r\n  /^Your Maps have \\+\\d/,\r\n  /^Your Maps have \\d+%/,\r\n  /^Your Maps contain/,\r\n  /^Your Maps are/,\r\n  /^Your Maps which contain/,\r\n  /Final Map Boss/,\r\n  /Map Bosses? (has|have)/,\r\n  /increased Maps found/,\r\n  /increased Pack size/,\r\n  /increased effect of Explicit Modifiers/,\r\n  /\\d+% chance for your Maps/,\r\n  /\\+\\d+% chance to grant/\r\n];\r\n\r\n// Suffix detection patterns\r\nconst SUFFIX_PATTERNS = [\r\n  /Abyssal Troves/,\r\n  /Expeditions in your Maps/,\r\n  /(Blight|Delirium|Legion|Ultimatum) (Monsters|Encounters|Rewards|Bosses) in your Maps/,\r\n  /Strongboxes (in|contained in) your Maps/,\r\n  /Blight Towers in your Maps/,\r\n  /Breaches in your Maps/,\r\n  /Shrines in your Maps/,\r\n  /Ritual Altars in your Maps/,\r\n  /Immortal Syndicate Members in your Maps/,\r\n  /Plants Harvested in your Maps/,\r\n  /Oils found in your Maps/\r\n];\r\n\r\n/**\r\n * Extracts the pattern type and value from a modifier text\r\n * @param {string} modText - The modifier text to analyze\r\n * @return {Object} Object containing type, value and fullText\r\n */\r\nexport const getMatchPattern = (modText) => {\r\n  if (!modText) return { type: \"unstackable\", value: null, fullText: \"\" };\r\n\r\n  for (const { type, regex } of PATTERNS) {\r\n    const match = modText.match(regex);\r\n    if (match) {\r\n      return {\r\n        type,\r\n        value: type !== \"additional\"\r\n          ? parseFloat(match[1])\r\n          : (modText.match(/(\\d+)/)?.[1] ? parseFloat(modText.match(/(\\d+)/)[1]) : 1),\r\n        fullText: modText,\r\n      };\r\n    }\r\n  }\r\n\r\n  return { type: \"unstackable\", value: null, fullText: modText };\r\n};\r\n\r\n/**\r\n * Extracts a normalized base key for grouping similar modifiers\r\n * @param {string} modText - The modifier text to normalize\r\n * @return {string} Normalized base key\r\n */\r\nexport const getBaseEffectKey = (modText) => {\r\n  if (!modText) return \"\";\r\n\r\n  // Special case for the Tier Maps pattern\r\n  if (modText.match(/Tier \\d+-\\d+ Maps found/)) {\r\n    return \"Tier X-Y Maps found have X% chance to become 1 tier higher\";\r\n  }\r\n\r\n  return modText\r\n    .replace(/(\\d+(?:\\.\\d+)?)(%|\\s|$)/g, \"X$2\")\r\n    .replace(/\\s+/g, \" \")\r\n    .trim();\r\n};\r\n\r\n/**\r\n * Determines if two modifier texts are equivalent \r\n * @param {string} mod1 - First modifier text\r\n * @param {string} mod2 - Second modifier text\r\n * @return {boolean} True if modifiers are equivalent\r\n */\r\nexport const areModsEquivalent = (mod1, mod2) => {\r\n  // Check for null or undefined mods\r\n  if (!mod1 || !mod2) return false;\r\n\r\n  const normalize = (str) => str.replace(/\\s+/g, \" \").trim();\r\n\r\n  // Normalize and standardize dashes\r\n  const norm1 = normalize(mod1).replace(/[\\u2013\\u2014\\u2212]/g, '-');\r\n  const norm2 = normalize(mod2).replace(/[\\u2013\\u2014\\u2212]/g, '-');\r\n\r\n  // Check for direct equality after normalization\r\n  if (norm1 === norm2) return true;\r\n\r\n  // Check for 'additional' pattern equivalence\r\n  const additionalPattern1 = norm1.replace(/\\b(?:an|a|1|one)\\s+additional\\b/g, \"NUMBER additional\");\r\n  const additionalPattern2 = norm2.replace(/\\b(?:an|a|1|one)\\s+additional\\b/g, \"NUMBER additional\");\r\n  if (additionalPattern1 === additionalPattern2) return true;\r\n\r\n  // Apply each POE pattern for standardization\r\n  for (const { regex, replace } of POE_PATTERNS) {\r\n    const normalized1 = norm1.replace(regex, replace);\r\n    const normalized2 = norm2.replace(regex, replace);\r\n    if (normalized1 === normalized2) return true;\r\n  }\r\n\r\n  // Replace all numbers for general comparison\r\n  const allNumbersReplaced1 = norm1.replace(/\\d+(?:\\.\\d+)?/g, \"NUMBER\");\r\n  const allNumbersReplaced2 = norm2.replace(/\\d+(?:\\.\\d+)?/g, \"NUMBER\");\r\n\r\n  // Helper function to determine if text is similar enough\r\n  const areSimilarEnough = (s1, s2) => {\r\n    const textOnly1 = s1.replace(/\\d+(?:\\.\\d+)?/g, \"\");\r\n    const textOnly2 = s2.replace(/\\d+(?:\\.\\d+)?/g, \"\");\r\n\r\n    if (textOnly1 === textOnly2) return true;\r\n\r\n    if (textOnly1.length > 15 && textOnly2.length > 15) {\r\n      const minLength = Math.min(textOnly1.length, textOnly2.length);\r\n      const comparisonLength = Math.floor(minLength * 0.8);\r\n      const sample1 = textOnly1.substring(0, comparisonLength);\r\n      const sample2 = textOnly2.substring(0, comparisonLength);\r\n      return textOnly1.includes(sample2) || textOnly2.includes(sample1);\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  if (allNumbersReplaced1 === allNumbersReplaced2 && areSimilarEnough(norm1, norm2)) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/**\r\n * Determines whether a modifier is a prefix or suffix\r\n * @param {string} modText - The modifier text to analyze\r\n * @return {string} 'prefix' or 'suffix'\r\n */\r\nexport function determineModifierType(modText) {\r\n  if (!modText) return \"suffix\"; // Default to suffix if no text\r\n\r\n  // Check prefix patterns\r\n  for (const pattern of PREFIX_PATTERNS) {\r\n    if (pattern.test(modText)) return \"prefix\";\r\n  }\r\n\r\n  // Check suffix patterns\r\n  for (const pattern of SUFFIX_PATTERNS) {\r\n    if (pattern.test(modText)) return \"suffix\";\r\n  }\r\n\r\n  // Check broader patterns\r\n  if (modText.includes(\"Your Maps have\") && !modText.includes(\"in your Maps have\")) {\r\n    return \"prefix\";\r\n  }\r\n\r\n  if (modText.includes(\" in your Maps\")) {\r\n    return \"suffix\";\r\n  }\r\n\r\n  return \"suffix\"; // Default\r\n}\r\n\r\n/**\r\n * Processes grid state to calculate stacked modifiers\r\n * @param {Array} gridState - 2D array representing the grid\r\n * @return {Array} Array of stacked modifiers\r\n */\r\nexport const calculateStackedModifiers = (gridState) => {\r\n  if (!gridState || !Array.isArray(gridState)) {\r\n    return [];\r\n  }\r\n\r\n  // Extract all unique modifiers from placed idols\r\n  const allModifiers = [];\r\n  const processedCells = new Set();\r\n  const uniqueIdolsFound = [];\r\n\r\n  // Process the grid\r\n  for (let row = 0; row < gridState.length; row++) {\r\n    for (let col = 0; col < gridState[row].length; col++) {\r\n      const cell = gridState[row][col];\r\n      if (!cell) continue;\r\n\r\n      const position = cell.position || { row, col };\r\n      const cellKey = `${position.row}-${position.col}`;\r\n\r\n      // Only process each idol once (based on its primary cell)\r\n      if (processedCells.has(cellKey)) continue;\r\n      processedCells.add(cellKey);\r\n\r\n      // Process unique idols\r\n      if (cell.isUnique && cell.uniqueModifiers) {\r\n        uniqueIdolsFound.push({\r\n          name: cell.name,\r\n          position,\r\n          modCount: cell.uniqueModifiers?.length,\r\n          mods: cell.uniqueModifiers\r\n        });\r\n\r\n        // Add unique idol modifiers\r\n        cell.uniqueModifiers.forEach(mod => {\r\n          if (mod && mod.Mod) {\r\n            allModifiers.push({\r\n              ...mod,\r\n              isUnique: true,\r\n              name: \"Unique\",\r\n              type: \"unique\"\r\n            });\r\n          } else {\r\n            console.warn(\"Invalid mod found in unique idol:\", mod);\r\n          }\r\n        });\r\n        continue;\r\n      }\r\n\r\n      // Add prefixes\r\n      if (cell.prefixes) {\r\n        cell.prefixes.forEach(prefix => {\r\n          if (prefix && prefix.Mod) {\r\n            allModifiers.push({\r\n              ...prefix,\r\n              name: prefix.Name || \"Unknown\",\r\n              type: \"prefix\"\r\n            });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add suffixes\r\n      if (cell.suffixes) {\r\n        cell.suffixes.forEach(suffix => {\r\n          if (suffix && suffix.Mod) {\r\n            allModifiers.push({\r\n              ...suffix,\r\n              name: suffix.Name || \"Unknown\",\r\n              type: \"suffix\"\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  // Group similar modifiers\r\n  const grouped = {};\r\n\r\n  allModifiers.forEach(mod => {\r\n    if (!mod || !mod.Mod) {\r\n      console.warn(\"Invalid modifier found:\", mod);\r\n      return; // Skip invalid modifiers\r\n    }\r\n\r\n    const baseKey = getBaseEffectKey(mod.Mod);\r\n    if (!baseKey) {\r\n      console.warn(\"Could not generate base key for mod:\", mod.Mod);\r\n      return; // Skip if we couldn't generate a base key\r\n    }\r\n\r\n    if (!grouped[baseKey]) {\r\n      grouped[baseKey] = {\r\n        ...mod,\r\n        count: 1,\r\n        matchPattern: getMatchPattern(mod.Mod),\r\n        instances: [{\r\n          value: getMatchPattern(mod.Mod).value,\r\n          text: mod.Mod\r\n        }]\r\n      };\r\n    } else {\r\n      grouped[baseKey].count++;\r\n      grouped[baseKey].instances.push({\r\n        value: getMatchPattern(mod.Mod).value,\r\n        text: mod.Mod\r\n      });\r\n    }\r\n  });\r\n\r\n  // Process each group to create stacked modifiers\r\n  return Object.values(grouped).map(group => {\r\n    if (!group || !group.matchPattern || group.matchPattern.type === \"unstackable\") {\r\n      return group;\r\n    }\r\n\r\n    const totalValue = Number(\r\n      group.instances\r\n        .reduce((sum, inst) => sum + (inst.value || 0), 0)\r\n        .toFixed(1)\r\n    );\r\n\r\n    const stackedMod = { ...group };\r\n\r\n    // Format the stacked mod text based on type\r\n    if (group.matchPattern.type === \"additional\" && !totalValue) {\r\n      stackedMod.mod = group.Mod.replace(/an additional/i, `${group.count} additional`);\r\n    } else if (group.Mod && group.Mod.match(/Tier \\d+-\\d+ Maps found have/)) {\r\n      // Special handling for Tier X-Y Maps pattern\r\n      const tierMatch = group.Mod.match(/Tier (\\d+-\\d+) Maps found have/);\r\n      if (tierMatch && tierMatch[1]) {\r\n        stackedMod.mod = group.Mod.replace(\r\n          /have\\s+\\d+(?:\\.\\d+)?%/,\r\n          `have ${totalValue}%`\r\n        );\r\n      } else {\r\n        stackedMod.mod = group.Mod.replace(\r\n          /(\\d+(?:\\.\\d+)?)(%|\\s|$)/,\r\n          `${totalValue}$2`\r\n        );\r\n      }\r\n    } else if (group.Mod) {\r\n      stackedMod.mod = group.Mod.replace(\r\n        /(\\d+(?:\\.\\d+)?)(%|\\s|$)/,\r\n        `${totalValue}$2`\r\n      );\r\n    } else {\r\n      stackedMod.mod = \"Unknown modifier\";\r\n    }\r\n\r\n    stackedMod.stackedValue = totalValue;\r\n    return stackedMod;\r\n  });\r\n};","// components/modifiers/ExportModal.jsx\r\nimport React, { useState, memo } from \"react\";\r\nimport Button from \"../common/Button\";\r\n\r\nfunction ExportModal({\r\n  onClose,\r\n  availableStrategies,\r\n  selectedStrategies,\r\n  setSelectedStrategies,\r\n  includeUniques,\r\n  setIncludeUniques,\r\n  exportText\r\n}) {\r\n  const [copySuccess, setCopySuccess] = useState(false);\r\n\r\n  // Toggle strategy selection\r\n  const toggleStrategy = (strategy) => {\r\n    setSelectedStrategies(prev => \r\n      prev.includes(strategy)\r\n        ? prev.filter(s => s !== strategy)\r\n        : [...prev, strategy]\r\n    );\r\n  };\r\n\r\n  // Copy export text to clipboard\r\n  const handleCopyText = () => {\r\n    navigator.clipboard.writeText(exportText).then(() => {\r\n      setCopySuccess(true);\r\n      setTimeout(() => setCopySuccess(false), 2000);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-slate-950 bg-opacity-80 z-50 flex items-center justify-center p-4 backdrop-blur-sm\">\r\n      <div className=\"bg-slate-900 rounded-xl p-6 max-w-lg w-full shadow-lg border border-slate-800\">\r\n        <div className=\"flex justify-between items-start mb-6\">\r\n          <h2 className=\"text-xl font-bold text-white\">Export Modifiers</h2>\r\n          <button \r\n            onClick={onClose} \r\n            className=\"text-slate-400 hover:text-white transition-colors\"\r\n            aria-label=\"Close\"\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"mb-6\">\r\n          <label className=\"block mb-3 text-base font-medium text-slate-300\">\r\n            Select Strategy Type(s)\r\n          </label>\r\n          \r\n          <div className=\"grid grid-cols-3 gap-2 mb-6\">\r\n            {availableStrategies.length === 0 ? (\r\n              <div className=\"col-span-3 text-center text-slate-400 py-2\">\r\n                No strategy-specific modifiers detected\r\n              </div>\r\n            ) : (\r\n              availableStrategies.map(strategy => (\r\n                <div \r\n                  key={strategy}\r\n                  onClick={() => toggleStrategy(strategy)}\r\n                  className={`cursor-pointer p-2 rounded-md text-center text-sm ${\r\n                    selectedStrategies.includes(strategy) \r\n                      ? 'bg-indigo-600 text-white' \r\n                      : 'bg-slate-800 text-slate-300 hover:bg-slate-700'\r\n                  } transition-colors`}\r\n                  role=\"checkbox\"\r\n                  aria-checked={selectedStrategies.includes(strategy)}\r\n                  tabIndex={0}\r\n                  onKeyPress={(e) => {\r\n                    if (e.key === 'Enter' || e.key === ' ') {\r\n                      toggleStrategy(strategy);\r\n                    }\r\n                  }}\r\n                >\r\n                  {strategy}\r\n                </div>\r\n              ))\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"flex items-center mb-6\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"includeUniques\"\r\n              checked={includeUniques}\r\n              onChange={(e) => setIncludeUniques(e.target.checked)}\r\n              className=\"mr-2 h-4 w-4 rounded border-slate-700 bg-slate-800 text-indigo-600 focus:ring-indigo-500 focus:ring-opacity-50 focus:ring-offset-0 transition-colors cursor-pointer\"\r\n            />\r\n            <label \r\n              htmlFor=\"includeUniques\" \r\n              className=\"text-sm text-slate-300 hover:text-slate-200 transition-colors cursor-pointer select-none\"\r\n            >\r\n              Include Unique(s)\r\n            </label>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"bg-slate-800 p-4 rounded-lg max-h-60 overflow-y-auto font-mono text-sm text-slate-300 mb-6\">\r\n          <pre>{exportText}</pre>\r\n        </div>\r\n        \r\n        <div className=\"flex justify-end\">\r\n          <Button \r\n            onClick={handleCopyText}\r\n            variant={copySuccess ? \"primary\" : \"amber\"}\r\n          >\r\n            {copySuccess ? 'Copied!' : 'Copy Text'}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default memo(ExportModal);","// components/modifiers/ModifierGroup.jsx\r\nimport React from \"react\";\r\n\r\nfunction ModifierGroup({ name, modifiers }) {\r\n  if (!Array.isArray(modifiers) || modifiers.length === 0) {\r\n    return null;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"border-t border-slate-800 pt-4\">\r\n      <h3 className=\"font-semibold text-base text-amber-400 border-l-4 border-amber-400 pl-2 mb-3\">\r\n        {name}\r\n      </h3>\r\n      <ul className=\"space-y-2 minimal-scrollbar\">\r\n        {modifiers.map((mod, index) => {\r\n          if (!mod) return null;\r\n          \r\n          // Display Mod or mod property\r\n          const displayMod = mod.mod || mod.Mod;\r\n          if (!displayMod) return null;\r\n          \r\n          // Set color based on modifier type\r\n          const textColorClass = \r\n            mod.type === 'prefix' ? 'text-blue-200' : \r\n            mod.type === 'suffix' ? 'text-green-200' : \r\n            'text-pink-200';\r\n          \r\n          return (\r\n            <li \r\n              key={index} \r\n              className=\"flex justify-between text-sm py-1 hover:bg-slate-800/30 px-2 rounded transition-colors\"\r\n            >\r\n              <span className={`text-slate-200 ${textColorClass}`}>\r\n                {displayMod}\r\n              </span>\r\n              {mod.count > 1 && (\r\n                <span className=\"text-slate-400 ml-2 font-medium\">\r\n                  ({mod.count}×)\r\n                </span>\r\n              )}\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(ModifierGroup);","// components/modifiers/ActiveModifiers.jsx\r\nimport React, { useMemo, useState, useEffect, useContext, memo } from \"react\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport Card from \"../common/Card\";\r\nimport Button from \"../common/Button\";\r\nimport { calculateStackedModifiers } from \"../../utils/modifiers/modifierUtils\";\r\nimport ExportModal from \"./ExportModal\";\r\nimport ModifierGroup from \"./ModifierGroup\";\r\n\r\n\r\n// Memoized sub-components\r\nconst ModifierItem = memo(({ mod, count }) => {\r\n  const textColorClass = \r\n    mod.type === 'prefix' ? 'text-blue-200' : \r\n    mod.type === 'suffix' ? 'text-green-200' : \r\n    'text-pink-200';\r\n  \r\n  const displayMod = mod.mod || mod.Mod;\r\n  \r\n  return (\r\n    <li className=\"flex justify-between text-sm py-1 hover:bg-slate-800/30 px-2 rounded transition-colors\">\r\n      <span className={`text-slate-200 ${textColorClass}`}>\r\n        {displayMod}\r\n      </span>\r\n      {count > 1 && (\r\n        <span className=\"text-slate-400 ml-2 font-medium\">\r\n          ({count}×)\r\n        </span>\r\n      )}\r\n    </li>\r\n  );\r\n});\r\n\r\nModifierItem.displayName = 'ModifierItem';\r\n\r\n// Memoized ModifierGroup component\r\nconst MemoizedModifierGroup = memo(({ name, modifiers }) => {\r\n  if (!Array.isArray(modifiers) || modifiers.length === 0) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div className=\"border-t border-slate-800 pt-4\">\r\n      <h3 className=\"font-semibold text-base text-amber-400 border-l-4 border-amber-400 pl-2 mb-3\">\r\n        {name}\r\n      </h3>\r\n      <ul className=\"space-y-2 minimal-scrollbar\">\r\n        {modifiers.map((mod, index) => (\r\n          mod && (mod.mod || mod.Mod) ? (\r\n            <ModifierItem \r\n              key={`${name}-${index}`}\r\n              mod={mod}\r\n              count={mod.count || 1}\r\n            />\r\n          ) : null\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n});\r\n\r\nMemoizedModifierGroup.displayName = 'MemoizedModifierGroup';\r\n\r\nfunction ActiveModifiers() {\r\n  const { gridState } = useContext(AppContext);\r\n  const [showExportModal, setShowExportModal] = useState(false);\r\n  const [selectedStrategies, setSelectedStrategies] = useState([]);\r\n  const [includeUniques, setIncludeUniques] = useState(false);\r\n\r\n  // Memoize active modifiers calculation\r\n  const activeModifiers = useMemo(() => {\r\n    if (!Array.isArray(gridState)) return [];\r\n    return calculateStackedModifiers(gridState);\r\n  }, [gridState]);\r\n\r\n  // Memoize grouped modifiers\r\n  const groupedModifiers = useMemo(() => {\r\n    if (!Array.isArray(activeModifiers) || activeModifiers.length === 0) {\r\n      return {};\r\n    }\r\n    \r\n    const groups = {\r\n      Unique: activeModifiers.filter(mod => mod?.isUnique)\r\n    };\r\n\r\n    // Process non-unique modifiers\r\n    activeModifiers\r\n      .filter(mod => mod && !mod.isUnique)\r\n      .forEach(mod => {\r\n        if (!mod?.name) return;\r\n        \r\n        const nameKey = mod.name;\r\n        if (!groups[nameKey]) groups[nameKey] = [];\r\n        groups[nameKey].push(mod);\r\n      });\r\n\r\n    // Remove empty groups\r\n    return Object.fromEntries(\r\n      Object.entries(groups).filter(([_, mods]) => mods?.length > 0)\r\n    );\r\n  }, [activeModifiers]);\r\n\r\n  // Memoize exportable modifiers\r\n  const exportableModifiers = useMemo(() => {\r\n    if (!Array.isArray(activeModifiers)) return [];\r\n    return activeModifiers.filter(mod => mod && (includeUniques || !mod.isUnique));\r\n  }, [activeModifiers, includeUniques]);\r\n\r\n  // Memoize idol type counts\r\n  const idolTypeCounts = useMemo(() => {\r\n    if (!Array.isArray(gridState)) return {};\r\n    \r\n    const typeCounts = {};\r\n    const processedCells = new Set();\r\n    \r\n    gridState.forEach((row, rowIndex) => {\r\n      row.forEach((cell, colIndex) => {\r\n        if (!cell) return;\r\n\r\n        const idolPos = cell.position || { row: rowIndex, col: colIndex };\r\n        const cellKey = `${idolPos.row}-${idolPos.col}`;\r\n\r\n        if (!processedCells.has(cellKey)) {\r\n          processedCells.add(cellKey);\r\n          \r\n          if (!cell.isUnique || includeUniques) {\r\n            const type = cell.type || \"Minor Idol\";\r\n            typeCounts[type] = (typeCounts[type] || 0) + 1;\r\n          }\r\n        }\r\n      });\r\n    });\r\n    \r\n    return typeCounts;\r\n  }, [gridState, includeUniques]);\r\n\r\n  // Generate export text\r\n  const generateExportText = () => {\r\n    // Strategy section\r\n    const strategyText = selectedStrategies.length > 0\r\n      ? `Strategy: ${selectedStrategies.join(', ')}`\r\n      : 'Strategy:';\r\n    \r\n    // Stats section - split into normal and unique modifiers\r\n    const normalMods = exportableModifiers.filter(mod => !mod?.isUnique);\r\n    const uniqueMods = exportableModifiers.filter(mod => mod?.isUnique);\r\n\r\n    const normalModsText = normalMods.map(mod => {\r\n      if (!mod || (!mod.mod && !mod.Mod)) return '';\r\n      let modText = mod.mod || mod.Mod;\r\n      if (mod.count > 1) {\r\n        modText = `${modText} (${mod.count}x)`;\r\n      }\r\n      return `- ${modText}`;\r\n    }).filter(Boolean).join('\\n');\r\n\r\n    const uniqueModsText = uniqueMods.length > 0 \r\n      ? '\\nUnique Modifiers:\\n' + uniqueMods.map(mod => {\r\n          if (!mod || (!mod.mod && !mod.Mod)) return '';\r\n          let modText = mod.mod || mod.Mod;\r\n          if (mod.count > 1) {\r\n            modText = `${modText} (${mod.count}x)`;\r\n          }\r\n          return `- ${modText}`;\r\n        }).filter(Boolean).join('\\n')\r\n      : '';\r\n\r\n    const statsText = normalModsText + uniqueModsText;\r\n\r\n    // Unique idols section\r\n    let uniqueIdolsText = '';\r\n    if (includeUniques) {\r\n      const processedCells = new Set();\r\n      const uniqueIdols = [];\r\n\r\n      gridState?.forEach((row, rowIndex) => {\r\n        row?.forEach((cell, colIndex) => {\r\n          if (!cell?.isUnique) return;\r\n\r\n          const idolPos = cell.position || { row: rowIndex, col: colIndex };\r\n          const cellKey = `${idolPos.row}-${idolPos.col}`;\r\n\r\n          if (!processedCells.has(cellKey)) {\r\n            processedCells.add(cellKey);\r\n            uniqueIdols.push(cell.name || 'Unnamed Unique Idol');\r\n          }\r\n        });\r\n      });\r\n\r\n      uniqueIdolsText = uniqueIdols.length > 0\r\n        ? `\\n\\nUnique Idols:\\n${uniqueIdols.map(name => `- ${name}`).join('\\n')}`\r\n        : '';\r\n    }\r\n    \r\n    // Idol types section\r\n    const typesText = Object.entries(idolTypeCounts)\r\n      .map(([type, count]) => `- ${count}x ${type}`)\r\n      .join('\\n');\r\n    \r\n    return `${strategyText}\\nIdol Stats:\\n${statsText}${uniqueIdolsText}\\n\\nIdol Types:\\n${typesText}`;\r\n  };\r\n\r\n  // Reset selected strategies when grid changes\r\n  useEffect(() => {\r\n    setSelectedStrategies([]);\r\n  }, [gridState]);\r\n\r\n  // Get available strategies for the selection dropdown\r\n  const availableStrategies = useMemo(() => {\r\n    if (!groupedModifiers || typeof groupedModifiers !== 'object') {\r\n      return [];\r\n    }\r\n    \r\n    return Object.keys(groupedModifiers)\r\n      .filter(key => key !== \"Unique\")\r\n      .sort();\r\n  }, [groupedModifiers]);\r\n\r\n  // Empty state\r\n  if (!activeModifiers?.length) {\r\n    return (\r\n      <Card title=\"Active Modifiers\">\r\n        <p className=\"text-slate-400\">\r\n          No active modifiers. Place idols on the grid to see their effects.\r\n        </p>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card \r\n      title=\"Active Modifiers\"\r\n      headerRight={\r\n        <Button \r\n          variant=\"amber\" \r\n          size=\"sm\" \r\n          onClick={() => setShowExportModal(true)}\r\n        >\r\n          Export to Text\r\n        </Button>\r\n      }\r\n    >\r\n      <div className=\"space-y-6\">\r\n        {Object.entries(groupedModifiers).map(([name, mods]) => (\r\n          <ModifierGroup key={name} name={name} modifiers={mods} />\r\n        ))}\r\n      </div>\r\n      \r\n      {showExportModal && (\r\n        <ExportModal\r\n          onClose={() => setShowExportModal(false)}\r\n          availableStrategies={availableStrategies}\r\n          selectedStrategies={selectedStrategies}\r\n          setSelectedStrategies={setSelectedStrategies}\r\n          includeUniques={includeUniques}\r\n          setIncludeUniques={setIncludeUniques}\r\n          exportText={generateExportText()}\r\n        />\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default memo(ActiveModifiers);","// components/modifiers/ModifierCard.jsx\r\nimport React, { useCallback } from \"react\";\r\n\r\nconst ModifierCard = ({ \r\n  modifier, \r\n  inModifierList = null, \r\n  searchContext = \"builder\", \r\n  onClick,\r\n  onRemove = null\r\n}) => {\r\n  const isPrefixStyle = modifier.type === \"prefix\";\r\n  \r\n  const handleClick = useCallback(() => {\r\n    if (onClick) onClick(modifier, modifier.type);\r\n  }, [onClick, modifier]);\r\n  \r\n  const handleRightClick = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (onRemove) onRemove(modifier);\r\n  }, [onRemove, modifier]);\r\n\r\n  const baseClasses = \"p-3 rounded-md cursor-pointer transition-colors select-none h-full flex flex-col justify-center\";\r\n  const styleClasses = isPrefixStyle \r\n    ? \"bg-gradient-to-r from-blue-900/30 to-slate-800/70 border border-blue-800/50 hover:from-blue-800/30 hover:border-blue-700/70\" \r\n    : \"bg-gradient-to-r from-green-900/30 to-slate-800/70 border border-green-800/50 hover:from-green-800/30 hover:border-green-700/70\";\r\n  const highlightClass = inModifierList ? \"ring-1 ring-amber-500/70\" : \"\";\r\n  \r\n  const tooltipText = onRemove \r\n    ? (isPrefixStyle ? \"Click to add prefix, right-click to remove\" : \"Click to add suffix, right-click to remove\") \r\n    : (isPrefixStyle ? \"Click to add prefix\" : \"Click to add suffix\");\r\n\r\n  return (\r\n    <div\r\n      className={`${baseClasses} ${styleClasses} ${highlightClass}`}\r\n      onClick={handleClick}\r\n      onContextMenu={handleRightClick}\r\n      title={tooltipText}\r\n      role=\"button\"\r\n      aria-label={tooltipText}\r\n    >\r\n      <div className=\"flex justify-between items-start\">\r\n        {inModifierList && (\r\n          <span className=\"text-yellow-400 font-bold text-xs\">\r\n            ({inModifierList.count}×)\r\n          </span>\r\n        )}\r\n      </div>\r\n      \r\n      <div className=\"text-sm text-slate-300 line-clamp-3\">\r\n        {modifier.Mod}\r\n      </div>\r\n\r\n      {searchContext === \"autogen\" && modifier.supportedTypes && (\r\n        <div className=\"text-slate-400 text-xs mt-1 line-clamp-1\">\r\n          Available on: {modifier.supportedTypes.join(\", \")}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ModifierCard);","// components/modifiers/ModifierSearch.jsx\r\nimport React, { useState, useEffect, useMemo, useCallback, memo } from \"react\";\r\nimport { useModifiers } from \"../../hooks/useModifiers\";\r\nimport ModifierCard from \"./ModifierCard\";\r\n\r\n// Extracted for reusability and cleaner render method\r\nconst ModeToggleButtons = memo(({ viewByName, handleViewModeChange }) => (\r\n  <div className=\"flex space-x-2 mb-4 p-3\">\r\n    <button\r\n      className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\r\n        !viewByName\r\n          ? \"bg-indigo-600 text-white\"\r\n          : \"bg-slate-700 text-slate-300 hover:bg-slate-600\"\r\n      }`}\r\n      onClick={() => handleViewModeChange(false)}\r\n    >\r\n      Search by Text\r\n    </button>\r\n    <button\r\n      className={`px-3 py-2 rounded-md text-sm font-medium transition-colors ${\r\n        viewByName\r\n          ? \"bg-indigo-600 text-white\"\r\n          : \"bg-slate-700 text-slate-300 hover:bg-slate-600\"\r\n      }`}\r\n      onClick={() => handleViewModeChange(true)}\r\n    >\r\n      Browse by Name\r\n    </button>\r\n  </div>\r\n));\r\n\r\nModeToggleButtons.displayName = 'ModeToggleButtons';\r\n\r\nconst NameTag = memo(({ item, isSelected, isFullySelected, onClick }) => (\r\n  <button\r\n    className={`px-3 py-1.5 text-sm rounded-md transition-colors ${\r\n      isSelected\r\n        ? `bg-indigo-600 text-white font-medium ${\r\n            !isFullySelected ? \"ring-2 ring-indigo-300\" : \"\"\r\n          }`\r\n        : \"bg-slate-700 text-slate-300 hover:bg-slate-600\"\r\n    }`}\r\n    onClick={() => onClick(item)}\r\n  >\r\n    {item.name}\r\n  </button>\r\n));\r\n\r\nNameTag.displayName = 'NameTag';\r\n\r\nconst FilterTypeSelect = memo(({ filterType, onChange }) => (\r\n  <select\r\n    className=\"bg-slate-700 p-2.5 rounded-md border-0 text-sm flex-grow ring-1 ring-slate-600 focus:ring-2 focus:ring-indigo-500 outline-none\"\r\n    value={filterType}\r\n    onChange={onChange}\r\n  >\r\n    <option value=\"all\">All Types</option>\r\n    <option value=\"prefix\">Prefixes Only</option>\r\n    <option value=\"suffix\">Suffixes Only</option>\r\n  </select>\r\n));\r\n\r\nFilterTypeSelect.displayName = 'FilterTypeSelect';\r\n\r\nconst SelectionIndicator = memo(({ count, onClear }) => (\r\n  <div className=\"mb-3 px-1 py-1 bg-indigo-900/30 border border-indigo-700/50 rounded-md text-sm font-medium text-indigo-300 flex items-center justify-between\">\r\n    <div className=\"flex items-center\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"h-4 w-4 mr-1.5 ml-2\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={2}\r\n          d=\"M13 10V3L4 14h7v7l9-11h-7z\"\r\n        />\r\n      </svg>\r\n      {count} name{count > 1 ? \"s\" : \"\"} selected\r\n    </div>\r\n    <button\r\n      onClick={onClear}\r\n      className=\"bg-indigo-700 hover:bg-indigo-600 px-2 py-0.5 rounded text-xs text-white transition-colors mr-1\"\r\n    >\r\n      Reset\r\n    </button>\r\n  </div>\r\n));\r\n\r\nSelectionIndicator.displayName = 'SelectionIndicator';\r\n\r\n// Main ModifierSearch component\r\nconst ModifierSearch = ({\r\n  modData,\r\n  onAddModifier,\r\n  onRemoveModifier = null,\r\n  modifierList = [],\r\n  selectedType = \"\",\r\n  initialState = null,\r\n  onSearchUpdate = null,\r\n  searchContext = \"builder\",\r\n  selectedPrefixes = [],\r\n  selectedSuffixes = [],\r\n}) => {\r\n  // State initialization from props\r\n  const [searchTerm, setSearchTerm] = useState(initialState?.searchTerm || \"\");\r\n  const [filterType, setFilterType] = useState(initialState?.filterType || \"all\");\r\n  const [viewByName, setViewByName] = useState(initialState?.viewByName || false);\r\n  const [selectedNames, setSelectedNames] = useState(initialState?.selectedNames || []);\r\n  const [nameSearchTerm, setNameSearchTerm] = useState(\"\");\r\n  const [selectedGroupNames, setSelectedGroupNames] = useState([]);\r\n\r\n  const { modifierGroups, nameToGroupMap } = useModifiers();\r\n\r\n  // Memoized handlers\r\n  const handleSearchTermChange = useCallback(e => setSearchTerm(e.target.value), []);\r\n  const handleFilterTypeChange = useCallback(e => setFilterType(e.target.value), []);\r\n  const handleNameSearchChange = useCallback(e => setNameSearchTerm(e.target.value), []);\r\n  \r\n  const handleClearSelections = useCallback(() => {\r\n    setSelectedNames([]);\r\n    setSelectedGroupNames([]);\r\n  }, []);\r\n\r\n  const handleViewModeChange = useCallback(mode => {\r\n    setViewByName(mode);\r\n    setSelectedNames([]);\r\n  }, []);\r\n\r\n  // Handle name selection for tag cloud with optimized logic\r\n  const handleNameSelection = useCallback(item => {\r\n    if (item.isGroup) {\r\n      const groupNames = modifierGroups[item.name] || [];\r\n      const allSelected = groupNames.every(name => selectedNames.includes(name));\r\n\r\n      if (allSelected) {\r\n        setSelectedNames(prev => prev.filter(name => !groupNames.includes(name)));\r\n        setSelectedGroupNames(prev => prev.filter(name => name !== item.name));\r\n      } else {\r\n        setSelectedNames(prev => {\r\n          const newNames = [...prev];\r\n          groupNames.forEach(name => {\r\n            if (!newNames.includes(name)) newNames.push(name);\r\n          });\r\n          return newNames;\r\n        });\r\n        setSelectedGroupNames(prev => \r\n          prev.includes(item.name) ? prev : [...prev, item.name]\r\n        );\r\n      }\r\n    } else {\r\n      setSelectedNames(prev => \r\n        prev.includes(item.name) \r\n          ? prev.filter(n => n !== item.name) \r\n          : [...prev, item.name]\r\n      );\r\n    }\r\n  }, [modifierGroups, selectedNames]);\r\n\r\n  // Update parent with search state changes\r\n  useEffect(() => {\r\n    if (!onSearchUpdate) return;\r\n    \r\n    const timeoutId = setTimeout(() => {\r\n      onSearchUpdate({\r\n        searchTerm,\r\n        filterType,\r\n        viewByName,\r\n        selectedNames,\r\n      });\r\n    }, 50);\r\n    \r\n    return () => clearTimeout(timeoutId);\r\n  }, [searchTerm, filterType, viewByName, selectedNames, onSearchUpdate]);\r\n\r\n  // Get modifier count for display - memoized for performance\r\n  const getModifierCount = useCallback(modifier => {\r\n    if (searchContext === \"builder\" || searchContext === \"trade\") {\r\n      // Determine if this is a prefix by checking modData\r\n      const isPrefixMod = filterType === \"prefix\" || \r\n        (filterType === \"all\" && modData.prefixes && \r\n          Object.values(modData.prefixes).some(list => \r\n            list.some(p => p.id === modifier.id)));\r\n      \r\n      if (isPrefixMod) {\r\n        return selectedPrefixes.some(p => p.id === modifier.id) ? { count: 1 } : null;\r\n      } else {\r\n        return selectedSuffixes.some(s => s.id === modifier.id) ? { count: 1 } : null;\r\n      }\r\n    } else {\r\n      return modifierList.find(m => m.id === modifier.id) || null;\r\n    }\r\n  }, [filterType, modData, selectedPrefixes, selectedSuffixes, modifierList, searchContext]);\r\n\r\n  // Memoized data preparation\r\n  const modifierNames = useMemo(() => {\r\n    if (!modData.prefixes || !modData.suffixes)\r\n      return { prefixes: [], suffixes: [] };\r\n\r\n    const prefixNames = new Set();\r\n    const suffixNames = new Set();\r\n\r\n    if (searchContext === \"builder\" && selectedType) {\r\n      if (modData.prefixes[selectedType]) {\r\n        modData.prefixes[selectedType].forEach(mod => prefixNames.add(mod.Name));\r\n      }\r\n      if (modData.suffixes[selectedType]) {\r\n        modData.suffixes[selectedType].forEach(mod => suffixNames.add(mod.Name));\r\n      }\r\n    } else {\r\n      Object.values(modData.prefixes).forEach(typeModifiers => {\r\n        typeModifiers.forEach(mod => prefixNames.add(mod.Name));\r\n      });\r\n      Object.values(modData.suffixes).forEach(typeModifiers => {\r\n        typeModifiers.forEach(mod => suffixNames.add(mod.Name));\r\n      });\r\n    }\r\n\r\n    return {\r\n      prefixes: Array.from(prefixNames).sort(),\r\n      suffixes: Array.from(suffixNames).sort(),\r\n    };\r\n  }, [modData, selectedType, searchContext]);\r\n\r\n  // Combined unique names for \"all types\" view\r\n  const combinedUniqueNames = useMemo(() => {\r\n    if (filterType !== \"all\") return [];\r\n    const uniqueNames = new Set([\r\n      ...modifierNames.prefixes,\r\n      ...modifierNames.suffixes,\r\n    ]);\r\n    return Array.from(uniqueNames).sort();\r\n  }, [modifierNames.prefixes, modifierNames.suffixes, filterType]);\r\n\r\n  // Helper function for sorting by relevance - extracted for clarity\r\n  const sortByRelevance = useCallback((items, searchTerm) => {\r\n    const lowerTerm = searchTerm.toLowerCase();\r\n    return items.sort((a, b) => {\r\n      const aNameMatch = a.Name.toLowerCase().indexOf(lowerTerm);\r\n      const bNameMatch = b.Name.toLowerCase().indexOf(lowerTerm);\r\n      if (aNameMatch !== -1 && bNameMatch === -1) return -1;\r\n      if (aNameMatch === -1 && bNameMatch !== -1) return 1;\r\n      if (aNameMatch !== -1 && bNameMatch !== -1) return aNameMatch - bNameMatch;\r\n      return a.Name.localeCompare(b.Name);\r\n    }).slice(0, 50);\r\n  }, []);\r\n\r\n  // Optimized filtering logic\r\n  const filteredModifiers = useMemo(() => {\r\n    if (!modData.prefixes || !modData.suffixes)\r\n      return { prefixes: [], suffixes: [] };\r\n\r\n    // Autogen context filtering\r\n    if (searchContext === \"autogen\") {\r\n      // By name with selections\r\n      if (viewByName && selectedNames.length > 0) {\r\n        const result = { prefixes: [], suffixes: [] };\r\n        \r\n        selectedNames.forEach(nameFilter => {\r\n          // Filter prefixes\r\n          if (filterType === \"all\" || filterType === \"prefix\") {\r\n            const combinedPrefixes = [];\r\n            const modsSeen = new Set();\r\n            \r\n            Object.entries(modData.prefixes).forEach(([_, prefixList]) => {\r\n              prefixList.forEach(prefix => {\r\n                if (prefix.Name === nameFilter && !modsSeen.has(prefix.Mod)) {\r\n                  modsSeen.add(prefix.Mod);\r\n                  const supportedTypes = Object.entries(modData.prefixes)\r\n                    .filter(([_, typeList]) => \r\n                      typeList.some(p => p.Mod === prefix.Mod)\r\n                    )\r\n                    .map(([type]) => type);\r\n                  combinedPrefixes.push({ ...prefix, supportedTypes });\r\n                }\r\n              });\r\n            });\r\n            result.prefixes = [...result.prefixes, ...combinedPrefixes];\r\n          }\r\n\r\n          // Filter suffixes\r\n          if (filterType === \"all\" || filterType === \"suffix\") {\r\n            const combinedSuffixes = [];\r\n            const modsSeen = new Set();\r\n            \r\n            Object.entries(modData.suffixes).forEach(([_, suffixList]) => {\r\n              suffixList.forEach(suffix => {\r\n                if (\r\n                  (suffix.Name === nameFilter || suffix.Name === `of ${nameFilter}`) && \r\n                  !modsSeen.has(suffix.Mod)\r\n                ) {\r\n                  modsSeen.add(suffix.Mod);\r\n                  const supportedTypes = Object.entries(modData.suffixes)\r\n                    .filter(([_, typeList]) => \r\n                      typeList.some(s => s.Mod === suffix.Mod)\r\n                    )\r\n                    .map(([type]) => type);\r\n                  combinedSuffixes.push({ ...suffix, supportedTypes });\r\n                }\r\n              });\r\n            });\r\n            result.suffixes = [...result.suffixes, ...combinedSuffixes];\r\n          }\r\n        });\r\n        return result;\r\n      } \r\n      // By text search\r\n      else if (searchTerm) {\r\n        const lowerTerm = searchTerm.toLowerCase();\r\n        const result = { prefixes: [], suffixes: [] };\r\n        \r\n        // Find matching prefixes\r\n        if (filterType === \"all\" || filterType === \"prefix\") {\r\n          const combinedPrefixes = [];\r\n          const prefixModsSeen = new Set();\r\n          \r\n          Object.entries(modData.prefixes).forEach(([_, prefixList]) => {\r\n            prefixList.forEach(prefix => {\r\n              if (\r\n                (prefix.Name.toLowerCase().includes(lowerTerm) || \r\n                 prefix.Mod.toLowerCase().includes(lowerTerm)) &&\r\n                !prefixModsSeen.has(prefix.Mod)\r\n              ) {\r\n                prefixModsSeen.add(prefix.Mod);\r\n                const supportedTypes = Object.entries(modData.prefixes)\r\n                  .filter(([_, typeList]) => \r\n                    typeList.some(p => p.Mod === prefix.Mod)\r\n                  )\r\n                  .map(([type]) => type);\r\n                combinedPrefixes.push({ ...prefix, supportedTypes });\r\n              }\r\n            });\r\n          });\r\n          \r\n          result.prefixes = sortByRelevance(combinedPrefixes, searchTerm);\r\n        }\r\n        \r\n        // Find matching suffixes\r\n        if (filterType === \"all\" || filterType === \"suffix\") {\r\n          const combinedSuffixes = [];\r\n          const suffixModsSeen = new Set();\r\n          \r\n          Object.entries(modData.suffixes).forEach(([_, suffixList]) => {\r\n            suffixList.forEach(suffix => {\r\n              if (\r\n                (suffix.Name.toLowerCase().includes(lowerTerm) || \r\n                 suffix.Mod.toLowerCase().includes(lowerTerm)) &&\r\n                !suffixModsSeen.has(suffix.Mod)\r\n              ) {\r\n                suffixModsSeen.add(suffix.Mod);\r\n                const supportedTypes = Object.entries(modData.suffixes)\r\n                  .filter(([_, typeList]) => \r\n                    typeList.some(s => s.Mod === suffix.Mod)\r\n                  )\r\n                  .map(([type]) => type);\r\n                combinedSuffixes.push({ ...suffix, supportedTypes });\r\n              }\r\n            });\r\n          });\r\n          \r\n          result.suffixes = sortByRelevance(combinedSuffixes, searchTerm);\r\n        }\r\n        \r\n        return result;\r\n      }\r\n      \r\n      return { prefixes: [], suffixes: [] };\r\n    }\r\n\r\n    // Builder/Trade context filtering\r\n    \r\n    // By name with selections\r\n    if (viewByName && selectedNames.length > 0) {\r\n      const result = { prefixes: [], suffixes: [] };\r\n      \r\n      selectedNames.forEach(nameFilter => {\r\n        if (filterType === \"all\" || filterType === \"prefix\") {\r\n          if (\r\n            searchContext === \"builder\" &&\r\n            selectedType &&\r\n            modData.prefixes[selectedType]\r\n          ) {\r\n            const filtered = modData.prefixes[selectedType].filter(\r\n              mod => mod.Name === nameFilter\r\n            );\r\n            result.prefixes = [...result.prefixes, ...filtered];\r\n          } else {\r\n            Object.values(modData.prefixes).forEach(typeModifiers => {\r\n              const filtered = typeModifiers.filter(\r\n                mod => mod.Name === nameFilter\r\n              );\r\n              result.prefixes = [...result.prefixes, ...filtered];\r\n            });\r\n          }\r\n        }\r\n\r\n        if (filterType === \"all\" || filterType === \"suffix\") {\r\n          if (\r\n            searchContext === \"builder\" &&\r\n            selectedType &&\r\n            modData.suffixes[selectedType]\r\n          ) {\r\n            const filtered = modData.suffixes[selectedType].filter(\r\n              mod => mod.Name === nameFilter || mod.Name === `of ${nameFilter}`\r\n            );\r\n            result.suffixes = [...result.suffixes, ...filtered];\r\n          } else {\r\n            Object.values(modData.suffixes).forEach(typeModifiers => {\r\n              const filtered = typeModifiers.filter(\r\n                mod => mod.Name === nameFilter || mod.Name === `of ${nameFilter}`\r\n              );\r\n              result.suffixes = [...result.suffixes, ...filtered];\r\n            });\r\n          }\r\n        }\r\n      });\r\n      \r\n      return result;\r\n    }\r\n\r\n    // By text search\r\n    if (searchTerm) {\r\n      const lowerTerm = searchTerm.toLowerCase();\r\n      const result = { prefixes: [], suffixes: [] };\r\n      \r\n      if (filterType === \"all\" || filterType === \"prefix\") {\r\n        let filteredPrefixes = [];\r\n        \r\n        if (\r\n          searchContext === \"builder\" &&\r\n          selectedType &&\r\n          modData.prefixes[selectedType]\r\n        ) {\r\n          filteredPrefixes = modData.prefixes[selectedType].filter(\r\n            prefix =>\r\n              prefix.Name.toLowerCase().includes(lowerTerm) ||\r\n              prefix.Mod.toLowerCase().includes(lowerTerm)\r\n          );\r\n        } else {\r\n          const allPrefixes = Object.values(modData.prefixes).flat();\r\n          filteredPrefixes = allPrefixes.filter(\r\n            prefix =>\r\n              prefix.Name.toLowerCase().includes(lowerTerm) ||\r\n              prefix.Mod.toLowerCase().includes(lowerTerm)\r\n          );\r\n        }\r\n        \r\n        result.prefixes = sortByRelevance(filteredPrefixes, searchTerm);\r\n      }\r\n\r\n      if (filterType === \"all\" || filterType === \"suffix\") {\r\n        let filteredSuffixes = [];\r\n        \r\n        if (\r\n          searchContext === \"builder\" &&\r\n          selectedType &&\r\n          modData.suffixes[selectedType]\r\n        ) {\r\n          filteredSuffixes = modData.suffixes[selectedType].filter(\r\n            suffix =>\r\n              suffix.Name.toLowerCase().includes(lowerTerm) ||\r\n              suffix.Mod.toLowerCase().includes(lowerTerm)\r\n          );\r\n        } else {\r\n          const allSuffixes = Object.values(modData.suffixes).flat();\r\n          filteredSuffixes = allSuffixes.filter(\r\n            suffix =>\r\n              suffix.Name.toLowerCase().includes(lowerTerm) ||\r\n              suffix.Mod.toLowerCase().includes(lowerTerm)\r\n          );\r\n        }\r\n        \r\n        result.suffixes = sortByRelevance(filteredSuffixes, searchTerm);\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    return { prefixes: [], suffixes: [] };\r\n  }, [\r\n    searchTerm,\r\n    filterType,\r\n    modData,\r\n    selectedType,\r\n    viewByName,\r\n    selectedNames,\r\n    searchContext,\r\n    sortByRelevance\r\n  ]);\r\n\r\n  // Name tags for display in the cloud\r\n  const nameTagsToDisplay = useMemo(() => {\r\n    const getGroupForName = name => nameToGroupMap[name] || null;\r\n    let names = [];\r\n    \r\n    if (filterType === \"all\") names = combinedUniqueNames;\r\n    else if (filterType === \"prefix\") names = modifierNames.prefixes;\r\n    else names = modifierNames.suffixes;\r\n\r\n    const result = [];\r\n    const processedGroups = new Set();\r\n\r\n    names.forEach(name => {\r\n      const group = getGroupForName(name);\r\n      if (group && !processedGroups.has(group)) {\r\n        result.push({ isGroup: true, name: group });\r\n        processedGroups.add(group);\r\n      } else if (!group) {\r\n        result.push({ isGroup: false, name });\r\n      }\r\n    });\r\n\r\n    return result.sort((a, b) => a.name.localeCompare(b.name));\r\n  }, [filterType, modifierNames, combinedUniqueNames, nameToGroupMap]);\r\n\r\n  // Filter name tags based on search\r\n  const filteredNameTags = useMemo(() => {\r\n    if (nameSearchTerm === \"\") return nameTagsToDisplay;\r\n    \r\n    const lowerSearchTerm = nameSearchTerm.toLowerCase();\r\n    return nameTagsToDisplay.filter(item => {\r\n      if (item.isGroup) {\r\n        return (\r\n          item.name.toLowerCase().includes(lowerSearchTerm) ||\r\n          (modifierGroups[item.name] || []).some(name =>\r\n            name.toLowerCase().includes(lowerSearchTerm)\r\n          )\r\n        );\r\n      }\r\n      return item.name.toLowerCase().includes(lowerSearchTerm);\r\n    });\r\n  }, [nameTagsToDisplay, nameSearchTerm, modifierGroups]);\r\n\r\n  // Calculate selection count for display\r\n  const selectionCount = useMemo(() => {\r\n    return (\r\n      selectedGroupNames.length +\r\n      selectedNames.filter(\r\n        name =>\r\n          !selectedGroupNames.some(group =>\r\n            (modifierGroups[group] || []).includes(name)\r\n          )\r\n      ).length\r\n    );\r\n  }, [selectedNames, selectedGroupNames, modifierGroups]);\r\n\r\n  // Render name selection view\r\n  const renderNameSelectionView = () => (\r\n    <>\r\n      <div className=\"mb-3 flex space-x-2\">\r\n        <FilterTypeSelect filterType={filterType} onChange={handleFilterTypeChange} />\r\n      </div>\r\n\r\n      {/* Name search filter */}\r\n      <div className=\"mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          className=\"w-full bg-slate-700 p-2.5 rounded-md border-0 text-sm ring-1 ring-slate-600 focus:ring-2 focus:ring-indigo-500 outline-none\"\r\n          value={nameSearchTerm}\r\n          onChange={handleNameSearchChange}\r\n          placeholder=\"Filter modifier names...\"\r\n        />\r\n      </div>\r\n\r\n      {/* Selection count display */}\r\n      {selectionCount > 0 && (\r\n        <SelectionIndicator count={selectionCount} onClear={handleClearSelections} />\r\n      )}\r\n\r\n      {/* Name tag cloud */}\r\n      <div className=\"flex flex-wrap gap-2 max-h-52 overflow-y-auto rounded-md px-1 py-2 custom-scrollbar\">\r\n        {filteredNameTags.map(item => {\r\n          const isSelected = item.isGroup\r\n            ? (modifierGroups[item.name] || []).some(name =>\r\n                selectedNames.includes(name)\r\n              )\r\n            : selectedNames.includes(item.name);\r\n\r\n          const isFullySelected = item.isGroup\r\n            ? (modifierGroups[item.name] || []).every(name =>\r\n                selectedNames.includes(name)\r\n              )\r\n            : isSelected;\r\n\r\n          return (\r\n            <NameTag\r\n              key={`name-tag-${item.isGroup ? \"group-\" : \"\"}${item.name}`}\r\n              item={item}\r\n              isSelected={isSelected}\r\n              isFullySelected={isFullySelected}\r\n              onClick={handleNameSelection}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </>\r\n  );\r\n\r\n  // Render text search view\r\n  const renderTextSearchView = () => (\r\n    <div className=\"flex\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"flex-grow bg-slate-700 p-2.5 rounded-l-md border-0 text-sm ring-1 ring-slate-600 focus:ring-2 focus:ring-indigo-500 outline-none\"\r\n        value={searchTerm}\r\n        onChange={handleSearchTermChange}\r\n        placeholder=\"Search for modifiers...\"\r\n      />\r\n      <select\r\n        className=\"bg-slate-700 p-2.5 rounded-r-md border-0 border-l-0 text-sm ring-1 ring-slate-600 focus:ring-2 focus:ring-indigo-500 outline-none\"\r\n        value={filterType}\r\n        onChange={handleFilterTypeChange}\r\n      >\r\n        <option value=\"all\">All</option>\r\n        <option value=\"prefix\">Prefixes</option>\r\n        <option value=\"suffix\">Suffixes</option>\r\n      </select>\r\n    </div>\r\n  );\r\n\r\n  // Render results by name\r\n  const renderResultsByName = () => (\r\n    <div className=\"space-y-5 px-3 pb-3\">\r\n      {Array.from(new Set(selectedNames))\r\n        .sort()\r\n        .map(name => {\r\n          const prefixesForName = filteredModifiers.prefixes.filter(p => p.Name === name);\r\n          const suffixesForName = filteredModifiers.suffixes.filter(\r\n            s => s.Name === name || s.Name === `of ${name}`\r\n          );\r\n          \r\n          const hasModifiers = prefixesForName.length > 0 || suffixesForName.length > 0;\r\n          \r\n          return (\r\n            <div\r\n              key={`name-group-${name}`}\r\n              className=\"border-t border-slate-700 pt-4 mt-4\"\r\n            >\r\n              <h3 className=\"font-medium text-amber-400 mb-3 text-base px-1\">\r\n                {name}\r\n              </h3>\r\n              {hasModifiers ? (\r\n                <div className=\"max-h-[400px] overflow-y-auto p-2 custom-scrollbar\">\r\n                  <div className=\"grid grid-cols-2 gap-2\">\r\n                    {prefixesForName.map((prefix, index) => (\r\n                      <ModifierCard\r\n                        key={`prefix-${prefix.id}-${index}`}\r\n                        modifier={{ ...prefix, type: \"prefix\" }}\r\n                        inModifierList={getModifierCount(prefix)}\r\n                        searchContext={searchContext}\r\n                        onClick={onAddModifier}\r\n                        onRemove={onRemoveModifier}\r\n                      />\r\n                    ))}\r\n                    {suffixesForName.map((suffix, index) => (\r\n                      <ModifierCard\r\n                        key={`suffix-${suffix.id}-${index}`}\r\n                        modifier={{ ...suffix, type: \"suffix\" }}\r\n                        inModifierList={getModifierCount(suffix)}\r\n                        searchContext={searchContext}\r\n                        onClick={onAddModifier}\r\n                        onRemove={onRemoveModifier}\r\n                      />\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ) : (\r\n                <div className=\"text-slate-400 py-3 text-sm px-1\">\r\n                  No modifiers found for \"{name}\" with current idol type\r\n                </div>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n\r\n  // Render search results\r\n  const renderSearchResults = () => {\r\n    const hasPrefixes = filteredModifiers.prefixes.length > 0;\r\n    const hasSuffixes = filteredModifiers.suffixes.length > 0;\r\n    const hasSearch = searchTerm || selectedNames.length > 0;\r\n    const noResults = hasSearch && !hasPrefixes && !hasSuffixes;\r\n    \r\n    return (\r\n      <div className=\"space-y-4 px-3 pb-3\">\r\n        {/* Prefix Section */}\r\n        {hasPrefixes && (\r\n          <div>\r\n            <h3 className=\"font-medium text-blue-400 text-sm px-1 mb-2\">\r\n              Prefixes ({filteredModifiers.prefixes.length})\r\n            </h3>\r\n            <div className=\"max-h-[400px] overflow-y-auto p-2 custom-scrollbar\">\r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                {filteredModifiers.prefixes.map((prefix, index) => (\r\n                  <ModifierCard\r\n                    key={`prefix-${prefix.id}-${index}`}\r\n                    modifier={{ ...prefix, type: \"prefix\" }}\r\n                    inModifierList={getModifierCount(prefix)}\r\n                    searchContext={searchContext}\r\n                    onClick={onAddModifier}\r\n                    onRemove={onRemoveModifier}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* Suffix Section */}\r\n        {hasSuffixes && (\r\n          <div>\r\n            <h3 className=\"font-medium text-green-400 text-sm px-1 mb-2\">\r\n              Suffixes ({filteredModifiers.suffixes.length})\r\n            </h3>\r\n            <div className=\"max-h-[400px] overflow-y-auto p-2 custom-scrollbar\">\r\n              <div className=\"grid grid-cols-2 gap-2\">\r\n                {filteredModifiers.suffixes.map((suffix, index) => (\r\n                  <ModifierCard\r\n                    key={`suffix-${suffix.id}-${index}`}\r\n                    modifier={{ ...suffix, type: \"suffix\" }}\r\n                    inModifierList={getModifierCount(suffix)}\r\n                    searchContext={searchContext}\r\n                    onClick={onAddModifier}\r\n                    onRemove={onRemoveModifier}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* No results message */}\r\n        {noResults && (\r\n          <p className=\"text-slate-400 py-2 text-sm text-center\">\r\n            No modifiers found matching \"{searchTerm || selectedNames.join(\", \")}\"\r\n          </p>\r\n        )}\r\n\r\n        {/* Help text when no search */}\r\n        {!hasSearch && (\r\n          <p className=\"text-slate-400 py-2 text-sm text-center\">\r\n            Enter search terms or select modifier name(s) to see results\r\n          </p>\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-slate-800 rounded-lg ring-1 ring-slate-700\">\r\n      {/* View mode toggle */}\r\n      <ModeToggleButtons viewByName={viewByName} handleViewModeChange={handleViewModeChange} />\r\n\r\n      {/* Browse by name interface */}\r\n      {viewByName ? (\r\n        <div className=\"px-3 pb-3\">\r\n          {renderNameSelectionView()}\r\n        </div>\r\n      ) : (\r\n        /* Search by text interface */\r\n        <div className=\"px-3 pb-3\">\r\n          {renderTextSearchView()}\r\n        </div>\r\n      )}\r\n\r\n      {/* Results display */}\r\n      {viewByName && selectedNames.length > 0 \r\n        ? renderResultsByName() \r\n        : renderSearchResults()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default memo(ModifierSearch);","// hooks/useModifiers.js\r\nimport { useState, useEffect, useMemo, useCallback, useContext } from 'react';\r\nimport { AppContext } from '../context/AppContext';\r\n\r\nexport const useModifiers = (initialState = null, onSearchUpdate = null, searchContext = 'builder') => {\r\n  const { modData } = useContext(AppContext);\r\n\r\n  // State management\r\n  const [searchTerm, setSearchTerm] = useState(initialState?.searchTerm || \"\");\r\n  const [filterType, setFilterType] = useState(initialState?.filterType || \"all\");\r\n  const [viewByName, setViewByName] = useState(initialState?.viewByName || false);\r\n  const [selectedNames, setSelectedNames] = useState(initialState?.selectedNames || []);\r\n  const [nameSearchTerm, setNameSearchTerm] = useState(\"\");\r\n  const [selectedGroupNames, setSelectedGroupNames] = useState([]);\r\n\r\n  // Constants\r\n  const modifierGroups = useMemo(() => ({\r\n    \"Bossing\": [\"Conqueror\", \"Shaper\", \"Maven\", \"Synthesis\", \"Elder\"],\r\n    \"Eldritch\": [\"Eater\", \"Exarch\"],\r\n    \"Mapping\": [\"Cartographer\", \"Kirac\", \"Scouting\"],\r\n  }), []);\r\n\r\n  // Computed values\r\n  const nameToGroupMap = useMemo(() =>\r\n    Object.entries(modifierGroups).reduce((mapping, [groupName, modNames]) => {\r\n      modNames.forEach(name => {\r\n        mapping[name] = groupName;\r\n      });\r\n      return mapping;\r\n    }, {}),\r\n    [modifierGroups]);\r\n\r\n  const modifierNames = useMemo(() => {\r\n    if (!modData.prefixes || !modData.suffixes) {\r\n      return { prefixes: [], suffixes: [] };\r\n    }\r\n\r\n    const prefixNames = new Set();\r\n    const suffixNames = new Set();\r\n\r\n    const shouldFilterByType = searchContext === \"builder\" && initialState?.selectedType;\r\n\r\n    if (shouldFilterByType) {\r\n      const selectedType = initialState.selectedType;\r\n\r\n      if (modData.prefixes[selectedType]) {\r\n        modData.prefixes[selectedType].forEach(mod => prefixNames.add(mod.Name));\r\n      }\r\n\r\n      if (modData.suffixes[selectedType]) {\r\n        modData.suffixes[selectedType].forEach(mod => suffixNames.add(mod.Name));\r\n      }\r\n    } else {\r\n      Object.values(modData.prefixes).forEach(typeModifiers => {\r\n        typeModifiers.forEach(mod => prefixNames.add(mod.Name));\r\n      });\r\n\r\n      Object.values(modData.suffixes).forEach(typeModifiers => {\r\n        typeModifiers.forEach(mod => suffixNames.add(mod.Name));\r\n      });\r\n    }\r\n\r\n    return {\r\n      prefixes: Array.from(prefixNames).sort(),\r\n      suffixes: Array.from(suffixNames).sort(),\r\n    };\r\n  }, [modData, initialState?.selectedType, searchContext]);\r\n\r\n  const combinedUniqueNames = useMemo(() => {\r\n    if (filterType !== \"all\") return [];\r\n\r\n    const uniqueNames = new Set([\r\n      ...modifierNames.prefixes,\r\n      ...modifierNames.suffixes,\r\n    ]);\r\n\r\n    return Array.from(uniqueNames).sort();\r\n  }, [modifierNames.prefixes, modifierNames.suffixes, filterType]);\r\n\r\n  const nameTagsToDisplay = useMemo(() => {\r\n    let names;\r\n    switch (filterType) {\r\n      case \"prefix\":\r\n        names = modifierNames.prefixes;\r\n        break;\r\n      case \"suffix\":\r\n        names = modifierNames.suffixes;\r\n        break;\r\n      default: // \"all\"\r\n        names = combinedUniqueNames;\r\n    }\r\n\r\n    const result = [];\r\n    const processedGroups = new Set();\r\n\r\n    names.forEach(name => {\r\n      const group = nameToGroupMap[name] || null;\r\n\r\n      if (group && !processedGroups.has(group)) {\r\n        result.push({ isGroup: true, name: group });\r\n        processedGroups.add(group);\r\n      } else if (!group) {\r\n        result.push({ isGroup: false, name });\r\n      }\r\n    });\r\n\r\n    return result.sort((a, b) => a.name.localeCompare(b.name));\r\n  }, [filterType, modifierNames, combinedUniqueNames, nameToGroupMap]);\r\n\r\n  // Callbacks\r\n  const getNamesInGroup = useCallback(\r\n    groupName => modifierGroups[groupName] || [],\r\n    [modifierGroups]\r\n  );\r\n\r\n  const handleSearchTermChange = useCallback(\r\n    e => setSearchTerm(e.target.value),\r\n    []\r\n  );\r\n\r\n  const handleFilterTypeChange = useCallback(\r\n    e => setFilterType(e.target.value),\r\n    []\r\n  );\r\n\r\n  const handleViewModeChange = useCallback(mode => {\r\n    setViewByName(mode);\r\n    setSelectedNames([]);\r\n  }, []);\r\n\r\n  const handleNameSelection = useCallback(item => {\r\n    if (item.isGroup) {\r\n      const groupNames = getNamesInGroup(item.name);\r\n      const allSelected = groupNames.every(name => selectedNames.includes(name));\r\n\r\n      if (allSelected) {\r\n        setSelectedNames(prevNames =>\r\n          prevNames.filter(name => !groupNames.includes(name))\r\n        );\r\n        setSelectedGroupNames(prev =>\r\n          prev.filter(name => name !== item.name)\r\n        );\r\n      } else {\r\n        setSelectedNames(prevNames => {\r\n          const newNames = [...prevNames];\r\n          groupNames.forEach(name => {\r\n            if (!newNames.includes(name)) {\r\n              newNames.push(name);\r\n            }\r\n          });\r\n          return newNames;\r\n        });\r\n\r\n        setSelectedGroupNames(prev => {\r\n          if (!prev.includes(item.name)) {\r\n            return [...prev, item.name];\r\n          }\r\n          return prev;\r\n        });\r\n      }\r\n    } else {\r\n      setSelectedNames(prevNames => {\r\n        if (prevNames.includes(item.name)) {\r\n          return prevNames.filter(n => n !== item.name);\r\n        }\r\n        return [...prevNames, item.name];\r\n      });\r\n    }\r\n  }, [selectedNames, getNamesInGroup]);\r\n\r\n  const getMatchPattern = useCallback(modText => {\r\n    const patterns = [\r\n      { type: \"plusChance\", regex: /\\+(\\d+(?:\\.\\d+)?)%\\s+chance/i },\r\n      { type: \"haveChance\", regex: /have\\s+(\\d+(?:\\.\\d+)?)%\\s+(?:increased\\s+)?chance/i },\r\n      { type: \"increased\", regex: /(\\d+(?:\\.\\d+)?)%\\s+increased/i },\r\n      { type: \"more\", regex: /(\\d+(?:\\.\\d+)?)%\\s+more/i },\r\n      { type: \"reduced\", regex: /(\\d+(?:\\.\\d+)?)%\\s+reduced/i },\r\n      { type: \"faster\", regex: /(\\d+(?:\\.\\d+)?)%\\s+faster/i },\r\n      { type: \"slower\", regex: /(\\d+(?:\\.\\d+)?)%\\s+slower/i },\r\n      { type: \"additional\", regex: /additional/i },\r\n      { type: \"numeric\", regex: /(\\d+(?:\\.\\d+)?)/ },\r\n    ];\r\n\r\n    for (const { type, regex } of patterns) {\r\n      const match = modText.match(regex);\r\n      if (match) {\r\n        const value = type !== \"additional\"\r\n          ? parseFloat(match[1])\r\n          : (modText.match(/(\\d+)/)?.[1] ? parseFloat(modText.match(/(\\d+)/)[1]) : 1);\r\n\r\n        return {\r\n          type,\r\n          value,\r\n          fullText: modText,\r\n        };\r\n      }\r\n    }\r\n\r\n    return { type: \"unstackable\", value: null, fullText: modText };\r\n  }, []);\r\n\r\n  const getBaseEffectKey = useCallback(modText => {\r\n    return modText\r\n      .replace(/(\\d+(?:\\.\\d+)?)(%|\\s|$)/g, \"X$2\")\r\n      .replace(/\\s+/g, \" \")\r\n      .trim();\r\n  }, []);\r\n\r\n  // Side effects\r\n  useEffect(() => {\r\n    if (!onSearchUpdate) return;\r\n\r\n    const timeoutId = setTimeout(() => {\r\n      onSearchUpdate({\r\n        searchTerm,\r\n        filterType,\r\n        viewByName,\r\n        selectedNames,\r\n      });\r\n    }, 50);\r\n\r\n    return () => clearTimeout(timeoutId);\r\n  }, [searchTerm, filterType, viewByName, selectedNames, onSearchUpdate]);\r\n\r\n  // Return hook API\r\n  return {\r\n    // State\r\n    searchTerm,\r\n    setSearchTerm,\r\n    filterType,\r\n    setFilterType,\r\n    viewByName,\r\n    setViewByName,\r\n    selectedNames,\r\n    setSelectedNames,\r\n    nameSearchTerm,\r\n    setNameSearchTerm,\r\n    selectedGroupNames,\r\n\r\n    // Handlers\r\n    handleSearchTermChange,\r\n    handleFilterTypeChange,\r\n    handleViewModeChange,\r\n    handleNameSelection,\r\n\r\n    // Computed values\r\n    modifierGroups,\r\n    nameToGroupMap,\r\n    getNamesInGroup,\r\n    modifierNames,\r\n    combinedUniqueNames,\r\n    nameTagsToDisplay,\r\n\r\n    // Utility functions\r\n    getMatchPattern,\r\n    getBaseEffectKey,\r\n  };\r\n};","// components/builder/IdolBuilder.jsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport ModifierSearch from \"../modifiers/ModifierSearch\";\r\n  \r\n  // GroupedTypeButtons component to handle specific idol type creation\r\n  const GroupedTypeButtons = ({ types, onCreateIdol }) => (\r\n    <div className=\"grid grid-cols-2 gap-4 mt-4\">\r\n      {types.map(type => (\r\n        <button\r\n          key={type}\r\n          className=\"py-3 px-4 bg-indigo-600 hover:bg-indigo-500 text-white rounded-md font-medium transition-colors\"\r\n          onClick={() => onCreateIdol(type)}\r\n        >\r\n          Create {type} Idol\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n  \r\n  // ModifierList component to handle selected modifiers display\r\n  const ModifierList = ({ items, onRemove, type }) => {\r\n    if (items.length === 0) {\r\n      return (\r\n        <div className=\"p-4 bg-slate-800 rounded-md text-sm text-slate-400 text-center mb-4 ring-1 ring-slate-700\">\r\n          No {type}es selected\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    return (\r\n      <ul className=\"mb-4 space-y-2\">\r\n        {items.map((item, index) => (\r\n          <li\r\n            key={index}\r\n            className=\"bg-slate-800 p-3 rounded-md flex justify-between ring-1 ring-slate-700\"\r\n            onContextMenu={(e) => {\r\n              e.preventDefault();\r\n              onRemove(index);\r\n            }}\r\n          >\r\n            <div>\r\n              <div className={`text-sm font-medium ${type === 'prefix' ? 'text-blue-400' : 'text-green-400'}`}>\r\n                {item.Name}\r\n              </div>\r\n              <div className=\"text-xs text-slate-400 mt-1\">\r\n                {item.Mod}\r\n              </div>\r\n            </div>\r\n            <button\r\n              onClick={() => onRemove(index)}\r\n              className=\"text-slate-400 hover:text-slate-300 ml-2 self-start\"\r\n              title={`Remove ${type}`}\r\n            >\r\n              ✕\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n  \r\n  // ErrorMessage component\r\n  const ErrorMessage = ({ message }) => {\r\n    if (!message) return null;\r\n    \r\n    return (\r\n      <div className=\"bg-red-900/50 p-3 rounded-lg border border-red-800 text-red-200 text-sm\">\r\n        {message}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  function IdolBuilder({ modData, idolTypes, onAddIdol }) {\r\n    // Group idol types for the dropdown with size info\r\n    const groupedIdolTypes = useMemo(() => [\r\n      { label: \"Minor (1×1)\", value: \"Minor\" },\r\n      { label: \"Kamasan (1×2) • Noble (2×1)\", value: \"KamasanNoble\" },\r\n      { label: \"Totemic (1×3) • Burial (3×1)\", value: \"TotemicBurial\" },\r\n      { label: \"Conqueror (2×2)\", value: \"Conqueror\" },\r\n    ], []);\r\n  \r\n    // State for idol builder\r\n    const [selectedType, setSelectedType] = useState(\"\");\r\n    const [selectedPrefixes, setSelectedPrefixes] = useState([]);\r\n    const [selectedSuffixes, setSelectedSuffixes] = useState([]);\r\n    const [idolName, setIdolName] = useState(\"\");\r\n    const [error, setError] = useState(null);\r\n    const [errorTimeout, setErrorTimeout] = useState(null);\r\n  \r\n    // Search state\r\n    const [searchState, setSearchState] = useState({\r\n      searchTerm: \"\",\r\n      filterType: \"all\",\r\n      viewByName: false,\r\n      selectedNames: [],\r\n    });\r\n  \r\n    // Determine if we're using a grouped type\r\n    const isGroupedType = useMemo(() => \r\n      selectedType === \"KamasanNoble\" || selectedType === \"TotemicBurial\", \r\n      [selectedType]\r\n    );\r\n    \r\n    // Determine which specific types to show buttons for\r\n    const specificTypes = useMemo(() => {\r\n      if (selectedType === \"KamasanNoble\") return [\"Kamasan\", \"Noble\"];\r\n      if (selectedType === \"TotemicBurial\") return [\"Totemic\", \"Burial\"];\r\n      return [];\r\n    }, [selectedType]);\r\n  \r\n    // Reset modifiers when type changes\r\n    useEffect(() => {\r\n      setSelectedPrefixes([]);\r\n      setSelectedSuffixes([]);\r\n      setError(null);\r\n    }, [selectedType]);\r\n    \r\n    // Clean up timeout on unmount\r\n    useEffect(() => {\r\n      return () => {\r\n        if (errorTimeout) clearTimeout(errorTimeout);\r\n      };\r\n    }, [errorTimeout]);\r\n  \r\n    // Fixed function to check for exclusive modifier pairs\r\n    const areExclusiveModifiers = useCallback((mod1, mod2) => {\r\n      // First check if names match and are among the known exclusive modifier types\r\n      if (!mod1 || !mod2 || mod1.Name !== mod2.Name) return { exclusive: false };\r\n      \r\n      const exclusiveModNames = [\"Breach\", \"Domination\", \"Essence\", \"Harbinger\", \"Ambush\", \"Torment\"];\r\n      if (!exclusiveModNames.includes(mod1.Name)) return { exclusive: false };\r\n      \r\n      // Now check specific mod text patterns that should be exclusive\r\n      const exactExclusivePairs = [\r\n        {\r\n          name: \"Breach\",\r\n          patterns: [\r\n            \"Breaches in your Maps contain 3 additional Clasped Hands\",\r\n            \"Breaches in your Maps contain 2 additional Clasped Hands\"\r\n          ]\r\n        },\r\n        {\r\n          name: \"Domination\",\r\n          patterns: [\r\n            \"Your Maps contain an additional Shrine\",\r\n            \"Your Maps contain 2 additional Shrines\"\r\n          ]\r\n        },\r\n        {\r\n          name: \"Essence\",\r\n          patterns: [\r\n            \"Your Maps contain an additional Imprisoned Monster\",\r\n            \"Your Maps contain 2 additional Imprisoned Monsters\"\r\n          ]\r\n        },\r\n        {\r\n          name: \"Harbinger\",\r\n          patterns: [\r\n            \"Your Maps contain an additional Harbinger\",\r\n            \"Your Maps contain 2 additional Harbingers\"\r\n          ]\r\n        },\r\n        {\r\n          name: \"Ambush\",\r\n          patterns: [\r\n            \"Your Maps contain an additional Strongbox\",\r\n            \"Your Maps contain 2 additional Strongboxes\"\r\n          ]\r\n        },\r\n        {\r\n          name: \"Torment\",\r\n          patterns: [\r\n            \"Your Maps are haunted by an additional Tormented Spirit\",\r\n            \"Your Maps are haunted by 2 additional Tormented Spirits\"\r\n          ]\r\n        }\r\n      ];\r\n      \r\n      // Find the relevant pattern set for this modifier name\r\n      const patternSet = exactExclusivePairs.find(set => set.name === mod1.Name);\r\n      if (!patternSet) return { exclusive: false };\r\n      \r\n      // Check if both modifiers match patterns from the same set and are different from each other\r\n      const mod1MatchesPattern = patternSet.patterns.includes(mod1.Mod);\r\n      const mod2MatchesPattern = patternSet.patterns.includes(mod2.Mod);\r\n      \r\n      if (mod1MatchesPattern && mod2MatchesPattern && mod1.Mod !== mod2.Mod) {\r\n        return { exclusive: true, name: patternSet.name };\r\n      }\r\n      \r\n      return { exclusive: false };\r\n    }, []);\r\n  \r\n    // Handle adding a modifier\r\n    const handleAddModifier = useCallback((modifier, type) => {\r\n      // Clear any existing error\r\n      setError(null);\r\n      if (errorTimeout) {\r\n        clearTimeout(errorTimeout);\r\n        setErrorTimeout(null);\r\n      }\r\n      \r\n      if (type === \"prefix\") {\r\n        // Can only have 2 prefixes max\r\n        if (selectedPrefixes.length < 2) {\r\n          // Check for exclusive modifiers\r\n          for (const existingPrefix of selectedPrefixes) {\r\n            const result = areExclusiveModifiers(existingPrefix, modifier);\r\n            if (result.exclusive) {\r\n              const errorMsg = `Cannot add multiple ${result.name} modifiers that add different amounts to the same idol.`;\r\n              setError(errorMsg);\r\n              const timeout = setTimeout(() => setError(null), 5000);\r\n              setErrorTimeout(timeout);\r\n              return;\r\n            }\r\n          }\r\n          \r\n          // Don't add duplicates\r\n          if (!selectedPrefixes.some((p) => p.id === modifier.id)) {\r\n            setSelectedPrefixes(prev => [...prev, modifier]);\r\n          }\r\n        }\r\n      } else if (type === \"suffix\") {\r\n        // Can only have 2 suffixes max\r\n        if (selectedSuffixes.length < 2) {\r\n          // Check for exclusive modifiers\r\n          for (const existingSuffix of selectedSuffixes) {\r\n            const result = areExclusiveModifiers(existingSuffix, modifier);\r\n            if (result.exclusive) {\r\n              const errorMsg = `Cannot add multiple ${result.name} modifiers that add different amounts to the same idol.`;\r\n              setError(errorMsg);\r\n              const timeout = setTimeout(() => setError(null), 5000);\r\n              setErrorTimeout(timeout);\r\n              return;\r\n            }\r\n          }\r\n          \r\n          // Don't add duplicates\r\n          if (!selectedSuffixes.some((s) => s.id === modifier.id)) {\r\n            setSelectedSuffixes(prev => [...prev, modifier]);\r\n          }\r\n        }\r\n      }\r\n    }, [selectedPrefixes, selectedSuffixes, areExclusiveModifiers, errorTimeout]);\r\n  \r\n    // Remove prefix\r\n    const handleRemovePrefix = useCallback((index) => {\r\n      setSelectedPrefixes(prev => prev.filter((_, i) => i !== index));\r\n      setError(null);\r\n    }, []);\r\n  \r\n    // Remove suffix\r\n    const handleRemoveSuffix = useCallback((index) => {\r\n      setSelectedSuffixes(prev => prev.filter((_, i) => i !== index));\r\n      setError(null);\r\n    }, []);\r\n  \r\n    // Remove a specific modifier\r\n    const handleRemoveModifier = useCallback((modifier) => {\r\n      if (modifier.type === \"prefix\") {\r\n        setSelectedPrefixes(prev => prev.filter(p => p.id !== modifier.id));\r\n      } else {\r\n        setSelectedSuffixes(prev => prev.filter(s => s.id !== modifier.id));\r\n      }\r\n      setError(null);\r\n    }, []);\r\n  \r\n    // Generate a default name based on prefixes and suffixes\r\n    const generateIdolName = useCallback((type, prefixes, suffixes) => {\r\n      let name = type;\r\n  \r\n      if (prefixes.length > 0) {\r\n        name = `${prefixes[0].Name} ${name}`;\r\n      }\r\n  \r\n      if (suffixes.length > 0) {\r\n        name = `${name} ${suffixes[0].Name}`;\r\n      }\r\n  \r\n      return name;\r\n    }, []);\r\n  \r\n    // Create new idol with specific type\r\n    const handleCreateIdol = useCallback((specificType = null) => {\r\n      // Use either the specific type passed in or the selected type\r\n      const idolType = specificType || selectedType;\r\n      \r\n      if (!idolType) return;\r\n  \r\n      // Generate a name if not provided\r\n      const name = idolName || generateIdolName(idolType, selectedPrefixes, selectedSuffixes);\r\n  \r\n      const newIdol = {\r\n        type: idolType,\r\n        name,\r\n        prefixes: selectedPrefixes,\r\n        suffixes: selectedSuffixes,\r\n      };\r\n  \r\n      onAddIdol(newIdol);\r\n  \r\n      // Reset form\r\n      setIdolName(\"\");\r\n      setSelectedPrefixes([]);\r\n      setSelectedSuffixes([]);\r\n    }, [selectedType, idolName, selectedPrefixes, selectedSuffixes, generateIdolName, onAddIdol]);\r\n  \r\n    // Get type-specific modifiers\r\n    const getTypeSpecificMods = useCallback(() => {\r\n      if (!selectedType || !modData.prefixes || !modData.suffixes) {\r\n        return { prefixes: {}, suffixes: {} };\r\n      }\r\n  \r\n      // For grouped types, use just one of the types since they share the same modifiers\r\n      if (selectedType === \"KamasanNoble\") {\r\n        return {\r\n          prefixes: { KamasanNoble: modData.prefixes[\"Kamasan\"] || [] },\r\n          suffixes: { KamasanNoble: modData.suffixes[\"Kamasan\"] || [] }\r\n        };\r\n      } else if (selectedType === \"TotemicBurial\") {\r\n        return {\r\n          prefixes: { TotemicBurial: modData.prefixes[\"Burial\"] || [] },\r\n          suffixes: { TotemicBurial: modData.suffixes[\"Burial\"] || [] }\r\n        };\r\n      }\r\n  \r\n      return {\r\n        prefixes: { [selectedType]: modData.prefixes[selectedType] || [] },\r\n        suffixes: { [selectedType]: modData.suffixes[selectedType] || [] },\r\n      };\r\n    }, [selectedType, modData.prefixes, modData.suffixes]);\r\n  \r\n    // Track search state changes\r\n    const handleSearchUpdate = useCallback((newState) => {\r\n      setSearchState(newState);\r\n    }, []);\r\n  \r\n    return (\r\n      <div className=\"bg-slate-900 p-5 rounded-xl shadow-sm\">\r\n        <h2 className=\"text-xl font-bold mb-1 text-white\">Idol Builder</h2>\r\n        <p className=\"text-sm text-slate-400 mb-4\">Create custom idols with specific modifiers to add to your inventory.</p>\r\n  \r\n        <div className=\"space-y-5\">\r\n          {/* Error message */}\r\n          <ErrorMessage message={error} />\r\n        \r\n          {/* Idol Type Selection */}\r\n          <div>\r\n            <label className=\"block mb-2 text-sm text-slate-300\">Idol Type</label>\r\n            <select\r\n              className=\"w-full bg-slate-800 p-3 rounded-md border-0 text-sm ring-1 ring-slate-700 focus:ring-2 focus:ring-indigo-500 outline-none\"\r\n              value={selectedType}\r\n              onChange={(e) => setSelectedType(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Idol Type</option>\r\n              {groupedIdolTypes.map((type) => (\r\n                <option key={type.value} value={type.value}>\r\n                  {type.label}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n  \r\n          {/* Idol Name */}\r\n          <div>\r\n            <label className=\"block mb-2 text-sm text-slate-300\">Idol Name (Optional)</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"w-full bg-slate-800 p-3 rounded-md border-0 text-sm ring-1 ring-slate-700 focus:ring-2 focus:ring-indigo-500 outline-none\"\r\n              value={idolName}\r\n              onChange={(e) => setIdolName(e.target.value)}\r\n              placeholder=\"Custom Idol Name\"\r\n            />\r\n          </div>\r\n  \r\n          {selectedType && (\r\n            <>\r\n              {/* Selected Prefixes */}\r\n              <div className=\"border-t border-slate-800 pt-4\">\r\n                <h3 className=\"font-medium mb-2 text-sm text-slate-300\">\r\n                  Selected Prefixes ({selectedPrefixes.length}/2)\r\n                </h3>\r\n                <ModifierList \r\n                  items={selectedPrefixes}\r\n                  onRemove={handleRemovePrefix}\r\n                  type=\"prefix\"\r\n                />\r\n              </div>\r\n  \r\n              {/* Selected Suffixes */}\r\n              <div className=\"border-t border-slate-800 pt-4\">\r\n                <h3 className=\"font-medium mb-2 text-sm text-slate-300\">\r\n                  Selected Suffixes ({selectedSuffixes.length}/2)\r\n                </h3>\r\n                <ModifierList \r\n                  items={selectedSuffixes}\r\n                  onRemove={handleRemoveSuffix}\r\n                  type=\"suffix\"\r\n                />\r\n              </div>\r\n  \r\n              {/* Modifier Search */}\r\n              <div className=\"border-t border-slate-800 pt-4\">\r\n                <h3 className=\"font-medium mb-2 text-sm text-slate-300\">Search & Add Modifiers</h3>\r\n                <ModifierSearch\r\n                  modData={selectedType ? getTypeSpecificMods() : modData}\r\n                  onAddModifier={handleAddModifier}\r\n                  onRemoveModifier={handleRemoveModifier}\r\n                  selectedType={selectedType}\r\n                  initialState={searchState}\r\n                  onSearchUpdate={handleSearchUpdate}\r\n                  searchContext=\"builder\"\r\n                  selectedPrefixes={selectedPrefixes}\r\n                  selectedSuffixes={selectedSuffixes}\r\n                />\r\n              </div>\r\n  \r\n              {/* Create Buttons */}\r\n              {isGroupedType ? (\r\n                <GroupedTypeButtons \r\n                  types={specificTypes} \r\n                  onCreateIdol={handleCreateIdol} \r\n                />\r\n              ) : (\r\n                <button\r\n                  className=\"w-full mt-4 py-3 px-4 bg-indigo-600 hover:bg-indigo-500 text-white rounded-md font-medium transition-colors\"\r\n                  onClick={() => handleCreateIdol()}\r\n                  disabled={!selectedType}\r\n                >\r\n                  Create Idol\r\n                </button>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default IdolBuilder;","// components/common/Modal.jsx\r\nimport React, { useEffect } from \"react\";\r\n\r\nconst MAX_WIDTH_CLASSES = {\r\n  sm: \"max-w-sm\",\r\n  md: \"max-w-md\",\r\n  lg: \"max-w-lg\",\r\n  xl: \"max-w-xl\",\r\n  \"2xl\": \"max-w-2xl\",\r\n  \"3xl\": \"max-w-3xl\",\r\n  \"4xl\": \"max-w-4xl\",\r\n  \"5xl\": \"max-w-5xl\",\r\n  full: \"max-w-full\",\r\n};\r\n\r\nconst Modal = ({ \r\n  isOpen, \r\n  onClose, \r\n  title, \r\n  children, \r\n  actions,\r\n  maxWidth = \"md\",\r\n  className = \"\",\r\n}) => {\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === \"Escape\") {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    if (isOpen) {\r\n      document.addEventListener(\"keydown\", handleKeyDown);\r\n    }\r\n    \r\n    return () => {\r\n      document.removeEventListener(\"keydown\", handleKeyDown);\r\n    };\r\n  }, [isOpen, onClose]);\r\n\r\n  if (!isOpen) return null;\r\n  \r\n  const maxWidthClass = MAX_WIDTH_CLASSES[maxWidth] || MAX_WIDTH_CLASSES.md;\r\n  \r\n  return (\r\n    <div className=\"fixed inset-0 bg-slate-950 bg-opacity-80 z-50 flex items-center justify-center p-4 backdrop-blur-sm\">\r\n      <div className={`bg-slate-900 rounded-xl p-6 w-full shadow-lg border border-slate-800 ${maxWidthClass} ${className}`}>\r\n        <div className=\"flex justify-between items-start mb-5\">\r\n          <h2 className=\"text-xl font-bold text-white\">{title}</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-slate-400 hover:text-white transition-colors\"\r\n            aria-label=\"Close\"\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"mb-6\">\r\n          {children}\r\n        </div>\r\n\r\n        {actions && (\r\n          <div className=\"flex justify-end space-x-3\">\r\n            {actions}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(Modal);","// utils/modifiers/extractModifiersFromInventory.js\r\n\r\nimport { areModsEquivalent, determineModifierType } from \"./modifierUtils\";\r\n\r\n/**\r\n * Extracts and aggregates modifiers from inventory items\r\n * @param {Array} inventory - Array of idol items\r\n * @param {Object} modData - Object containing prefix and suffix data\r\n * @returns {Array} - Array of aggregated modifiers with counts\r\n */\r\nexport function extractModifiersFromInventory(inventory, modData) {\r\n  // Early return if data is missing\r\n  if (!inventory?.length || !modData) return [];\r\n\r\n  // Filter out unique idols\r\n  const nonUniqueIdols = inventory.filter(idol => !idol.isUnique);\r\n\r\n  // Create a map for faster aggregation\r\n  const modifierMap = new Map();\r\n\r\n  // Process each non-unique idol\r\n  nonUniqueIdols.forEach(idol => {\r\n    const idolType = idol.type;\r\n\r\n    // Process prefixes\r\n    processModifiers(idol.prefixes, \"prefix\", idolType, modData, modifierMap);\r\n\r\n    // Process suffixes\r\n    processModifiers(idol.suffixes, \"suffix\", idolType, modData, modifierMap);\r\n  });\r\n\r\n  // Convert map to array\r\n  return Array.from(modifierMap.values());\r\n}\r\n\r\n/**\r\n * Process a list of modifiers, find canonical versions, and add to the map\r\n * @param {Array} modifiers - Array of prefix or suffix modifiers\r\n * @param {string} modType - Type of modifier (\"prefix\" or \"suffix\")\r\n * @param {string} idolType - Type of idol\r\n * @param {Object} modData - Modifier data object\r\n * @param {Map} modifierMap - Map to store and aggregate modifiers\r\n */\r\nfunction processModifiers(modifiers, modType, idolType, modData, modifierMap) {\r\n  if (!modifiers?.length) return;\r\n\r\n  modifiers.forEach(modifier => {\r\n    // Find canonical modifier\r\n    const canonicalMod = findCanonicalModifier(modifier, modType, idolType, modData);\r\n\r\n    if (canonicalMod) {\r\n      const modWithType = {\r\n        ...canonicalMod,\r\n        type: modType\r\n      };\r\n\r\n      // Use id as key for aggregation\r\n      const key = modWithType.id;\r\n\r\n      if (modifierMap.has(key)) {\r\n        // Increment count if modifier exists\r\n        const existingMod = modifierMap.get(key);\r\n        existingMod.count++;\r\n      } else {\r\n        // Add new modifier with count 1\r\n        modifierMap.set(key, { ...modWithType, count: 1 });\r\n      }\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Find the canonical version of a modifier from modData\r\n * @param {Object} userMod - User's modifier object\r\n * @param {string} modType - Type of modifier (\"prefix\" or \"suffix\")\r\n * @param {string} idolType - Type of idol\r\n * @param {Object} modData - Modifier data object\r\n * @returns {Object|null} - Canonical modifier or null if not found\r\n */\r\nfunction findCanonicalModifier(userMod, modType, idolType, modData) {\r\n  // Early return if userMod is not valid\r\n  if (!userMod || !userMod.Mod) return null;\r\n\r\n  // Get the relevant modifier collection based on type\r\n  const modCollection = modType === \"prefix\" ? modData.prefixes : modData.suffixes;\r\n\r\n  // Skip if collection doesn't exist\r\n  if (!modCollection) return null;\r\n\r\n  // First try to find by exact id or text match in the idol's type\r\n  if (modCollection[idolType]) {\r\n    const exactMatch = modCollection[idolType].find(mod =>\r\n      mod.id === userMod.id || mod.Mod === userMod.Mod\r\n    );\r\n    if (exactMatch) return exactMatch;\r\n\r\n    // Try to find an equivalent mod using areModsEquivalent\r\n    const equivalentMatch = modCollection[idolType].find(mod =>\r\n      areModsEquivalent(mod.Mod, userMod.Mod)\r\n    );\r\n    if (equivalentMatch) return equivalentMatch;\r\n  }\r\n\r\n  // Search across all idol types if not found in specific type\r\n  for (const type in modCollection) {\r\n    const typeMatch = modCollection[type].find(mod =>\r\n      areModsEquivalent(mod.Mod, userMod.Mod)\r\n    );\r\n    if (typeMatch) return typeMatch;\r\n  }\r\n\r\n  // If no match found, create a standardized version based on the user mod\r\n  const modifierType = determineModifierType(userMod.Mod);\r\n  return {\r\n    ...userMod,\r\n    type: modifierType,\r\n    id: userMod.id || `generated-${Date.now()}-${Math.random()}`\r\n  };\r\n}","// components/modifiers/DesiredModifiers.jsx\r\nimport React, { useState, useRef, useContext, useCallback, useMemo } from \"react\";\r\nimport ModifierSearch from \"./ModifierSearch\";\r\nimport Card from \"../common/Card\";\r\nimport Button from \"../common/Button\";\r\nimport Modal from \"../common/Modal\";\r\nimport { AppContext } from \"../../context/AppContext\";\r\nimport { extractModifiersFromInventory } from \"../../utils/modifiers/extractModifiersFromInventory\";\r\n\r\n// Key for local storage\r\nconst STORAGE_KEY = \"poe-idol-desired-modifiers\";\r\n\r\n// Loading indicator component\r\nconst LoadingSpinner = () => (\r\n  <span className=\"flex items-center justify-center gap-2\">\r\n    <svg\r\n      className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <circle\r\n        className=\"opacity-25\"\r\n        cx=\"12\"\r\n        cy=\"12\"\r\n        r=\"10\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"4\"\r\n      ></circle>\r\n      <path\r\n        className=\"opacity-75\"\r\n        fill=\"currentColor\"\r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n      ></path>\r\n    </svg>\r\n    Processing...\r\n  </span>\r\n);\r\n\r\n// Load icon component\r\nconst LoadIcon = () => (\r\n  <span className=\"flex items-center justify-center gap-2\">\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      className=\"h-5 w-5\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      stroke=\"currentColor\"\r\n    >\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z\"\r\n      />\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth={2}\r\n        d=\"M9 14l3-3m0 0l3 3m-3-3v9\"\r\n      />\r\n    </svg>\r\n    Load Modifiers from Inventory\r\n  </span>\r\n);\r\n\r\n// Modifier item component\r\nconst ModifierItem = ({ mod, index, onRemove }) => (\r\n  <li\r\n    className={`p-3 rounded-md flex justify-between items-start \r\n      ${\r\n        mod.type === \"prefix\"\r\n          ? \"bg-gradient-to-r from-blue-900/30 to-slate-800 border border-blue-800/50\"\r\n          : \"bg-gradient-to-r from-green-900/30 to-slate-800 border border-green-800/50\"\r\n      }`}\r\n    onContextMenu={(e) => {\r\n      e.preventDefault();\r\n      onRemove(index);\r\n    }}\r\n  >\r\n    <div>\r\n      <div className=\"text-sm\">\r\n        <span\r\n          className={\r\n            mod.type === \"prefix\"\r\n              ? \"text-blue-400 font-medium\"\r\n              : \"text-green-400 font-medium\"\r\n          }\r\n        >\r\n          {mod.type === \"prefix\" ? \"[Prefix]\" : \"[Suffix]\"}\r\n        </span>{\" \"}\r\n        <span className=\"text-white font-medium\">{mod.Name}</span>\r\n        {mod.count > 1 && (\r\n          <span className=\"ml-2 text-yellow-400 font-bold\">\r\n            ({mod.count}×)\r\n          </span>\r\n        )}\r\n      </div>\r\n      <div className=\"text-[11px] text-slate-400 mt-1\">\r\n        {mod.Mod}\r\n      </div>\r\n    </div>\r\n    <button\r\n      onClick={() => onRemove(index)}\r\n      className=\"text-slate-400 hover:text-red-400 ml-2 transition-colors\"\r\n    >\r\n      ✕\r\n    </button>\r\n  </li>\r\n);\r\n\r\nfunction DesiredModifiers({ modData, onGenerateIdols }) {\r\n  // Custom hook for localStorage\r\n  const useLocalStorage = (key, initialValue) => {\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {\r\n        const item = localStorage.getItem(key);\r\n        return item ? JSON.parse(item) : initialValue;\r\n      } catch (error) {\r\n        console.error(\"Failed to load from localStorage:\", error);\r\n        return initialValue;\r\n      }\r\n    });\r\n\r\n    const setValue = (value) => {\r\n      try {\r\n        setStoredValue(value);\r\n        localStorage.setItem(key, JSON.stringify(value));\r\n      } catch (error) {\r\n        console.error(\"Failed to save to localStorage:\", error);\r\n      }\r\n    };\r\n\r\n    return [storedValue, setValue];\r\n  };\r\n\r\n  // State using custom hook\r\n  const [desiredModifiers, setDesiredModifiers] = useLocalStorage(STORAGE_KEY, []);\r\n  const [showSearch, setShowSearch] = useState(false);\r\n  const [loadingFromInventory, setLoadingFromInventory] = useState(false);\r\n  const [isLoadModalOpen, setIsLoadModalOpen] = useState(false);\r\n  const [isClearModalOpen, setIsClearModalOpen] = useState(false);\r\n\r\n  const { inventory, handleClearInventoryExceptUniques } = useContext(AppContext);\r\n\r\n  // Use ref for search history to avoid rerenders\r\n  const searchHistoryRef = useRef({\r\n    searchTerm: \"\",\r\n    filterType: \"all\",\r\n    viewByName: false,\r\n    selectedNames: [],\r\n  });\r\n\r\n  // Calculate total modifier count - memoized to prevent recalculation on every render\r\n  const totalModifierCount = useMemo(() => \r\n    desiredModifiers.reduce((total, mod) => total + mod.count, 0), \r\n    [desiredModifiers]\r\n  );\r\n\r\n  // Check if we have non-unique idols in inventory - memoized\r\n  const hasNonUniqueIdols = useMemo(() => \r\n    inventory.some((idol) => !idol.isUnique), \r\n    [inventory]\r\n  );\r\n\r\n  // Handle adding a modifier - defined with useCallback to avoid recreation on each render\r\n  const handleAddModifier = useCallback((modifier, type) => {\r\n    setDesiredModifiers(currentModifiers => {\r\n      const existingIndex = currentModifiers.findIndex(\r\n        (mod) => mod.id === modifier.id\r\n      );\r\n\r\n      if (existingIndex >= 0) {\r\n        // Increment count if already exists\r\n        const updatedModifiers = [...currentModifiers];\r\n        updatedModifiers[existingIndex] = {\r\n          ...updatedModifiers[existingIndex],\r\n          count: (updatedModifiers[existingIndex].count || 1) + 1,\r\n        };\r\n        return updatedModifiers;\r\n      } else {\r\n        // Add as new with count = 1\r\n        return [...currentModifiers, { ...modifier, type, count: 1 }];\r\n      }\r\n    });\r\n  }, [setDesiredModifiers]);\r\n\r\n  // Handle removing a modifier - with useCallback\r\n  const handleRemoveModifier = useCallback((index) => {\r\n    setDesiredModifiers(currentModifiers => {\r\n      const mod = currentModifiers[index];\r\n\r\n      // If count > 1, decrement count\r\n      if (mod.count > 1) {\r\n        const updatedModifiers = [...currentModifiers];\r\n        updatedModifiers[index] = {\r\n          ...updatedModifiers[index],\r\n          count: updatedModifiers[index].count - 1,\r\n        };\r\n        return updatedModifiers;\r\n      } else {\r\n        // Otherwise remove the modifier\r\n        const newList = [...currentModifiers];\r\n        newList.splice(index, 1);\r\n        return newList;\r\n      }\r\n    });\r\n  }, [setDesiredModifiers]);\r\n\r\n  // Handle removing a modifier by direct reference - with useCallback\r\n  const handleRemoveModifierByRef = useCallback((modifierToRemove) => {\r\n    setDesiredModifiers(currentModifiers => {\r\n      const index = currentModifiers.findIndex(mod => mod.id === modifierToRemove.id);\r\n      if (index !== -1) {\r\n        if (currentModifiers[index].count > 1) {\r\n          const updatedModifiers = [...currentModifiers];\r\n          updatedModifiers[index] = {\r\n            ...updatedModifiers[index],\r\n            count: updatedModifiers[index].count - 1,\r\n          };\r\n          return updatedModifiers;\r\n        } else {\r\n          return currentModifiers.filter(mod => mod.id !== modifierToRemove.id);\r\n        }\r\n      }\r\n      return currentModifiers;\r\n    });\r\n  }, [setDesiredModifiers]);\r\n\r\n  // Load modifiers from inventory - with useCallback\r\n  const handleLoadFromInventory = useCallback(() => {\r\n    setLoadingFromInventory(true);\r\n\r\n    try {\r\n      // Extract modifiers from inventory\r\n      const extractedModifiers = extractModifiersFromInventory(\r\n        inventory,\r\n        modData\r\n      );\r\n\r\n      setDesiredModifiers(currentModifiers => {\r\n        // Merge with existing modifiers\r\n        const mergedModifiers = [...currentModifiers];\r\n\r\n        extractedModifiers.forEach((extractedMod) => {\r\n          const existingIndex = mergedModifiers.findIndex(\r\n            (mod) => mod.id === extractedMod.id\r\n          );\r\n\r\n          if (existingIndex >= 0) {\r\n            // Update count if modifier already exists\r\n            mergedModifiers[existingIndex] = {\r\n              ...mergedModifiers[existingIndex],\r\n              count:\r\n                (mergedModifiers[existingIndex].count || 0) + extractedMod.count,\r\n            };\r\n          } else {\r\n            // Add new modifier\r\n            mergedModifiers.push(extractedMod);\r\n          }\r\n        });\r\n\r\n        return mergedModifiers;\r\n      });\r\n\r\n      // Clear the grid and inventory (excluding unique idols)\r\n      handleClearInventoryExceptUniques();\r\n    } catch (error) {\r\n      console.error(\"Error loading modifiers from inventory:\", error);\r\n    } finally {\r\n      setLoadingFromInventory(false);\r\n    }\r\n  }, [inventory, modData, handleClearInventoryExceptUniques, setDesiredModifiers]);\r\n\r\n  // Generate idols from desired modifiers - with useCallback\r\n  const handleGenerateIdols = useCallback(() => {\r\n    if (desiredModifiers.length === 0) return;\r\n\r\n    // Create a clean copy of each modifier with its count\r\n    const modifiersToGenerate = desiredModifiers.map((mod) => ({\r\n      ...mod,\r\n      count: mod.count || 1, // Default to 1 if count is missing\r\n      // Ensure these fields are present as they might be used in generation\r\n      Name: mod.Name,\r\n      Mod: mod.Mod,\r\n      id: mod.id,\r\n      type: mod.type, // prefix or suffix\r\n    }));\r\n\r\n    // Generate idols\r\n    onGenerateIdols(modifiersToGenerate);\r\n\r\n    // Clear the desired modifiers list\r\n    setDesiredModifiers([]);\r\n  }, [desiredModifiers, onGenerateIdols, setDesiredModifiers]);\r\n\r\n  // Track search state changes - with useCallback\r\n  const handleSearchUpdate = useCallback((searchState) => {\r\n    searchHistoryRef.current = searchState;\r\n  }, []);\r\n\r\n  // Handler for clearing all modifiers - with useCallback\r\n  const handleClearAll = useCallback(() => {\r\n    setDesiredModifiers([]);\r\n    setIsClearModalOpen(false);\r\n  }, [setDesiredModifiers]);\r\n\r\n  return (\r\n    <Card title=\"Auto-Generate Idols\">\r\n      <div className=\"space-y-6\">\r\n        <p className=\"text-slate-300 text-sm\">\r\n          Add modifiers you want on your idols, then generate and place them\r\n          automatically. Click a modifier multiple times to increase its\r\n          quantity.\r\n        </p>\r\n\r\n        {/* Load from Inventory Button */}\r\n        <Button\r\n          variant={hasNonUniqueIdols ? \"amber\" : \"disabled\"}\r\n          onClick={() => setIsLoadModalOpen(true)}\r\n          disabled={!hasNonUniqueIdols || loadingFromInventory}\r\n          className=\"w-full py-3\"\r\n        >\r\n          {loadingFromInventory ? <LoadingSpinner /> : <LoadIcon />}\r\n        </Button>\r\n\r\n        {/* Clear All Button */}\r\n        {desiredModifiers.length > 0 && (\r\n          <Button\r\n            variant=\"danger\"\r\n            onClick={() => setIsClearModalOpen(true)}\r\n            className=\"w-full py-1\"\r\n          >\r\n            Clear All Desired Modifiers\r\n          </Button>\r\n        )}\r\n\r\n        {/* Display selected modifiers */}\r\n        {desiredModifiers.length > 0 ? (\r\n          <div className=\"border border-slate-700 rounded-lg p-4 mb-6\">\r\n            <h3 className=\"font-semibold text-base text-amber-400 border-l-4 border-amber-400 pl-2 mb-4\">\r\n              Desired Modifiers ({totalModifierCount})\r\n            </h3>\r\n            <ul className=\"max-h-60 overflow-y-auto space-y-2 pr-1 minimal-scrollbar\">\r\n              {desiredModifiers.map((mod, index) => (\r\n                <ModifierItem \r\n                  key={`${mod.id}-${index}`}\r\n                  mod={mod}\r\n                  index={index}\r\n                  onRemove={handleRemoveModifier}\r\n                />\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ) : (\r\n          <div className=\"text-slate-400 text-center p-6 border border-dashed border-slate-700 rounded-lg\">\r\n            No modifiers selected. Add modifiers to generate idols.\r\n          </div>\r\n        )}\r\n\r\n        {/* Generate button */}\r\n        <Button\r\n          variant={desiredModifiers.length === 0 ? \"disabled\" : \"amber\"}\r\n          onClick={handleGenerateIdols}\r\n          disabled={desiredModifiers.length === 0}\r\n          className=\"w-full py-3\"\r\n        >\r\n          Generate & Place Idols\r\n        </Button>\r\n\r\n        {desiredModifiers.length > 0 && (\r\n          <div className=\"mt-2 text-xs text-slate-400 text-center\">\r\n            This will create idols with these modifiers and place them on the\r\n            grid\r\n          </div>\r\n        )}\r\n\r\n        {/* Search controls */}\r\n        <div className=\"mb-4\">\r\n          <div className=\"flex justify-between items-center mb-3\">\r\n            <h3 className=\"font-medium text-base text-slate-300 border-l-4 border-slate-600 pl-2\">\r\n              Search Modifiers\r\n            </h3>\r\n            {showSearch && (\r\n              <button\r\n                onClick={() => setShowSearch(false)}\r\n                className=\"text-slate-400 hover:text-slate-300 transition-colors\"\r\n              >\r\n                {desiredModifiers.length > 0 ? \"Hide Search\" : \"✕ Close\"}\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          {showSearch ? (\r\n            <ModifierSearch\r\n              modData={modData}\r\n              onAddModifier={handleAddModifier}\r\n              onRemoveModifier={handleRemoveModifierByRef}\r\n              modifierList={desiredModifiers}\r\n              initialState={searchHistoryRef.current}\r\n              onSearchUpdate={handleSearchUpdate}\r\n              searchContext=\"autogen\"\r\n            />\r\n          ) : (\r\n            <Button\r\n              variant=\"secondary\"\r\n              onClick={() => setShowSearch(true)}\r\n              className=\"w-full\"\r\n            >\r\n              + Add Modifier\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Load Confirmation Modal */}\r\n      {isLoadModalOpen && (\r\n        <Modal\r\n          isOpen={isLoadModalOpen}\r\n          onClose={() => setIsLoadModalOpen(false)}\r\n          title=\"Load Modifiers Confirmation\"\r\n          actions={\r\n            <>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => setIsLoadModalOpen(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"amber\"\r\n                onClick={() => {\r\n                  setIsLoadModalOpen(false);\r\n                  handleLoadFromInventory();\r\n                }}\r\n              >\r\n                Confirm\r\n              </Button>\r\n            </>\r\n          }\r\n        >\r\n          <p>\r\n            This will extract modifiers from your inventory and add them to the\r\n            desired modifiers list. When generated, these modifiers will be\r\n            optimized across idols which could result in different combinations\r\n            than your original inventory. Some combinations may be more costly\r\n            to trade for. Do you want to continue?\r\n          </p>\r\n        </Modal>\r\n      )}\r\n\r\n      {/* Clear All Confirmation Modal */}\r\n      {isClearModalOpen && (\r\n        <Modal\r\n          isOpen={isClearModalOpen}\r\n          onClose={() => setIsClearModalOpen(false)}\r\n          title=\"Clear All Modifiers\"\r\n          actions={\r\n            <>\r\n              <Button\r\n                variant=\"secondary\"\r\n                onClick={() => setIsClearModalOpen(false)}\r\n              >\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                variant=\"red\"\r\n                onClick={handleClearAll}\r\n              >\r\n                Confirm\r\n              </Button>\r\n            </>\r\n          }\r\n        >\r\n          <p>Are you sure you want to clear all desired modifiers?</p>\r\n        </Modal>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default DesiredModifiers;","// components/inventory/IdolPasteHandler.jsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport Modal from \"../common/Modal\";\r\nimport Button from \"../common/Button\";\r\nimport { areModsEquivalent, determineModifierType } from \"../../utils/modifiers/modifierUtils\";\r\n\r\nconst IdolPasteHandler = ({ onAddIdol, modData }) => {\r\n  const [showPrompt, setShowPrompt] = useState(false);\r\n  const [parseError, setParseError] = useState(null);\r\n  const [parsedIdol, setParsedIdol] = useState(null);\r\n\r\n  // Cache modifier collections for improved performance\r\n  const allModifiers = useMemo(() => {\r\n    if (!modData?.prefixes || !modData?.suffixes) return { allPrefixes: [], allSuffixes: [], allMods: [] };\r\n    \r\n    const allPrefixes = Object.values(modData.prefixes).flat();\r\n    const allSuffixes = Object.values(modData.suffixes).flat();\r\n    \r\n    return {\r\n      allPrefixes,\r\n      allSuffixes,\r\n      allMods: [...allPrefixes, ...allSuffixes]\r\n    };\r\n  }, [modData]);\r\n\r\n  // Helper function to create a unique ID - memoized with useCallback\r\n  const createUniqueId = useCallback(() => `${Date.now()}-${Math.random()}`, []);\r\n\r\n  // Helper to construct modifiers - properly memoized\r\n  const constructModifiers = useCallback((modLines) => {\r\n    const { allMods } = allModifiers;\r\n    if (!allMods.length) return [];\r\n    \r\n    const result = [];\r\n    let currentMod = \"\";\r\n    let i = 0;\r\n    \r\n    while (i < modLines.length) {\r\n      const line = modLines[i].trim();\r\n      \r\n      if (currentMod === \"\") {\r\n        currentMod = line;\r\n        i++;\r\n        continue;\r\n      }\r\n      \r\n      const combinedMod = currentMod + \" \" + line;\r\n      const combinedIsKnown = allMods.some((m) => areModsEquivalent(m.Mod, combinedMod));\r\n      const current = currentMod;\r\n      const currentIsKnown = allMods.some((m) => areModsEquivalent(m.Mod, current));\r\n      \r\n      const nextLineStartsNewMod =\r\n        /^[A-Z]/.test(line) ||\r\n        line.includes(\"your Maps\") ||\r\n        line.includes(\"Maps\") ||\r\n        line.match(/^\\d+%/) ||\r\n        line.includes(\"chance to\");\r\n      \r\n      if (combinedIsKnown) {\r\n        currentMod = combinedMod;\r\n        i++;\r\n      } else if (currentIsKnown && nextLineStartsNewMod) {\r\n        result.push(currentMod);\r\n        currentMod = line;\r\n        i++;\r\n      } else {\r\n        let foundMatch = false;\r\n        for (let lookahead = 1; lookahead <= 3 && i + lookahead - 1 < modLines.length; lookahead++) {\r\n          const testMod = currentMod + \" \" + modLines.slice(i, i + lookahead).join(\" \");\r\n          if (allMods.some((m) => areModsEquivalent(m.Mod, testMod))) {\r\n            currentMod = testMod;\r\n            i += lookahead;\r\n            foundMatch = true;\r\n            break;\r\n          }\r\n        }\r\n        \r\n        if (!foundMatch) {\r\n          if (nextLineStartsNewMod) {\r\n            result.push(currentMod);\r\n            currentMod = line;\r\n          } else {\r\n            currentMod += \" \" + line;\r\n          }\r\n          i++;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (currentMod) {\r\n      result.push(currentMod);\r\n    }\r\n    \r\n    return result;\r\n  }, [allModifiers]);\r\n\r\n  // Process unique idol modifiers - properly memoized\r\n  const processUniqueModifiers = useCallback((lines, modStart, modEnd) => {\r\n    const uniqueModifiers = [];\r\n    \r\n    if (modStart !== -1 && modEnd !== -1) {\r\n      let currentMod = \"\";\r\n      for (let i = modStart; i < modEnd; i++) {\r\n        const line = lines[i].trim();\r\n        if (line && !line.includes(\"(implicit)\")) {\r\n          // Check if this line starts a new modifier\r\n          if (currentMod && (/^[A-Z0-9]/.test(line) || /^\\(/.test(line))) {\r\n            uniqueModifiers.push({\r\n              Mod: currentMod,\r\n              Name: \"Unique\",\r\n              id: `unique-${createUniqueId()}`,\r\n            });\r\n            currentMod = line;\r\n          } else {\r\n            // Add to current modifier with a space\r\n            currentMod = currentMod ? `${currentMod} ${line}` : line;\r\n          }\r\n        }\r\n      }\r\n      // Add the last modifier\r\n      if (currentMod) {\r\n        uniqueModifiers.push({\r\n          Mod: currentMod,\r\n          Name: \"Unique\",\r\n          id: `unique-${createUniqueId()}`,\r\n        });\r\n      }\r\n    }\r\n    \r\n    return uniqueModifiers;\r\n  }, [createUniqueId]);\r\n\r\n  // Process normal/magic idol modifiers - properly memoized\r\n  const processNormalModifiers = useCallback((processedModLines) => {\r\n    const { allPrefixes, allSuffixes } = allModifiers;\r\n    const prefixes = [];\r\n    const suffixes = [];\r\n\r\n    for (const modLine of processedModLines) {\r\n      if (!modLine) continue;\r\n\r\n      let found = false;\r\n\r\n      // Check if it's a known prefix\r\n      for (const prefix of allPrefixes) {\r\n        if (areModsEquivalent(prefix.Mod, modLine)) {\r\n          prefixes.push({ \r\n            ...prefix, \r\n            Mod: modLine\r\n          });\r\n          found = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!found) {\r\n        // Check if it's a known suffix\r\n        for (const suffix of allSuffixes) {\r\n          if (areModsEquivalent(suffix.Mod, modLine)) {\r\n            suffixes.push({ \r\n              ...suffix, \r\n              Mod: modLine\r\n            });\r\n            found = true;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If not found in known modifiers, classify as unknown\r\n      if (!found) {\r\n        if (determineModifierType(modLine) === \"prefix\") {\r\n          prefixes.push({\r\n            Name: \"Unknown Prefix\",\r\n            Mod: modLine,\r\n            id: `unknown-${createUniqueId()}`\r\n          });\r\n        } else {\r\n          suffixes.push({\r\n            Name: \"Unknown Suffix\",\r\n            Mod: modLine,\r\n            id: `unknown-${createUniqueId()}`\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return { prefixes, suffixes };\r\n  }, [allModifiers, createUniqueId]);\r\n\r\n  // Main parsing function - properly memoized with useCallback\r\n  const parseIdolText = useCallback((text) => {\r\n    try {\r\n      const lines = text.split(\"\\n\").filter((line) => line.trim() !== \"\");\r\n\r\n      if (!lines.some((line) => line.includes(\"Item Class: Idols\"))) {\r\n        return { success: false, error: \"Not an idol item\" };\r\n      }\r\n\r\n      // Extract basic item info\r\n      let name = \"\";\r\n      let type = \"\";\r\n      let itemLevel = 0;\r\n      let rarity = \"\";\r\n\r\n      const rarityLine = lines.find((line) => line.startsWith(\"Rarity:\"));\r\n      rarity = rarityLine ? rarityLine.replace(\"Rarity: \", \"\").trim() : \"\";\r\n\r\n      const rarityIndex = lines.findIndex((line) => line.startsWith(\"Rarity:\"));\r\n      if (rarityIndex >= 0 && rarityIndex + 1 < lines.length) {\r\n        name = lines[rarityIndex + 1].trim();\r\n      }\r\n\r\n      if (rarityIndex >= 0 && rarityIndex + 2 < lines.length) {\r\n        const typeLine = lines[rarityIndex + 2].trim();\r\n        if (typeLine.includes(\"Idol\")) {\r\n          type = typeLine.split(\" \")[0];\r\n        }\r\n      }\r\n\r\n      if (rarity.toLowerCase() === \"magic\" && name) {\r\n        const match = name.match(/(\\w+)\\s+Idol/i);\r\n        if (match && match[1]) type = match[1];\r\n      }\r\n\r\n      const itemLevelLine = lines.find((line) => line.includes(\"Item Level:\"));\r\n      if (itemLevelLine) {\r\n        const match = itemLevelLine.match(/Item Level: (\\d+)/);\r\n        if (match && match[1]) itemLevel = parseInt(match[1], 10);\r\n      }\r\n\r\n      // Find separator indices\r\n      const separatorIndices = lines\r\n        .map((line, index) => line.trim() === \"--------\" ? index : -1)\r\n        .filter(index => index !== -1);\r\n\r\n      // Handle unique idols\r\n      if (rarity.toLowerCase() === \"unique\") {\r\n        let modStart = -1;\r\n        let modEnd = -1;\r\n\r\n        // Find modifiers section\r\n        for (let i = 0; i < separatorIndices.length - 1; i++) {\r\n          if (lines.slice(separatorIndices[i] + 1, separatorIndices[i + 1]).some((l) => l.includes(\"(implicit)\"))) {\r\n            modStart = separatorIndices[i + 1] + 1;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if (modStart === -1) {\r\n          for (let i = 0; i < separatorIndices.length - 1; i++) {\r\n            if (lines.slice(separatorIndices[i] + 1, separatorIndices[i + 1]).some((l) => l.includes(\"Item Level:\"))) {\r\n              modStart = separatorIndices[i + 1] + 1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < separatorIndices.length - 1; i++) {\r\n          if (modStart !== -1 && separatorIndices[i] > modStart) {\r\n            modEnd = separatorIndices[i];\r\n            break;\r\n          }\r\n        }\r\n\r\n        const uniqueModifiers = processUniqueModifiers(lines, modStart, modEnd);\r\n\r\n        return {\r\n          success: true,\r\n          idol: {\r\n            type,\r\n            name,\r\n            isUnique: true,\r\n            uniqueModifiers,\r\n            uniqueName: name,\r\n            prefixes: [],\r\n            suffixes: [],\r\n            id: createUniqueId(),\r\n            itemLevel,\r\n          },\r\n        };\r\n      }\r\n\r\n      // Handle normal or magic idols\r\n      let modStart = -1;\r\n      let modEnd = -1;\r\n      \r\n      if (separatorIndices.length >= 4) {\r\n        modStart = separatorIndices[2] + 1;\r\n        modEnd = separatorIndices[3];\r\n      }\r\n\r\n      const modLines = [];\r\n      if (modStart !== -1 && modEnd !== -1) {\r\n        for (let i = modStart; i < modEnd; i++) {\r\n          const line = lines[i].trim();\r\n          if (line && !line.includes(\"(implicit)\")) {\r\n            modLines.push(line);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Process modifiers\r\n      const processedModLines = constructModifiers(modLines);\r\n      const { prefixes, suffixes } = processNormalModifiers(processedModLines);\r\n\r\n      return {\r\n        success: true,\r\n        idol: {\r\n          type,\r\n          name,\r\n          prefixes,\r\n          suffixes,\r\n          id: createUniqueId(),\r\n          isUnique: false,\r\n          itemLevel,\r\n          isMagic: rarity.toLowerCase() === \"magic\",\r\n        },\r\n      };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    }\r\n  }, [constructModifiers, processUniqueModifiers, processNormalModifiers, createUniqueId]);\r\n\r\n  // Handle paste events - stable function reference\r\n  const handlePaste = useCallback((e) => {\r\n    const target = e.target;\r\n    const isFormElement = target.tagName === \"INPUT\" || \r\n                          target.tagName === \"TEXTAREA\" || \r\n                          target.tagName === \"SELECT\" ||\r\n                          target.isContentEditable;\r\n    const hasEditableParent = target.closest('[contenteditable=\"true\"]');\r\n    \r\n    const rawText = e.clipboardData.getData(\"text\");\r\n    const normalizedText = rawText.trim().toLowerCase();\r\n\r\n    if (normalizedText.includes(\"item class: idols\")) {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n      const result = parseIdolText(rawText);\r\n      if (result.success) {\r\n        setParsedIdol(result.idol);\r\n        setParseError(null);\r\n      } else {\r\n        setParsedIdol(null);\r\n        setParseError(result.error);\r\n      }\r\n\r\n      setShowPrompt(true);\r\n    } else if (isFormElement || hasEditableParent) {\r\n      return;\r\n    }\r\n  }, [parseIdolText]);\r\n\r\n  // Paste handler effect - now with stable dependencies\r\n  useEffect(() => {\r\n    document.addEventListener(\"paste\", handlePaste, true);\r\n    return () => document.removeEventListener(\"paste\", handlePaste, true);\r\n  }, [handlePaste]); // handlePaste is memoized so this won't create unnecessary effects\r\n\r\n  const handleAddParsedIdol = useCallback(() => {\r\n    if (parsedIdol) {\r\n      onAddIdol(parsedIdol);\r\n      setShowPrompt(false);\r\n      setParsedIdol(null);\r\n    }\r\n  }, [parsedIdol, onAddIdol]);\r\n\r\n  const handleClose = useCallback(() => setShowPrompt(false), []);\r\n\r\n  if (!showPrompt) return null;\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={showPrompt}\r\n      onClose={handleClose}\r\n      title=\"Idol Detected\"\r\n    >\r\n      {parseError ? (\r\n        <IdolError error={parseError} />\r\n      ) : parsedIdol ? (\r\n        <IdolPreview idol={parsedIdol} />\r\n      ) : (\r\n        <IdolLoading />\r\n      )}\r\n\r\n      <div className=\"flex space-x-4 justify-end\">\r\n        <Button \r\n          variant=\"secondary\" \r\n          onClick={handleClose}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          variant=\"primary\"\r\n          onClick={handleAddParsedIdol}\r\n          disabled={!parsedIdol}\r\n        >\r\n          Add to Inventory\r\n        </Button>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\n// Extract UI components for better readability\r\nconst IdolError = ({ error }) => (\r\n  <div className=\"bg-red-900 bg-opacity-50 p-4 rounded-lg mb-5 border border-red-800\">\r\n    <p className=\"text-red-200\">Error parsing idol: {error}</p>\r\n  </div>\r\n);\r\n\r\nconst IdolLoading = () => (\r\n  <div className=\"mb-5\">\r\n    <p className=\"text-slate-300\">Parsing idol text...</p>\r\n  </div>\r\n);\r\n\r\nconst IdolPreview = ({ idol }) => (\r\n  <div className=\"mb-5\">\r\n    <p className=\"mb-3 text-slate-300\">Successfully parsed idol:</p>\r\n    <div className=\"bg-slate-800 p-4 rounded-lg\">\r\n      <div className=\"font-bold text-indigo-300\">{idol.name}</div>\r\n      <div className=\"text-slate-300\">{idol.type} Idol</div>\r\n\r\n      <div className=\"mt-3 space-y-3\">\r\n        {idol.isUnique ? (\r\n          <UniqueModifiers modifiers={idol.uniqueModifiers} />\r\n        ) : (\r\n          <>\r\n            <ModifierSection \r\n              title=\"Prefixes\" \r\n              titleColor=\"text-blue-400\" \r\n              modifiers={idol.prefixes} \r\n              emptyText=\"No prefixes\" \r\n            />\r\n            <ModifierSection \r\n              title=\"Suffixes\" \r\n              titleColor=\"text-green-400\" \r\n              modifiers={idol.suffixes} \r\n              emptyText=\"No suffixes\" \r\n            />\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst UniqueModifiers = ({ modifiers }) => (\r\n  <>\r\n    <div className=\"text-purple-400 font-semibold\">\r\n      Unique Modifiers:\r\n    </div>\r\n    {modifiers?.length > 0 ? (\r\n      <ul className=\"list-disc list-inside text-sm text-slate-300 space-y-1\">\r\n        {modifiers.map((mod, idx) => (\r\n          <li key={`unique-mod-${idx}`}>{mod.Mod}</li>\r\n        ))}\r\n      </ul>\r\n    ) : (\r\n      <div className=\"text-slate-400 text-sm\">\r\n        No modifiers found\r\n      </div>\r\n    )}\r\n  </>\r\n);\r\n\r\nconst ModifierSection = ({ title, titleColor, modifiers, emptyText }) => (\r\n  <>\r\n    <div className={`${titleColor} font-semibold`}>\r\n      {title}:\r\n    </div>\r\n    {modifiers?.length > 0 ? (\r\n      <ul className=\"list-disc list-inside text-sm text-slate-300 space-y-1\">\r\n        {modifiers.map((mod, idx) => (\r\n          <li key={`${title.toLowerCase()}-${idx}`}>{mod.Mod}</li>\r\n        ))}\r\n      </ul>\r\n    ) : (\r\n      <div className=\"text-slate-400 text-sm\">\r\n        {emptyText}\r\n      </div>\r\n    )}\r\n  </>\r\n);\r\n\r\nexport default IdolPasteHandler;","// components/common/ShareButton.jsx\r\nimport React, { useState, useCallback, useMemo } from \"react\";\r\nimport Button from \"./Button\";\r\nimport { generateShareableURL, copyToClipboard } from \"../../utils/storage/storageUtils\";\r\n\r\nconst ShareIcon = () => (\r\n  <svg\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    className=\"h-4 w-4\"\r\n    fill=\"none\"\r\n    viewBox=\"0 0 24 24\"\r\n    stroke=\"currentColor\"\r\n  >\r\n    <path\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      strokeWidth={2}\r\n      d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nconst Tooltip = ({ message }) => (\r\n  <div className=\"absolute left-1/2 -translate-x-1/2 top-full mt-2 p-2 bg-slate-800 text-white text-xs rounded-md shadow-lg z-10 whitespace-nowrap border border-slate-700\">\r\n    {message}\r\n  </div>\r\n);\r\n\r\nconst ShareButton = ({ gridState, inventory }) => {\r\n  const [showTooltip, setShowTooltip] = useState(false);\r\n  const [isCopying, setIsCopying] = useState(false);\r\n\r\n  const handleShare = useCallback(async () => {\r\n    setIsCopying(true);\r\n\r\n    try {\r\n      const shareableURL = generateShareableURL(gridState, inventory);\r\n      await copyToClipboard(shareableURL);\r\n      setShowTooltip(true);\r\n      \r\n      setTimeout(() => setShowTooltip(false), 3000);\r\n    } catch (error) {\r\n      console.error(\"Failed to share layout:\", error);\r\n    } finally {\r\n      setIsCopying(false);\r\n    }\r\n  }, [gridState, inventory]);\r\n\r\n  const buttonText = useMemo(() => \r\n    isCopying ? \"Copying...\" : \"Share Layout\", \r\n  [isCopying]);\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Button\r\n        variant=\"blue\"\r\n        onClick={handleShare}\r\n        disabled={isCopying}\r\n        title=\"Share your idol layout with a link\"\r\n        className=\"flex items-center gap-2\"\r\n      >\r\n        <ShareIcon />\r\n        {buttonText}\r\n      </Button>\r\n\r\n      {showTooltip && <Tooltip message=\"Link copied to clipboard\" />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ShareButton);","// components/common/ClearButton.jsx\r\nimport React, { useState, useCallback } from \"react\";\r\nimport Button from \"./Button\";\r\nimport { clearSavedData } from \"../../utils/storage/storageUtils\";\r\n\r\nconst ClearButton = ({ onClear }) => {\r\n  const [showConfirm, setShowConfirm] = useState(false);\r\n\r\n  const handleShowConfirm = useCallback(() => {\r\n    setShowConfirm(true);\r\n  }, []);\r\n\r\n  const handleCancelConfirm = useCallback(() => {\r\n    setShowConfirm(false);\r\n  }, []);\r\n\r\n  const confirmClear = useCallback(() => {\r\n    clearSavedData();\r\n    onClear();\r\n    setShowConfirm(false);\r\n  }, [onClear]);\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <Button\r\n        variant=\"danger\"\r\n        onClick={handleShowConfirm}\r\n        title=\"Clear all idols and grid layout\"\r\n        className=\"flex items-center gap-2\"\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-4 w-4\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\"\r\n          />\r\n        </svg>\r\n        Clear All\r\n      </Button>\r\n\r\n      {showConfirm && (\r\n        <div className=\"absolute right-0 mt-2 p-4 bg-slate-800 border border-slate-700 rounded-lg shadow-lg z-10 w-72\">\r\n          <p className=\"text-sm mb-4 text-slate-300\">\r\n            Are you sure you want to clear all idols and grid layout?\r\n          </p>\r\n          <div className=\"flex justify-end space-x-3\">\r\n            <Button \r\n              variant=\"secondary\" \r\n              size=\"sm\" \r\n              onClick={handleCancelConfirm}\r\n            >\r\n              Cancel\r\n            </Button>\r\n            <Button \r\n              variant=\"danger\" \r\n              size=\"sm\" \r\n              onClick={confirmClear}\r\n            >\r\n              Clear\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(ClearButton);","// components/strategies/StrategiesModal.jsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\n\r\n// Component for loading spinner\r\nconst LoadingSpinner = () => (\r\n  <div className=\"py-12 text-center text-slate-400\">\r\n    <svg\r\n      className=\"animate-spin h-8 w-8 mx-auto mb-4 text-indigo-500\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n    >\r\n      <circle\r\n        className=\"opacity-25\"\r\n        cx=\"12\"\r\n        cy=\"12\"\r\n        r=\"10\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"4\"\r\n      ></circle>\r\n      <path\r\n        className=\"opacity-75\"\r\n        fill=\"currentColor\"\r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n      ></path>\r\n    </svg>\r\n    Loading strategies...\r\n  </div>\r\n);\r\n\r\n// Component for error state\r\nconst ErrorDisplay = ({ error }) => (\r\n  <div className=\"py-6 text-center text-red-400 border border-red-900 rounded-lg bg-red-900 bg-opacity-20\">\r\n    {error}\r\n    <div className=\"mt-3 text-xs\">\r\n      Make sure the file exists at: /data/strategies.json\r\n    </div>\r\n  </div>\r\n);\r\n\r\n// Component for empty state\r\nconst EmptyState = ({ hasFilter }) => (\r\n  <div className=\"text-center py-12 text-slate-400 border border-dashed border-slate-700 rounded-lg\">\r\n    {hasFilter\r\n      ? \"No strategies match your search\"\r\n      : \"No strategies available\"}\r\n  </div>\r\n);\r\n\r\n// Component for strategy card\r\nconst StrategyCard = ({ strategy, onLoadStrategy }) => {\r\n  const handleClick = () => onLoadStrategy(strategy);\r\n  \r\n  const handleButtonClick = (e) => {\r\n    e.stopPropagation();\r\n    onLoadStrategy(strategy);\r\n  };\r\n  \r\n  const handleLinkClick = (e) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  return (\r\n    <li\r\n      className=\"bg-slate-800 rounded-lg p-4 hover:bg-slate-750 transition-colors border border-slate-700 cursor-pointer\"\r\n      onClick={handleClick}\r\n    >\r\n      <div className=\"flex justify-between items-start\">\r\n        <div>\r\n          <h3 className=\"font-bold text-indigo-300\">{strategy.name}</h3>\r\n          <p className=\"text-sm text-slate-400 mt-1\">By: {strategy.author}</p>\r\n        </div>\r\n        <button\r\n          className=\"bg-indigo-600 hover:bg-indigo-500 text-white text-sm py-1.5 px-3 rounded-md transition-colors shadow-sm\"\r\n          onClick={handleButtonClick}\r\n        >\r\n          Load Strategy\r\n        </button>\r\n      </div>\r\n      <p className=\"text-sm mt-2 text-slate-300\">{strategy.description}</p>\r\n\r\n      {strategy.mapdevice && (\r\n        <div className=\"mt-3\">\r\n          <span className=\"text-sm font-medium text-indigo-300\">Map Device:</span>\r\n          <span className=\"ml-2 text-sm text-slate-300\">{strategy.mapdevice}</span>\r\n        </div>\r\n      )}\r\n\r\n      {strategy.scarabs && strategy.scarabs.length > 0 && (\r\n        <div className=\"mt-2\">\r\n          <span className=\"text-sm font-medium text-indigo-300\">Scarabs:</span>\r\n          <span className=\"ml-2 text-sm text-slate-300\">\r\n            {strategy.scarabs.join(\", \")}\r\n          </span>\r\n        </div>\r\n      )}\r\n\r\n      {strategy.source && (\r\n        <div className=\"mt-2\">\r\n          <span className=\"text-sm font-medium text-indigo-300\">Source:</span>\r\n          <a\r\n            href={strategy.source}\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            className=\"ml-2 text-sm text-indigo-400 hover:text-indigo-300 hover:underline transition-colors\"\r\n            onClick={handleLinkClick}\r\n          >\r\n            Watch on YouTube\r\n          </a>\r\n        </div>\r\n      )}\r\n\r\n      {strategy.tags && (\r\n        <div className=\"mt-3 flex flex-wrap gap-2\">\r\n          {strategy.tags.map((tag) => (\r\n            <span\r\n              key={tag}\r\n              className=\"bg-slate-900 text-slate-300 text-xs px-2 py-1 rounded-full border border-slate-700\"\r\n            >\r\n              {tag}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nfunction StrategiesModal({ onClose, onLoadStrategy }) {\r\n  const [strategies, setStrategies] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  // Effect for keyboard event listeners\r\n  useEffect(() => {\r\n    const handleKeyDown = (e) => {\r\n      if (e.key === \"Escape\") {\r\n        onClose();\r\n      }\r\n    };\r\n\r\n    window.addEventListener(\"keydown\", handleKeyDown);\r\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\r\n  }, [onClose]);\r\n\r\n  // Effect for fetching strategies\r\n  useEffect(() => {\r\n    const fetchStrategies = async () => {\r\n      try {\r\n        setLoading(true);\r\n        // Use a relative path and process.env.PUBLIC_URL to ensure correct path resolution\r\n        const baseUrl = process.env.PUBLIC_URL || \"\";\r\n        const response = await fetch(`${baseUrl}/data/strategies.json`);\r\n\r\n        if (!response.ok) {\r\n          throw new Error(`Failed to load strategies (Status: ${response.status})`);\r\n        }\r\n\r\n        const data = await response.json();\r\n        setStrategies(data);\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error(\"Error loading strategies:\", err);\r\n        setError(`Failed to load strategies. ${err.message}`);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchStrategies();\r\n  }, []);\r\n\r\n  // Memoized filtered strategies for better performance\r\n  const filteredStrategies = useMemo(() => {\r\n    if (!filter) return strategies;\r\n    \r\n    const lowerFilter = filter.toLowerCase();\r\n    return strategies.filter(\r\n      (strategy) =>\r\n        strategy.name.toLowerCase().includes(lowerFilter) ||\r\n        strategy.author.toLowerCase().includes(lowerFilter) ||\r\n        strategy.description.toLowerCase().includes(lowerFilter) ||\r\n        (strategy.tags &&\r\n          strategy.tags.some((tag) => tag.toLowerCase().includes(lowerFilter))) ||\r\n        (strategy.mapdevice && strategy.mapdevice.toLowerCase().includes(lowerFilter)) ||\r\n        (strategy.scarabs &&\r\n          strategy.scarabs.some((scarab) => scarab.toLowerCase().includes(lowerFilter)))\r\n    );\r\n  }, [strategies, filter]);\r\n\r\n  // Callback for loading a strategy\r\n  const handleLoadStrategy = useCallback(\r\n    (strategy) => {\r\n      onLoadStrategy(strategy.shareUrl);\r\n      onClose();\r\n    },\r\n    [onLoadStrategy, onClose]\r\n  );\r\n\r\n  // Handler for filter input changes\r\n  const handleFilterChange = (e) => setFilter(e.target.value);\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-slate-950 bg-opacity-80 z-50 flex items-center justify-center p-4 backdrop-blur-sm\">\r\n      <div className=\"bg-slate-900 rounded-xl p-6 max-w-2xl w-full shadow-lg border border-slate-800 max-h-[90vh] flex flex-col\">\r\n        <div className=\"flex justify-between items-start mb-5\">\r\n          <h2 className=\"text-2xl font-bold text-white\">\r\n            Community Strategies\r\n          </h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"text-slate-400 hover:text-white transition-colors\"\r\n            aria-label=\"Close\"\r\n          >\r\n            ✕\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"mb-5\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search by name, author, description, tags...\"\r\n            className=\"w-full bg-slate-800 p-3 rounded-lg border border-slate-700 text-slate-200 placeholder-slate-400 focus:ring-2 focus:ring-indigo-500 focus:border-transparent outline-none transition-all\"\r\n            value={filter}\r\n            onChange={handleFilterChange}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flex-grow overflow-y-auto pr-1 minimal-scrollbar\">\r\n          {loading ? (\r\n            <LoadingSpinner />\r\n          ) : error ? (\r\n            <ErrorDisplay error={error} />\r\n          ) : filteredStrategies.length > 0 ? (\r\n            <ul className=\"space-y-4\">\r\n              {filteredStrategies.map((strategy) => (\r\n                <StrategyCard\r\n                  key={strategy.id}\r\n                  strategy={strategy}\r\n                  onLoadStrategy={handleLoadStrategy}\r\n                />\r\n              ))}\r\n            </ul>\r\n          ) : (\r\n            <EmptyState hasFilter={!!filter} />\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"mt-6 pt-4 border-t border-slate-800\">\r\n          <p className=\"text-sm text-slate-400\">\r\n            These are community strategies for Path of Exile mapping. Click on a\r\n            strategy to load its idol configuration.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StrategiesModal;","// components/strategies/StrategiesButton.jsx\r\nimport React, { useState, memo } from \"react\";\r\nimport StrategiesModal from \"./StrategiesModal\";\r\n\r\n// Using memo to prevent unnecessary re-renders when parent components change\r\nconst StrategiesButton = memo(function StrategiesButton({ onLoadStrategy }) {\r\n  const [showModal, setShowModal] = useState(false);\r\n  \r\n  const handleOpen = () => setShowModal(true);\r\n  const handleClose = () => setShowModal(false);\r\n\r\n  return (\r\n    <>\r\n      <button\r\n        className=\"bg-amber-600 hover:bg-amber-500 text-white py-2 px-4 rounded-lg text-sm font-medium flex items-center gap-2 shadow-sm transition-colors\"\r\n        onClick={handleOpen}\r\n        title=\"Load community strategies\"\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          className=\"h-4 w-4\"\r\n          fill=\"none\"\r\n          viewBox=\"0 0 24 24\"\r\n          stroke=\"currentColor\"\r\n        >\r\n          <path\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            strokeWidth={2}\r\n            d=\"M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2\"\r\n          />\r\n        </svg>\r\n        Strategies\r\n      </button>\r\n\r\n      {showModal && (\r\n        <StrategiesModal \r\n          onClose={handleClose} \r\n          onLoadStrategy={onLoadStrategy} \r\n        />\r\n      )}\r\n    </>\r\n  );\r\n});\r\n\r\nexport default StrategiesButton;","// components/UniqueIdols.jsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport { generateTradeUrl } from \"../../utils/trade/tradeUtils\";\r\n\r\nfunction UniqueIdols({ onAddIdol, inventory }) {\r\n  const [uniqueIdols, setUniqueIdols] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  // Load unique idols from JSON file\r\n  useEffect(() => {\r\n    const fetchUniqueIdols = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const baseUrl = process.env.PUBLIC_URL || \"\";\r\n        const response = await fetch(`${baseUrl}/data/unique_idol_mods.json`);\r\n\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to load unique idols\");\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        // Convert data into a more usable format\r\n        const formattedIdols = data.map((idol) => ({\r\n          id: idol.id || `unique-${Date.now()}-${Math.random()}`,\r\n          name: idol.Item,\r\n          type: idol.Type.split(\" \")[0], // Extract the idol type (Minor, Kamasan, etc.)\r\n          fullType: idol.Type,\r\n          isUnique: true,\r\n          uniqueModifiers: idol.Mods.map((mod) => ({\r\n            Mod: mod,\r\n            Name: \"Unique\",\r\n            Code: `Unique-${Date.now()}-${Math.random()}`,\r\n          })),\r\n        }));\r\n\r\n        setUniqueIdols(formattedIdols);\r\n        setError(null);\r\n      } catch (err) {\r\n        console.error(\"Error loading unique idols:\", err);\r\n        setError(\"Failed to load unique idols. Please try again later.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUniqueIdols();\r\n  }, []);\r\n\r\n  // Filter unique idols based on search - memoized for performance\r\n  const filteredIdols = useMemo(() => {\r\n    return uniqueIdols.filter(\r\n      (idol) =>\r\n        searchTerm === \"\" ||\r\n        idol.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        idol.type.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n        idol.uniqueModifiers.some((mod) =>\r\n          mod.Mod.toLowerCase().includes(searchTerm.toLowerCase())\r\n        )\r\n    );\r\n  }, [uniqueIdols, searchTerm]);\r\n\r\n  // Check if a unique idol is already in inventory - memoized function\r\n  const isIdolInInventory = useCallback(\r\n    (uniqueIdolName) => {\r\n      if (!inventory) return false;\r\n      return inventory.some(\r\n        (inventoryIdol) =>\r\n          inventoryIdol.isUnique && inventoryIdol.name === uniqueIdolName\r\n      );\r\n    },\r\n    [inventory]\r\n  );\r\n\r\n  // Handle adding a unique idol to inventory\r\n  const handleAddIdol = useCallback(\r\n    (idol) => {\r\n      // Add to main inventory with unique instance ID\r\n      onAddIdol({\r\n        ...idol,\r\n        id: `${idol.id}-${Date.now()}`, // Ensure unique ID for inventory\r\n      });\r\n    },\r\n    [onAddIdol]\r\n  );\r\n\r\n  // Handle opening trade URL\r\n  const handleTradeClick = useCallback((idol) => {\r\n    const tradeUrl = generateTradeUrl({\r\n      isUnique: true,\r\n      name: idol.name,\r\n      uniqueName: idol.name,\r\n      type: idol.type,\r\n    });\r\n\r\n    if (tradeUrl) {\r\n      window.open(tradeUrl, \"_blank\");\r\n    }\r\n  }, []);\r\n\r\n  if (loading) {\r\n    return <LoadingState />;\r\n  }\r\n\r\n  if (error) {\r\n    return <ErrorState error={error} />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"bg-slate-900 p-6 rounded-xl shadow-sm\">\r\n      <h2 className=\"text-xl font-bold mb-6 text-white\">Unique Idols</h2>\r\n\r\n      <SearchInput searchTerm={searchTerm} setSearchTerm={setSearchTerm} />\r\n\r\n      {/* Idol list */}\r\n      <div className=\"max-h-96 overflow-y-auto pr-1 minimal-scrollbar\">\r\n        {filteredIdols.length > 0 ? (\r\n          <IdolList\r\n            idols={filteredIdols}\r\n            isIdolInInventory={isIdolInInventory}\r\n            handleAddIdol={handleAddIdol}\r\n            handleTradeClick={handleTradeClick}\r\n          />\r\n        ) : (\r\n          <EmptyState searchTerm={searchTerm} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Extracted components for better organization and reusability\r\nconst LoadingState = () => (\r\n  <div className=\"bg-slate-900 p-6 rounded-xl shadow-sm\">\r\n    <h2 className=\"text-xl font-bold mb-6 text-white\">Unique Idols</h2>\r\n    <div className=\"py-12 text-center text-slate-400\">\r\n      <svg\r\n        className=\"animate-spin h-8 w-8 mx-auto mb-4 text-pink-500\"\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n      >\r\n        <circle\r\n          className=\"opacity-25\"\r\n          cx=\"12\"\r\n          cy=\"12\"\r\n          r=\"10\"\r\n          stroke=\"currentColor\"\r\n          strokeWidth=\"4\"\r\n        ></circle>\r\n        <path\r\n          className=\"opacity-75\"\r\n          fill=\"currentColor\"\r\n          d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n        ></path>\r\n      </svg>\r\n      Loading unique idols...\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst ErrorState = ({ error }) => (\r\n  <div className=\"bg-slate-900 p-6 rounded-xl shadow-sm\">\r\n    <h2 className=\"text-xl font-bold mb-6 text-white\">Unique Idols</h2>\r\n    <div className=\"py-6 text-center text-red-400 border border-red-900 rounded-lg bg-red-900 bg-opacity-20\">\r\n      {error}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst SearchInput = ({ searchTerm, setSearchTerm }) => (\r\n  <div className=\"mb-6 relative\">\r\n    <input\r\n      type=\"text\"\r\n      placeholder=\"Search unique idols...\"\r\n      className=\"w-full bg-slate-800 py-2.5 px-3 pr-8 rounded-md text-sm border border-slate-700 focus:ring-1 focus:ring-pink-500 focus:border-pink-500 outline-none\"\r\n      value={searchTerm}\r\n      onChange={(e) => setSearchTerm(e.target.value)}\r\n    />\r\n    <div className=\"absolute right-3 top-2.5 text-slate-500\">\r\n      <svg\r\n        xmlns=\"http://www.w3.org/2000/svg\"\r\n        className=\"h-4 w-4\"\r\n        fill=\"none\"\r\n        viewBox=\"0 0 24 24\"\r\n        stroke=\"currentColor\"\r\n      >\r\n        <path\r\n          strokeLinecap=\"round\"\r\n          strokeLinejoin=\"round\"\r\n          strokeWidth={2}\r\n          d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n        />\r\n      </svg>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst IdolList = ({ idols, isIdolInInventory, handleAddIdol, handleTradeClick }) => (\r\n  <div className=\"space-y-4\">\r\n    {idols.map((idol) => (\r\n      <IdolCard\r\n        key={idol.id}\r\n        idol={idol}\r\n        isInInventory={isIdolInInventory(idol.name)}\r\n        onAddIdol={handleAddIdol}\r\n        onTradeClick={handleTradeClick}\r\n      />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nconst IdolCard = ({ idol, isInInventory, onAddIdol, onTradeClick }) => (\r\n  <div\r\n    className=\"bg-gradient-to-r from-pink-700/30 to-pink-800/40 border border-pink-600 p-6 rounded-lg shadow-md transition-all hover:shadow-lg\"\r\n  >\r\n    <div className=\"flex justify-between items-start\">\r\n      <div>\r\n        <h3 className=\"font-extrabold text-base text-white\">\r\n          {idol.name}\r\n        </h3>\r\n        <p className=\"text-xs text-pink-300 mt-1\">\r\n          {idol.fullType}\r\n        </p>\r\n      </div>\r\n      <div className=\"flex items-center space-x-2\">\r\n        <button\r\n          onClick={() => onTradeClick(idol)}\r\n          className=\"bg-indigo-600 hover:bg-indigo-500 border border-indigo-500 text-white text-xs py-1.5 px-2.5 rounded transition-colors\"\r\n          title=\"Search for this unique idol on the trade site\"\r\n        >\r\n          Trade\r\n        </button>\r\n        <button\r\n          onClick={() => onAddIdol(idol)}\r\n          className={`text-xs py-1.5 px-2.5 rounded transition-colors border ${\r\n            isInInventory\r\n              ? \"bg-slate-700 text-slate-400 border-slate-600 cursor-not-allowed\"\r\n              : \"bg-green-600 hover:bg-green-500 text-white border-green-500\"\r\n          }`}\r\n          disabled={isInInventory}\r\n          title={\r\n            isInInventory\r\n              ? \"Already added to inventory\"\r\n              : \"Add to inventory\"\r\n          }\r\n        >\r\n          {isInInventory ? \"Added\" : \"Add\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"mt-4\">\r\n      <h4 className=\"text-xs font-medium text-pink-400 border-l-4 border-pink-400 pl-2 mb-2\">\r\n        Unique Modifiers:\r\n      </h4>\r\n      <ul className=\"space-y-1.5 mt-2\">\r\n        {idol.uniqueModifiers.map((mod, idx) => (\r\n          <li key={idx} className=\"text-[11px] text-slate-300 pl-3\">\r\n            {mod.Mod}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst EmptyState = ({ searchTerm }) => (\r\n  <div className=\"text-center py-12 text-slate-400 border border-dashed border-slate-700 rounded-lg\">\r\n    {searchTerm\r\n      ? \"No unique idols match your search\"\r\n      : \"No unique idols available\"}\r\n  </div>\r\n);\r\n\r\nexport default UniqueIdols;","// components/trade/TradeGenerator.jsx\r\nimport React, { useState, useEffect, useCallback, useMemo } from \"react\";\r\nimport ModifierSearch from \"../modifiers/ModifierSearch\";\r\nimport { generateTradeUrlWithMultipleModifiers } from \"../../utils/trade/tradeUtils\";\r\n\r\n// Constants\r\nconst ERROR_DISPLAY_DURATION = 5000;\r\n\r\n// Idol type groupings\r\nconst GROUPED_IDOL_TYPES = [\r\n  { label: \"Minor (1×1)\", value: \"Minor\" },\r\n  { label: \"Kamasan (1×2) • Noble (2×1)\", value: \"KamasanNoble\" },\r\n  { label: \"Totemic (1×3) • Burial (3×1)\", value: \"TotemicBurial\" },\r\n  { label: \"Conqueror (2×2)\", value: \"Conqueror\" },\r\n];\r\n\r\n// Type to specific types mapping\r\nconst TYPE_MAPPINGS = {\r\n  KamasanNoble: [\"Kamasan\", \"Noble\"],\r\n  TotemicBurial: [\"Totemic\", \"Burial\"]\r\n};\r\n\r\nconst TradeGenerator = ({ modData, idolTypes }) => {\r\n  // State management\r\n  const [selectedType, setSelectedType] = useState(\"\");\r\n  const [selectedPrefixes, setSelectedPrefixes] = useState([]);\r\n  const [selectedSuffixes, setSelectedSuffixes] = useState([]);\r\n  const [error, setError] = useState(null);\r\n  const [errorTimeout, setErrorTimeout] = useState(null);\r\n  const [searchState, setSearchState] = useState({\r\n    searchTerm: \"\",\r\n    filterType: \"all\",\r\n    viewByName: false,\r\n    selectedNames: [],\r\n  });\r\n\r\n  // Derived state\r\n  const isGroupedType = useMemo(() => \r\n    selectedType === \"KamasanNoble\" || selectedType === \"TotemicBurial\", \r\n    [selectedType]\r\n  );\r\n  \r\n  const specificTypes = useMemo(() => \r\n    TYPE_MAPPINGS[selectedType] || [], \r\n    [selectedType]\r\n  );\r\n\r\n  // Reset modifiers when type changes\r\n  useEffect(() => {\r\n    setSelectedPrefixes([]);\r\n    setSelectedSuffixes([]);\r\n    setError(null);\r\n  }, [selectedType]);\r\n  \r\n  // Clean up timeout on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (errorTimeout) clearTimeout(errorTimeout);\r\n    };\r\n  }, [errorTimeout]);\r\n\r\n  // Error handling\r\n  const displayError = useCallback((message) => {\r\n    setError(message);\r\n    const timeout = setTimeout(() => setError(null), ERROR_DISPLAY_DURATION);\r\n    setErrorTimeout(timeout);\r\n    return timeout;\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n    if (errorTimeout) {\r\n      clearTimeout(errorTimeout);\r\n      setErrorTimeout(null);\r\n    }\r\n  }, [errorTimeout]);\r\n\r\n  // Get type-specific modifiers\r\n  const typeSpecificMods = useMemo(() => {\r\n    if (!selectedType || !modData.prefixes || !modData.suffixes) {\r\n      return { prefixes: {}, suffixes: {} };\r\n    }\r\n\r\n    // For grouped types, use just one of the types since they share the same modifiers\r\n    if (selectedType === \"KamasanNoble\") {\r\n      return {\r\n        prefixes: { KamasanNoble: modData.prefixes[\"Kamasan\"] || [] },\r\n        suffixes: { KamasanNoble: modData.suffixes[\"Kamasan\"] || [] }\r\n      };\r\n    } else if (selectedType === \"TotemicBurial\") {\r\n      return {\r\n        prefixes: { TotemicBurial: modData.prefixes[\"Burial\"] || [] },\r\n        suffixes: { TotemicBurial: modData.suffixes[\"Burial\"] || [] }\r\n      };\r\n    }\r\n\r\n    return {\r\n      prefixes: { [selectedType]: modData.prefixes[selectedType] || [] },\r\n      suffixes: { [selectedType]: modData.suffixes[selectedType] || [] },\r\n    };\r\n  }, [selectedType, modData.prefixes, modData.suffixes]);\r\n\r\n  // Modifier management handlers\r\n  const handleAddModifier = useCallback((modifier, type) => {\r\n    clearError();\r\n    \r\n    if (type === \"prefix\") {\r\n      setSelectedPrefixes(prevPrefixes => \r\n        prevPrefixes.some(p => p.id === modifier.id)\r\n          ? prevPrefixes\r\n          : [...prevPrefixes, modifier]\r\n      );\r\n    } else if (type === \"suffix\") {\r\n      setSelectedSuffixes(prevSuffixes => \r\n        prevSuffixes.some(s => s.id === modifier.id)\r\n          ? prevSuffixes\r\n          : [...prevSuffixes, modifier]\r\n      );\r\n    }\r\n  }, [clearError]);\r\n\r\n  const handleRemoveModifier = useCallback((modifier) => {\r\n    if (modifier.type === \"prefix\") {\r\n      setSelectedPrefixes(prevPrefixes => \r\n        prevPrefixes.filter(p => p.id !== modifier.id)\r\n      );\r\n    } else {\r\n      setSelectedSuffixes(prevSuffixes => \r\n        prevSuffixes.filter(s => s.id !== modifier.id)\r\n      );\r\n    }\r\n    clearError();\r\n  }, [clearError]);\r\n\r\n  const handleRemovePrefix = useCallback((index) => {\r\n    setSelectedPrefixes(prevPrefixes => \r\n      prevPrefixes.filter((_, i) => i !== index)\r\n    );\r\n    clearError();\r\n  }, [clearError]);\r\n\r\n  const handleRemoveSuffix = useCallback((index) => {\r\n    setSelectedSuffixes(prevSuffixes => \r\n      prevSuffixes.filter((_, i) => i !== index)\r\n    );\r\n    clearError();\r\n  }, [clearError]);\r\n\r\n  // Trade URL generation\r\n  const handleTradeForModifiers = useCallback((specificType = null) => {\r\n    const tradeType = specificType || selectedType;\r\n    \r\n    if (!tradeType) return;\r\n\r\n    const tradeUrl = generateTradeUrlWithMultipleModifiers(\r\n      tradeType,\r\n      selectedPrefixes,\r\n      selectedSuffixes\r\n    );\r\n\r\n    if (tradeUrl) {\r\n      window.open(tradeUrl, \"_blank\");\r\n    } else {\r\n      displayError(\"Failed to generate trade URL. Please select at least one modifier.\");\r\n    }\r\n  }, [selectedType, selectedPrefixes, selectedSuffixes, displayError]);\r\n\r\n  // UI sub-components\r\n  const renderErrorMessage = () => {\r\n    if (!error) return null;\r\n\r\n    return (\r\n      <div className=\"bg-red-900/50 p-3 rounded-lg border border-red-800 text-red-200 text-sm\">\r\n        {error}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderModifierList = (modifiers, type, handleRemove) => {\r\n    if (modifiers.length === 0) {\r\n      return (\r\n        <div className=\"p-4 bg-slate-800 rounded-md text-sm text-slate-400 text-center mb-4 ring-1 ring-slate-700\">\r\n          No {type}s selected\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const textColorClass = type === \"prefix\" ? \"text-blue-400\" : \"text-green-400\";\r\n\r\n    return (\r\n      <ul className=\"mb-4 space-y-2 max-h-48 overflow-y-auto minimal-scrollbar pr-1\">\r\n        {modifiers.map((modifier, index) => (\r\n          <li\r\n            key={index}\r\n            className=\"bg-slate-800 p-3 rounded-md flex justify-between ring-1 ring-slate-700\"\r\n            onContextMenu={(e) => {\r\n              e.preventDefault();\r\n              handleRemove(index);\r\n            }}\r\n          >\r\n            <div>\r\n              <div className={`text-sm font-medium ${textColorClass}`}>{modifier.Name}</div>\r\n              <div className=\"text-xs text-slate-400 mt-1\">{modifier.Mod}</div>\r\n            </div>\r\n            <button\r\n              onClick={() => handleRemove(index)}\r\n              className=\"text-slate-400 hover:text-slate-300 ml-2 self-start\"\r\n              title={`Remove ${type}`}\r\n            >\r\n              ✕\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n  };\r\n\r\n  const renderTradeButtons = () => {\r\n    if (isGroupedType) {\r\n      return (\r\n        <div className=\"grid grid-cols-2 gap-4 mt-4\">\r\n          {specificTypes.map(type => (\r\n            <button\r\n              key={type}\r\n              className=\"py-3 px-4 bg-indigo-600 hover:bg-indigo-500 text-white rounded-md font-medium transition-colors\"\r\n              onClick={() => handleTradeForModifiers(type)}\r\n              disabled={selectedPrefixes.length === 0 && selectedSuffixes.length === 0}\r\n            >\r\n              Trade for {type}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <button\r\n        className=\"w-full mt-4 py-3 px-4 bg-indigo-600 hover:bg-indigo-500 text-white rounded-md font-medium transition-colors\"\r\n        onClick={() => handleTradeForModifiers()}\r\n        disabled={!selectedType || (selectedPrefixes.length === 0 && selectedSuffixes.length === 0)}\r\n      >\r\n        Trade for Modifiers\r\n      </button>\r\n    );\r\n  };\r\n\r\n  // Main component render\r\n  return (\r\n    <div className=\"bg-slate-900 p-5 rounded-xl shadow-sm\">\r\n      <h2 className=\"text-xl font-bold mb-1 text-white\">Generate Trade</h2>\r\n      <p className=\"text-sm text-slate-400 mb-4\">\r\n        Input any combination of prefixes and suffixes to generate a trade URL that includes the selected prefix and suffix modifiers, \r\n        with their counts configurable under the \"Show Filters\" section on the Path of Exile trade site.\r\n      </p>\r\n\r\n      <div className=\"space-y-5\">\r\n        {renderErrorMessage()}\r\n      \r\n        {/* Idol Type Selection */}\r\n        <div>\r\n          <label className=\"block mb-2 text-sm text-slate-300\">Idol Type</label>\r\n          <select\r\n            className=\"w-full bg-slate-800 p-3 rounded-md border-0 text-sm ring-1 ring-slate-700 focus:ring-2 focus:ring-indigo-500 outline-none\"\r\n            value={selectedType}\r\n            onChange={(e) => setSelectedType(e.target.value)}\r\n          >\r\n            <option value=\"\">Select Idol Type</option>\r\n            {GROUPED_IDOL_TYPES.map((type) => (\r\n              <option key={type.value} value={type.value}>\r\n                {type.label}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n\r\n        {selectedType && (\r\n          <>\r\n            {/* Selected Prefixes */}\r\n            <div className=\"border-t border-slate-800 pt-4\">\r\n              <h3 className=\"font-medium mb-2 text-sm text-slate-300\">\r\n                Selected Prefixes ({selectedPrefixes.length})\r\n              </h3>\r\n              {renderModifierList(selectedPrefixes, \"prefix\", handleRemovePrefix)}\r\n            </div>\r\n\r\n            {/* Selected Suffixes */}\r\n            <div className=\"border-t border-slate-800 pt-4\">\r\n              <h3 className=\"font-medium mb-2 text-sm text-slate-300\">\r\n                Selected Suffixes ({selectedSuffixes.length})\r\n              </h3>\r\n              {renderModifierList(selectedSuffixes, \"suffix\", handleRemoveSuffix)}\r\n            </div>\r\n\r\n            {/* Modifier Search */}\r\n            <div className=\"border-t border-slate-800 pt-4\">\r\n              <h3 className=\"font-medium mb-2 text-sm text-slate-300\">Search & Add Modifiers</h3>\r\n              <ModifierSearch\r\n                modData={typeSpecificMods}\r\n                onAddModifier={handleAddModifier}\r\n                onRemoveModifier={handleRemoveModifier}\r\n                selectedType={selectedType}\r\n                initialState={searchState}\r\n                onSearchUpdate={setSearchState}\r\n                searchContext=\"trade\"\r\n                selectedPrefixes={selectedPrefixes}\r\n                selectedSuffixes={selectedSuffixes}\r\n              />\r\n            </div>\r\n\r\n            {/* Trade Buttons */}\r\n            {renderTradeButtons()}\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(TradeGenerator);","// App.js\r\nimport React, { useContext, useMemo } from \"react\";\r\nimport { DndProvider } from \"react-dnd\";\r\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\r\n\r\n// Components\r\nimport Grid from \"./components/grid/Grid\";\r\nimport OptimizeButton from \"./components/grid/OptimizeButton\";\r\nimport IdolInventory from \"./components/inventory/IdolInventory\";\r\nimport ActiveModifiers from \"./components/modifiers/ActiveModifiers\";\r\nimport IdolBuilder from \"./components/builder/IdolBuilder\";\r\nimport DesiredModifiers from \"./components/modifiers/DesiredModifiers\";\r\nimport IdolPasteHandler from \"./components/inventory/IdolPasteHandler\";\r\nimport ShareButton from \"./components/common/ShareButton\";\r\nimport ClearButton from \"./components/common/ClearButton\";\r\nimport StrategiesButton from \"./components/strategies/StrategiesButton\";\r\nimport UniqueIdols from \"./components/builder/UniqueIdols\";\r\nimport TradeGenerator from \"./components/trade/TradeGenerator\";\r\n\r\n// Context\r\nimport { AppProvider, AppContext } from \"./context/AppContext\";\r\n\r\nfunction App() {\r\n    return (\r\n        <AppProvider>\r\n            <AppContent />\r\n        </AppProvider>\r\n    );\r\n}\r\n\r\n// UI Components\r\nconst LoadingSpinner = () => (\r\n    <div className=\"flex items-center justify-center h-screen bg-slate-950 text-white\">\r\n        <div className=\"text-center\">\r\n            <svg\r\n                className=\"animate-spin h-12 w-12 mx-auto mb-4 text-indigo-500\"\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n            >\r\n                <circle\r\n                    className=\"opacity-25\"\r\n                    cx=\"12\"\r\n                    cy=\"12\"\r\n                    r=\"10\"\r\n                    stroke=\"currentColor\"\r\n                    strokeWidth=\"4\"\r\n                ></circle>\r\n                <path\r\n                    className=\"opacity-75\"\r\n                    fill=\"currentColor\"\r\n                    d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\r\n                ></path>\r\n            </svg>\r\n            <p className=\"text-xl\">Loading idol data...</p>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst Header = ({ onLoadStrategy, gridState, inventory, onOptimize, onClear }) => (\r\n    <header className=\"mb-6\">\r\n        <h1 className=\"text-3xl font-bold text-center text-amber-400\">\r\n            Path of Exile Idol Grid Builder\r\n        </h1>\r\n        <div className=\"w-full h-px bg-slate-700 my-4\"></div>\r\n\r\n        {/* buttons container */}\r\n        <div className=\"flex flex-wrap justify-center mt-3 space-x-0 sm:space-x-4 gap-2 sm:gap-0 px-2 sm:px-0\">\r\n            <StrategiesButton onLoadStrategy={onLoadStrategy} />\r\n            <ShareButton gridState={gridState} inventory={inventory} />\r\n            <OptimizeButton onOptimize={onOptimize} />\r\n            <ClearButton onClear={onClear} />\r\n        </div>\r\n    </header>\r\n);\r\n\r\nconst MobileTabNav = ({ activeTab, setActiveTab }) => (\r\n    <div className=\"flex flex-wrap md:hidden border-b border-slate-700 mb-4\">\r\n        <TabButton active={activeTab === \"builder\"} onClick={() => setActiveTab(\"builder\")}>\r\n            Builder\r\n        </TabButton>\r\n        <TabButton active={activeTab === \"inventory\"} onClick={() => setActiveTab(\"inventory\")}>\r\n            Inventory\r\n        </TabButton>\r\n        <TabButton active={activeTab === \"modifiers\"} onClick={() => setActiveTab(\"modifiers\")}>\r\n            Mods\r\n        </TabButton>\r\n        <TabButton active={activeTab === \"autogen\"} onClick={() => setActiveTab(\"autogen\")}>\r\n            Auto\r\n        </TabButton>\r\n        <TabButton active={activeTab === \"unique\"} onClick={() => setActiveTab(\"unique\")}>\r\n            Unique\r\n        </TabButton>\r\n        <TabButton active={activeTab === \"trade\"} onClick={() => setActiveTab(\"trade\")}>\r\n            Trade\r\n        </TabButton>\r\n    </div>\r\n);\r\n\r\nconst TabButton = ({ active, onClick, children }) => (\r\n    <button\r\n        className={`flex-1 py-2 px-2 ${active\r\n            ? \"border-b-2 border-amber-400 text-amber-400\"\r\n            : \"text-slate-400\"}`}\r\n        onClick={onClick}\r\n    >\r\n        {children}\r\n    </button>\r\n);\r\n\r\nconst DesktopTabs = ({ activeTab, setActiveTab }) => (\r\n    <div className=\"hidden md:block mb-6\">\r\n        <div className=\"bg-slate-800 rounded-lg overflow-hidden flex flex-wrap w-full\">\r\n            <DesktopTabButton\r\n                active={activeTab === \"builder\"}\r\n                onClick={() => setActiveTab(\"builder\")}\r\n                minWidth=\"min-w-[120px]\"\r\n            >\r\n                Manual Builder\r\n            </DesktopTabButton>\r\n            <DesktopTabButton\r\n                active={activeTab === \"autogen\"}\r\n                onClick={() => setActiveTab(\"autogen\")}\r\n                minWidth=\"min-w-[120px]\"\r\n            >\r\n                Auto-Generate\r\n            </DesktopTabButton>\r\n            <DesktopTabButton\r\n                active={activeTab === \"unique\"}\r\n                onClick={() => setActiveTab(\"unique\")}\r\n                minWidth=\"min-w-[100px]\"\r\n            >\r\n                Unique Idols\r\n            </DesktopTabButton>\r\n            <DesktopTabButton\r\n                active={activeTab === \"trade\"}\r\n                onClick={() => setActiveTab(\"trade\")}\r\n                minWidth=\"min-w-[100px]\"\r\n            >\r\n                Generate Trade\r\n            </DesktopTabButton>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst DesktopTabButton = ({ active, onClick, children, minWidth }) => (\r\n    <button\r\n        className={`py-2.5 px-4 ${minWidth} flex-grow ${active\r\n            ? \"bg-indigo-600 text-white font-medium\"\r\n            : \"hover:bg-slate-700 text-slate-300\"\r\n            } transition-colors focus:ring-2 focus:ring-indigo-500 focus:outline-none`}\r\n        onClick={onClick}\r\n    >\r\n        {children}\r\n    </button>\r\n);\r\n\r\nconst GenerationResultNotification = ({ result, onClose }) => {\r\n    if (!result) return null;\r\n\r\n    const isError = result.error;\r\n    const hasNotPlaced = result.notPlaced && result.notPlaced.length > 0;\r\n\r\n    const bgColorClass = isError\r\n        ? \"bg-red-900/50 border border-red-800\"\r\n        : hasNotPlaced\r\n            ? \"bg-amber-900/30 border border-amber-800\"\r\n            : \"bg-green-900/30 border border-green-800\";\r\n\r\n    return (\r\n        <div className={`mb-4 p-3 rounded-lg ${bgColorClass}`}>\r\n            <div className=\"flex justify-between\">\r\n                <h3 className=\"font-medium text-white\">Generation Results</h3>\r\n                <button\r\n                    onClick={onClose}\r\n                    className=\"text-slate-300 hover:text-white transition-colors\"\r\n                >\r\n                    ✕\r\n                </button>\r\n            </div>\r\n\r\n            {isError ? (\r\n                <p className=\"text-sm text-red-200 mt-1\">{result.error}</p>\r\n            ) : result.message ? (\r\n                <p className=\"text-sm text-green-200 mt-1\">{result.message}</p>\r\n            ) : (\r\n                <>\r\n                    <p className=\"text-sm text-slate-300 mt-1\">\r\n                        Created {result.total} idols with {result.modifiersRequested} desired modifiers.{\" \"}\r\n                        {result.placed} idols were automatically placed on the grid.\r\n                    </p>\r\n\r\n                    {hasNotPlaced && (\r\n                        <div className=\"mt-2 bg-slate-800/50 p-2 rounded-md\">\r\n                            <p className=\"text-sm text-amber-300\">\r\n                                {result.notPlaced.length}{\" \"}\r\n                                {result.notPlaced.length === 1 ? \"idol\" : \"idols\"}{\" \"}\r\n                                couldn't be placed:\r\n                            </p>\r\n                            <ul className=\"mt-1 ml-4 list-disc text-xs text-slate-300\">\r\n                                {result.notPlaced.map((idol, index) => (\r\n                                    <li key={index}>\r\n                                        {idol.name} - No suitable space on grid\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst FirstVisitTip = ({ onDismiss }) => (\r\n    <div className=\"bg-slate-800/80 text-sm py-2 px-4 rounded-lg mb-4 flex justify-between items-center border-l-4 border-indigo-500\">\r\n        <span className=\"text-slate-300\">\r\n            <span className=\"font-bold text-indigo-400\">Pro Tip:</span> Press{\" \"}\r\n            <kbd className=\"bg-slate-700 px-1.5 py-0.5 rounded text-xs\">\r\n                Ctrl+V\r\n            </kbd>{\" \"}\r\n            to paste idols directly from Path of Exile\r\n        </span>\r\n        <button\r\n            onClick={onDismiss}\r\n            className=\"text-slate-400 hover:text-slate-300 ml-3\"\r\n            aria-label=\"Dismiss tip\"\r\n        >\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"h-4 w-4\"\r\n                viewBox=\"0 0 20 20\"\r\n                fill=\"currentColor\"\r\n            >\r\n                <path\r\n                    fillRule=\"evenodd\"\r\n                    d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\"\r\n                    clipRule=\"evenodd\"\r\n                />\r\n            </svg>\r\n        </button>\r\n    </div>\r\n);\r\n\r\nconst NoMatchingIdols = () => (\r\n    <div className=\"bg-slate-800/50 rounded-xl p-6 text-center border border-slate-700/50\">\r\n        <div className=\"flex justify-center mb-4\">\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"h-16 w-16 text-slate-500\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n            >\r\n                <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={1.5}\r\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n                />\r\n            </svg>\r\n        </div>\r\n        <p className=\"text-slate-300 text-base mb-5\">No matching idols found.</p>\r\n    </div>\r\n);\r\n\r\nconst SearchBar = ({ value, onChange }) => (\r\n    <div className=\"mt-4 relative\">\r\n        <input\r\n            type=\"text\"\r\n            placeholder=\"Search idols...\"\r\n            className=\"w-full bg-slate-800 py-2.5 px-3 pr-8 rounded-md text-sm border border-slate-700 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 outline-none\"\r\n            value={value}\r\n            onChange={(e) => onChange(e.target.value)}\r\n        />\r\n        <div className=\"absolute right-3 top-2.5 text-slate-500\">\r\n            <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                className=\"h-4 w-4\"\r\n                fill=\"none\"\r\n                viewBox=\"0 0 24 24\"\r\n                stroke=\"currentColor\"\r\n            >\r\n                <path\r\n                    strokeLinecap=\"round\"\r\n                    strokeLinejoin=\"round\"\r\n                    strokeWidth={2}\r\n                    d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\r\n                />\r\n            </svg>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nconst PasteTip = () => (\r\n    <div className=\"mt-2 text-xs text-slate-400 flex items-center\">\r\n        <svg\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            className=\"h-3.5 w-3.5 mr-1 text-indigo-400\"\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke=\"currentColor\"\r\n        >\r\n            <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                strokeWidth={2}\r\n                d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"\r\n            />\r\n        </svg>\r\n        Copy an idol from Path of Exile and press Ctrl+V to add it\r\n    </div>\r\n);\r\n\r\nconst Footer = () => (\r\n    <footer className=\"mt-auto pt-3 pb-2 border-t border-slate-800 text-center text-sm text-slate-500\">\r\n        <div className=\"max-w-4xl mx-auto flex flex-col items-center\">\r\n            <a\r\n                href=\"https://github.com/Jlepoff/poe-idol-grid-builder/issues\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"inline-flex items-center hover:text-indigo-400 transition-colors focus:ring-2 focus:ring-indigo-500 focus:outline-none mb-1\"\r\n            >\r\n                <svg\r\n                    xmlns=\"http://www.w3.org/2000/svg\"\r\n                    className=\"h-4 w-4 mr-1\"\r\n                    fill=\"none\"\r\n                    viewBox=\"0 0 24 24\"\r\n                    stroke=\"currentColor\"\r\n                >\r\n                    <path\r\n                        strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\"\r\n                        strokeWidth={2}\r\n                        d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\"\r\n                    />\r\n                </svg>\r\n                Report Issues Here\r\n            </a>\r\n        </div>\r\n    </footer>\r\n);\r\n\r\nfunction AppContent() {\r\n    const {\r\n        modData,\r\n        idolTypes,\r\n        inventory,\r\n        gridState,\r\n        isLoading,\r\n        activeTab,\r\n        generationResult,\r\n        firstVisit,\r\n        inventorySearchTerm,\r\n        setActiveTab,\r\n        setGenerationResult,\r\n        setFirstVisit,\r\n        setInventorySearchTerm,\r\n        handleAddIdol,\r\n        handleRemoveIdol,\r\n        handlePlaceIdol,\r\n        handleRemoveFromGrid,\r\n        handleClearAll,\r\n        handleOptimizeGrid,\r\n        handleGenerateIdols,\r\n        handleLoadStrategy,\r\n    } = useContext(AppContext);\r\n\r\n    // Calculate filtered inventory\r\n    const filteredInventory = useMemo(() => {\r\n        if (!inventorySearchTerm) return inventory;\r\n\r\n        const searchTerm = inventorySearchTerm.toLowerCase();\r\n\r\n        return inventory.filter((idol) => {\r\n            // Check idol name and type\r\n            if (idol.name.toLowerCase().includes(searchTerm) ||\r\n                idol.type.toLowerCase().includes(searchTerm) ||\r\n                (idol.isUnique && \"unique\".includes(searchTerm))) {\r\n                return true;\r\n            }\r\n\r\n            // Check prefixes\r\n            if (idol.prefixes?.length > 0) {\r\n                for (const prefix of idol.prefixes) {\r\n                    if (prefix.Name.toLowerCase().includes(searchTerm) ||\r\n                        prefix.Mod.toLowerCase().includes(searchTerm)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Check suffixes\r\n            if (idol.suffixes?.length > 0) {\r\n                for (const suffix of idol.suffixes) {\r\n                    if (suffix.Name.toLowerCase().includes(searchTerm) ||\r\n                        suffix.Mod.toLowerCase().includes(searchTerm)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Check unique modifiers\r\n            if (idol.isUnique && idol.uniqueModifiers?.length > 0) {\r\n                for (const mod of idol.uniqueModifiers) {\r\n                    if (mod.Mod.toLowerCase().includes(searchTerm)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return false;\r\n        });\r\n    }, [inventory, inventorySearchTerm]);\r\n\r\n    if (isLoading) {\r\n        return <LoadingSpinner />;\r\n    }\r\n\r\n    // Determine left column visibility\r\n    const isLeftColumnVisible =\r\n        activeTab === \"builder\" ||\r\n        activeTab === \"autogen\" ||\r\n        activeTab === \"unique\" ||\r\n        activeTab === \"trade\";\r\n\r\n    return (\r\n        <DndProvider backend={HTML5Backend}>\r\n            <div className=\"min-h-screen bg-slate-950 text-white p-4 flex flex-col\">\r\n                <Header\r\n                    onLoadStrategy={handleLoadStrategy}\r\n                    gridState={gridState}\r\n                    inventory={inventory}\r\n                    onOptimize={handleOptimizeGrid}\r\n                    onClear={handleClearAll}\r\n                />\r\n\r\n                <MobileTabNav activeTab={activeTab} setActiveTab={setActiveTab} />\r\n\r\n                {generationResult && (\r\n                    <GenerationResultNotification\r\n                        result={generationResult}\r\n                        onClose={() => setGenerationResult(null)}\r\n                    />\r\n                )}\r\n\r\n                {firstVisit && <FirstVisitTip onDismiss={() => setFirstVisit(false)} />}\r\n\r\n                {/* Main Content Grid */}\r\n                <div className=\"grid grid-cols-1 md:grid-cols-12 gap-10 flex-grow\">\r\n                    {/* Left Column - Builder or Auto-Generate */}\r\n                    <div className=\"md:col-span-3 lg:col-span-4\">\r\n                        <DesktopTabs activeTab={activeTab} setActiveTab={setActiveTab} />\r\n\r\n                        {/* Left Column Content */}\r\n                        <div className={`space-y-6 ${!isLeftColumnVisible ? \"hidden md:block\" : \"\"}`}>\r\n                            {activeTab === \"autogen\" ? (\r\n                                <DesiredModifiers\r\n                                    modData={modData}\r\n                                    onGenerateIdols={handleGenerateIdols}\r\n                                />\r\n                            ) : activeTab === \"unique\" ? (\r\n                                <UniqueIdols\r\n                                    onAddIdol={handleAddIdol}\r\n                                    inventory={inventory}\r\n                                />\r\n                            ) : activeTab === \"trade\" ? (\r\n                                <TradeGenerator\r\n                                    modData={modData}\r\n                                    idolTypes={idolTypes}\r\n                                />\r\n                            ) : (\r\n                                <IdolBuilder\r\n                                    modData={modData}\r\n                                    idolTypes={idolTypes}\r\n                                    onAddIdol={handleAddIdol}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Middle Column - Grid */}\r\n                    <div className=\"md:col-span-6 lg:col-span-4 flex flex-col items-center\">\r\n                        <div className=\"bg-slate-900 p-6 rounded-xl shadow-sm w-full\">\r\n                            <div className=\"flex justify-between items-center mb-6\">\r\n                                <h2 className=\"text-xl font-bold text-white\">Idol Grid</h2>\r\n                            </div>\r\n                            <div className=\"flex justify-center items-center max-w-full overflow-x-auto grid-container-parent minimal-scrollbar\">\r\n                                <Grid\r\n                                    gridState={gridState}\r\n                                    onPlaceIdol={handlePlaceIdol}\r\n                                    onRemoveFromGrid={handleRemoveFromGrid}\r\n                                    idolTypes={idolTypes}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {/* Active Modifiers (Desktop) */}\r\n                        <div className=\"hidden md:block mt-6 w-full\">\r\n                            <ActiveModifiers gridState={gridState} />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Right Column - Inventory */}\r\n                    <div className={`md:col-span-3 lg:col-span-4 space-y-6 ${activeTab !== \"inventory\" && \"hidden md:block\"}`}>\r\n                        <div className=\"bg-slate-900 p-6 rounded-xl shadow-sm\">\r\n                            <div className=\"mb-6\">\r\n                                <div className=\"flex justify-between items-center\">\r\n                                    <h2 className=\"text-xl font-bold text-white\">Inventory</h2>\r\n                                    <div className=\"text-sm text-slate-400\">\r\n                                        {filteredInventory.length}{\" \"}\r\n                                        {filteredInventory.length === 1 ? \"idol\" : \"idols\"}\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <SearchBar\r\n                                    value={inventorySearchTerm}\r\n                                    onChange={setInventorySearchTerm}\r\n                                />\r\n                                <PasteTip />\r\n                            </div>\r\n\r\n                            {filteredInventory.length === 0 && inventory.length > 0 ? (\r\n                                <NoMatchingIdols />\r\n                            ) : (\r\n                                <IdolInventory\r\n                                    inventory={filteredInventory}\r\n                                    onRemoveIdol={handleRemoveIdol}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* Modifiers Tab Content (Mobile) */}\r\n                    <div className={`col-span-12 ${activeTab === \"modifiers\" ? \"md:hidden\" : \"hidden\"}`}>\r\n                        <ActiveModifiers gridState={gridState} />\r\n                    </div>\r\n                </div>\r\n\r\n                <Footer />\r\n\r\n                {/* Global Components */}\r\n                <IdolPasteHandler onAddIdol={handleAddIdol} modData={modData} />\r\n            </div>\r\n        </DndProvider>\r\n    );\r\n}\r\n\r\nexport default App;"],"names":["IDOL_TYPES","name","width","height","IDOL_DATA_FILES","STORAGE_KEYS","saveGridState","gridState","localStorage","setItem","JSON","stringify","err","console","error","saveInventory","inventory","typeCodeMap","Minor","Kamasan","Totemic","Noble","Conqueror","Burial","typeFromCodeMap","Object","entries","reduce","acc","_ref","type","code","optimizeDataForSharing","idolMap","Map","map","idol","index","id","sparseGrid","placedIdols","Set","r","length","c","cell","pos","position","row","col","idolIndex","get","push","add","g","v","idolType","result","has","isUnique","_idol$uniqueModifiers","uniqueName","uniqueModifiers","m","Mod","_idol$prefixes","_idol$suffixes","prefixIds","prefixes","filter","p","suffixIds","suffixes","s","findModifierById","modData","normalizedType","charAt","toUpperCase","slice","toLowerCase","foundPrefix","find","prefix","foundSuffix","suffix","idolSizes","restoreFromOptimizedData","optimizedData","idolData","typeCode","isPlaced","idolId","Date","now","uniqueMods","mod","Name","Code","Math","random","Boolean","generateIdolName","Array","fill","generateShareableURL","json","base64","uint8Array","binary","byte","String","fromCharCode","btoa","replace","uint8ToBase64","pako","level","url","URL","window","location","href","searchParams","set","toString","getSharedDataFromURL","shareParam","arguments","undefined","compressed","standardBase64","pad","paddedBase64","repeat","binaryString","atob","bytes","Uint8Array","i","charCodeAt","base64ToUint8Array","to","parse","BLOCKED_CELLS","isBlockedCell","placeIdol","grid","idolTypes","newGrid","_","positionData","calculateGridScore","filledCellCount","validatePlacement","valid","reason","optimizeGrid","currentGrid","clearExisting","placedCount","notPlacedCount","notPlacedIdols","bestGrid","bestScore","placementReasons","testGrid","iterationPlacedIdols","iterationReasons","shuffledInventory","placed","validation","score","size","parts","prefixPart","totalCount","displayCount","suffixPart","join","generateIdols","desiredModifiers","modifierGroups","groups","count","originalCount","values","modifierUsage","usage","idols","typeCounts","counts","areModsCompatible","mod1","mod2","areExclusiveModifiers","includes","patterns","mod1MatchesPattern","mod2MatchesPattern","tryCreateFullIdol","availablePrefixes","availableSuffixes","determineIdolType","prefixTypeSupport","suffixTypeSupport","supportingTypes","_modData$prefixes$typ","some","_modData$suffixes$typ","typePairs","typePairMap","type1","type2","eligibleTypes","hasValidPrefix","_prefixTypeSupport$ge","hasValidSuffix","_suffixTypeSupport$ge","pairedTypes","every","type1Item","t","type2Item","type1Cells","type2Cells","type1Count","type2Count","type1CellsUsed","type2CellsUsed","chosenType","sum","sort","a","b","typeA","typeB","createdIdol","_modData$prefixes$typ2","newIdol","_modData$suffixes$typ2","typeAvailablePrefixes","_modData$prefixes$ido","typeAvailableSuffixes","_modData$suffixes$ido","selectedPrefixes","selectedSuffixes","isCompatibleWithSuffixes","isCompatibleWithPrefixes","forEach","AppContext","createContext","AppProvider","children","setModData","useState","setIdolTypes","setInventory","setGridState","isLoading","setIsLoading","activeTab","setActiveTab","generationResult","setGenerationResult","firstVisit","setFirstVisit","inventorySearchTerm","setInventorySearchTerm","useEffect","async","data","baseUrl","process","fetchPromises","filename","fetch","responses","Promise","all","failedResponses","ok","failedUrls","Error","mods","dataResponses","minorData","kamasanNobleData","burialTotemicData","conquerorData","formatIdolData","types","alert","loadIdolData","sharedData","savedGrid","loadGridState","getItem","savedInventory","loadInventory","fetchData","handleAddIdol","useCallback","idolWithId","prevInventory","updatedInventory","handleRemoveIdol","idolOnGrid","idolPosition","canPlaceIdol","placeIdolOnGrid","removeIdolFromGrid","handlePlaceIdol","currentPosition","gridForCheck","invIdol","handleRemoveFromGrid","handleClearAll","emptyGrid","handleClearInventoryExceptUniques","uniqueIdols","handleOptimizeGrid","optimizationResult","outer","handleGenerateIdols","generateAndPlaceIdols","expandedModifiers","flatMap","modWithoutCount","total","notPlaced","modifiersRequested","success","newInventory","finalInventory","handleLoadStrategy","shareUrl","message","filteredInventory","useMemo","searchTerm","contextValue","_jsx","Provider","value","useGrid","contextIsBlockedCell","useContext","getIdolDimensions","_grid$r","gridStats","totalIdols","idolTypeCount","processedCells","cellKey","IDOL_COLOR_MAP","primary","secondary","unique","default","GridCell","isPrimary","isBlocked","onPlaceIdol","onRemoveFromGrid","isValidPlacement","currentDrag","previewStatus","setPreviewStatus","isOccupiedByOtherIdol","dragItem","sourceType","sourcePosition","_gridState$sourceRow","sourceRow","sourceCol","draggedIdol","processHover","item","isOver","canDrop","drop","useDrop","accept","hover","collect","monitor","isDragging","drag","useDrag","canDrag","end","cellClassNames","classNames","colors","posRow","posCol","isRightEdge","isBottomEdge","ref","node","className","onContextMenu","e","preventDefault","title","style","transition","React","GRID_PATTERN_STYLE","backgroundSize","backgroundImage","backgroundPosition","Grid","setCurrentDrag","handleDragStart","_e$dataTransfer","dataTransfer","getData","handleDragEnd","addEventListener","removeEventListener","validCells","validPositions","renderGrid","rowIndex","colIndex","validCell","VARIANT_STYLES","danger","amber","blue","SIZE_STYLES","sm","md","lg","Button","variant","disabled","onClick","props","combinedStyles","REASON_MAP","OptimizeButton","onOptimize","isOptimizing","setIsOptimizing","showResults","setShowResults","results","setResults","handleOptimize","setTimeout","optimizationResults","handleCloseResults","getReasonText","resultsSummary","_jsxs","OptimizeIcon","xmlns","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","displayName","extractNumericValue","modText","normalizedText","trim","test","numericMatch","match","parseInt","generateTradeUrl","query","stats","filters","status","option","encodeURIComponent","trade","numericValue","min","max","IdolItem","memo","onRemoveIdol","compactView","dropResult","getDropResult","handleRightClick","handleTradeClick","stopPropagation","tradeUrl","open","bgGradient","opacity","canTrade","_idol$prefixes2","_idol$suffixes2","hasValidTradeData","placedStyles","idx","CompactViewIcon","DetailedViewIcon","EmptyInventoryIcon","IdolInventory","_ref2","setCompactView","toggleView","prev","isInventoryEmpty","Card","headerRight","PATTERNS","regex","POE_PATTERNS","PREFIX_PATTERNS","SUFFIX_PATTERNS","getMatchPattern","fullText","_modText$match","parseFloat","areModsEquivalent","normalize","str","norm1","norm2","areSimilarEnough","s1","s2","textOnly1","textOnly2","minLength","comparisonLength","floor","sample1","substring","sample2","determineModifierType","pattern","ExportModal","onClose","availableStrategies","selectedStrategies","setSelectedStrategies","includeUniques","setIncludeUniques","exportText","copySuccess","setCopySuccess","toggleStrategy","strategy","role","tabIndex","onKeyPress","key","checked","onChange","target","htmlFor","handleCopyText","navigator","clipboard","writeText","then","ModifierGroup","modifiers","isArray","displayMod","textColorClass","ModifierItem","ActiveModifiers","showExportModal","setShowExportModal","activeModifiers","allModifiers","uniqueIdolsFound","_cell$uniqueModifiers","modCount","warn","grouped","baseKey","instances","text","matchPattern","group","totalValue","Number","inst","toFixed","stackedMod","tierMatch","stackedValue","calculateStackedModifiers","groupedModifiers","Unique","nameKey","fromEntries","_ref3","exportableModifiers","idolTypeCounts","idolPos","keys","_ref5","generateExportText","strategyText","normalMods","statsText","uniqueIdolsText","_ref4","ModifierCard","modifier","inModifierList","searchContext","onRemove","isPrefixStyle","handleClick","styleClasses","highlightClass","tooltipText","supportedTypes","ModeToggleButtons","viewByName","handleViewModeChange","NameTag","isSelected","isFullySelected","FilterTypeSelect","filterType","SelectionIndicator","onClear","ModifierSearch","onAddModifier","onRemoveModifier","modifierList","selectedType","initialState","onSearchUpdate","setSearchTerm","setFilterType","setViewByName","selectedNames","setSelectedNames","nameSearchTerm","setNameSearchTerm","selectedGroupNames","setSelectedGroupNames","nameToGroupMap","mapping","groupName","modNames","modifierNames","prefixNames","suffixNames","typeModifiers","from","combinedUniqueNames","uniqueNames","nameTagsToDisplay","names","processedGroups","isGroup","localeCompare","getNamesInGroup","handleSearchTermChange","handleFilterTypeChange","mode","handleNameSelection","groupNames","prevNames","newNames","n","getBaseEffectKey","timeoutId","clearTimeout","useModifiers","handleNameSearchChange","handleClearSelections","getModifierCount","list","sortByRelevance","items","lowerTerm","aNameMatch","indexOf","bNameMatch","filteredModifiers","nameFilter","combinedPrefixes","modsSeen","_ref6","prefixList","_ref7","typeList","_ref8","combinedSuffixes","_ref9","suffixList","_ref10","_ref11","prefixModsSeen","_ref12","_ref13","_ref14","suffixModsSeen","_ref15","_ref16","_ref17","filtered","filteredPrefixes","flat","filteredSuffixes","getGroupForName","filteredNameTags","lowerSearchTerm","selectionCount","_Fragment","placeholder","prefixesForName","suffixesForName","hasModifiers","renderSearchResults","hasPrefixes","hasSuffixes","hasSearch","noResults","GroupedTypeButtons","onCreateIdol","ModifierList","ErrorMessage","onAddIdol","groupedIdolTypes","label","setSelectedType","setSelectedPrefixes","setSelectedSuffixes","idolName","setIdolName","setError","errorTimeout","setErrorTimeout","searchState","setSearchState","isGroupedType","specificTypes","exclusive","patternSet","handleAddModifier","existingPrefix","errorMsg","timeout","existingSuffix","handleRemovePrefix","handleRemoveSuffix","handleRemoveModifier","handleCreateIdol","getTypeSpecificMods","KamasanNoble","TotemicBurial","handleSearchUpdate","newState","MAX_WIDTH_CLASSES","xl","full","Modal","isOpen","actions","maxWidth","handleKeyDown","document","maxWidthClass","processModifiers","modType","modifierMap","canonicalMod","userMod","modCollection","exactMatch","equivalentMatch","typeMatch","modifierType","findCanonicalModifier","modWithType","LoadingSpinner","cx","cy","LoadIcon","onGenerateIdols","setDesiredModifiers","useLocalStorage","initialValue","storedValue","setStoredValue","showSearch","setShowSearch","loadingFromInventory","setLoadingFromInventory","isLoadModalOpen","setIsLoadModalOpen","isClearModalOpen","setIsClearModalOpen","searchHistoryRef","useRef","totalModifierCount","hasNonUniqueIdols","currentModifiers","existingIndex","findIndex","updatedModifiers","newList","splice","handleRemoveModifierByRef","modifierToRemove","handleLoadFromInventory","extractedModifiers","nonUniqueIdols","extractModifiersFromInventory","mergedModifiers","extractedMod","modifiersToGenerate","current","IdolError","IdolLoading","IdolPreview","UniqueModifiers","ModifierSection","titleColor","emptyText","showPrompt","setShowPrompt","parseError","setParseError","parsedIdol","setParsedIdol","allPrefixes","allSuffixes","allMods","createUniqueId","constructModifiers","modLines","currentMod","line","combinedMod","combinedIsKnown","currentIsKnown","nextLineStartsNewMod","foundMatch","lookahead","testMod","processUniqueModifiers","lines","modStart","modEnd","processNormalModifiers","processedModLines","modLine","found","parseIdolText","split","itemLevel","rarity","rarityLine","startsWith","rarityIndex","typeLine","itemLevelLine","separatorIndices","l","isMagic","handlePaste","isFormElement","tagName","isContentEditable","hasEditableParent","closest","rawText","clipboardData","handleAddParsedIdol","handleClose","ShareIcon","Tooltip","ShareButton","showTooltip","setShowTooltip","isCopying","setIsCopying","handleShare","shareableURL","copyToClipboard","buttonText","ClearButton","showConfirm","setShowConfirm","handleShowConfirm","handleCancelConfirm","confirmClear","clearSavedData","removeItem","ErrorDisplay","EmptyState","hasFilter","StrategyCard","onLoadStrategy","author","description","mapdevice","scarabs","source","rel","tags","tag","strategies","setStrategies","loading","setLoading","setFilter","response","fetchStrategies","filteredStrategies","lowerFilter","scarab","showModal","setShowModal","handleOpen","StrategiesModal","LoadingState","ErrorState","SearchInput","IdolList","isIdolInInventory","IdolCard","isInInventory","onTradeClick","fullType","setUniqueIdols","formattedIdols","Item","Type","Mods","fetchUniqueIdols","filteredIdols","uniqueIdolName","inventoryIdol","GROUPED_IDOL_TYPES","TYPE_MAPPINGS","TradeGenerator","displayError","clearError","typeSpecificMods","prevPrefixes","prevSuffixes","handleTradeForModifiers","tradeType","generateTradeUrlWithMultipleModifiers","prefixFilters","suffixFilters","type_filters","category","renderModifierList","handleRemove","Header","StrategiesButton","MobileTabNav","TabButton","active","DesktopTabs","DesktopTabButton","minWidth","GenerationResultNotification","isError","hasNotPlaced","bgColorClass","FirstVisitTip","onDismiss","fillRule","clipRule","NoMatchingIdols","SearchBar","PasteTip","Footer","AppContent","isLeftColumnVisible","DndProvider","backend","HTML5Backend","DesiredModifiers","UniqueIdols","IdolBuilder","IdolPasteHandler"],"sourceRoot":""}